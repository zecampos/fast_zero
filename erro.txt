cd /Users/josecampos/Developer/Python/learning/fast_zero

poetry shell
Spawning shell within /Users/josecampos/Library/Caches/pypoetry/virtualenvs/fast-zero-FIdAiC32-py3.13
➜  fast_zero git:(master) ✗ emulate bash -c '. /Users/josecampos/Library/Caches/pypoetry/virtualenvs/fast-zero-FIdAiC32-py3.13/bin/activate'
(fast-zero-py3.13) ➜  fast_zero git:(master) ✗ task test
Demucs-Gui-1.3.2.1/GUI/GuiMain.py:24:1: E402 Module level import not at top of file
   |
22 | For example, the output of these models can only be for research purposes."""
23 |
24 | import shared
   | ^^^^^^^^^^^^^ E402
25 |
26 | if not shared.use_PyQt6:
   |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:106:1: E402 Module level import not at top of file
    |
104 |     )
105 |
106 | import datetime
    | ^^^^^^^^^^^^^^^ E402
107 | import json
108 | import logging
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:107:1: E402 Module level import not at top of file
    |
106 | import datetime
107 | import json
    | ^^^^^^^^^^^ E402
108 | import logging
109 | import logging.handlers
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:108:1: E402 Module level import not at top of file
    |
106 | import datetime
107 | import json
108 | import logging
    | ^^^^^^^^^^^^^^ E402
109 | import logging.handlers
110 | import math
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:109:1: E402 Module level import not at top of file
    |
107 | import json
108 | import logging
109 | import logging.handlers
    | ^^^^^^^^^^^^^^^^^^^^^^^ E402
110 | import math
111 | import os
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:110:1: E402 Module level import not at top of file
    |
108 | import logging
109 | import logging.handlers
110 | import math
    | ^^^^^^^^^^^ E402
111 | import os
112 | import pathlib
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:111:1: E402 Module level import not at top of file
    |
109 | import logging.handlers
110 | import math
111 | import os
    | ^^^^^^^^^ E402
112 | import pathlib
113 | import platform
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:112:1: E402 Module level import not at top of file
    |
110 | import math
111 | import os
112 | import pathlib
    | ^^^^^^^^^^^^^^ E402
113 | import platform
114 | import pprint
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:113:1: E402 Module level import not at top of file
    |
111 | import os
112 | import pathlib
113 | import platform
    | ^^^^^^^^^^^^^^^ E402
114 | import pprint
115 | import random
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:114:1: E402 Module level import not at top of file
    |
112 | import pathlib
113 | import platform
114 | import pprint
    | ^^^^^^^^^^^^^ E402
115 | import random
116 | import re
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:115:1: E402 Module level import not at top of file
    |
113 | import platform
114 | import pprint
115 | import random
    | ^^^^^^^^^^^^^ E402
116 | import re
117 | import shlex
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:116:1: E402 Module level import not at top of file
    |
114 | import pprint
115 | import random
116 | import re
    | ^^^^^^^^^ E402
117 | import shlex
118 | import subprocess
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:117:1: E402 Module level import not at top of file
    |
115 | import random
116 | import re
117 | import shlex
    | ^^^^^^^^^^^^ E402
118 | import subprocess
119 | import sys
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:118:1: E402 Module level import not at top of file
    |
116 | import re
117 | import shlex
118 | import subprocess
    | ^^^^^^^^^^^^^^^^^ E402
119 | import sys
120 | import threading
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:119:1: E402 Module level import not at top of file
    |
117 | import shlex
118 | import subprocess
119 | import sys
    | ^^^^^^^^^^ E402
120 | import threading
121 | import time
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:120:1: E402 Module level import not at top of file
    |
118 | import subprocess
119 | import sys
120 | import threading
    | ^^^^^^^^^^^^^^^^ E402
121 | import time
122 | import traceback
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:121:1: E402 Module level import not at top of file
    |
119 | import sys
120 | import threading
121 | import time
    | ^^^^^^^^^^^ E402
122 | import traceback
123 | import urllib.parse
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:122:1: E402 Module level import not at top of file
    |
120 | import threading
121 | import time
122 | import traceback
    | ^^^^^^^^^^^^^^^^ E402
123 | import urllib.parse
124 | import webbrowser
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:123:1: E402 Module level import not at top of file
    |
121 | import time
122 | import traceback
123 | import urllib.parse
    | ^^^^^^^^^^^^^^^^^^^ E402
124 | import webbrowser
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:124:1: E402 Module level import not at top of file
    |
122 | import traceback
123 | import urllib.parse
124 | import webbrowser
    | ^^^^^^^^^^^^^^^^^ E402
125 |
126 | import packaging.version
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:126:1: E402 Module level import not at top of file
    |
124 | import webbrowser
125 |
126 | import packaging.version
    | ^^^^^^^^^^^^^^^^^^^^^^^^ E402
127 | import psutil
128 | import separator
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:127:1: E402 Module level import not at top of file
    |
126 | import packaging.version
127 | import psutil
    | ^^^^^^^^^^^^^ E402
128 | import separator
129 | from PySide6_modified import (
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:128:1: E402 Module level import not at top of file
    |
126 | import packaging.version
127 | import psutil
128 | import separator
    | ^^^^^^^^^^^^^^^^ E402
129 | from PySide6_modified import (
130 |     Action,
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:129:1: E402 Module level import not at top of file
    |
127 |   import psutil
128 |   import separator
129 | / from PySide6_modified import (
130 | |     Action,
131 | |     DelegateCombiner,
132 | |     DoNothingDelegate,
133 | |     ExpandingQPlainTextEdit,
134 | |     FileNameDelegate,
135 | |     PercentSpinBoxDelegate,
136 | |     ProgressDelegate,
137 | |     QTableWidgetWithCheckBox,
138 | |     TextWrappedQLabel,
139 | | )
    | |_^ E402
140 |
141 |   file_queue_lock = threading.Lock()
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:174:80: E501 Line too long (83 > 79)
    |
173 |         fontpath = pathlib.Path("./fonts/Montserrat-Bold.ttf").resolve()
174 |         self.status_font_id = QtGui.QFontDatabase.addApplicationFont(str(fontpath))
    |                                                                                ^^^^ E501
175 |         families = QtGui.QFontDatabase.applicationFontFamilies(self.status_font_id)
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:175:80: E501 Line too long (83 > 79)
    |
173 |         fontpath = pathlib.Path("./fonts/Montserrat-Bold.ttf").resolve()
174 |         self.status_font_id = QtGui.QFontDatabase.addApplicationFont(str(fontpath))
175 |         families = QtGui.QFontDatabase.applicationFontFamilies(self.status_font_id)
    |                                                                                ^^^^ E501
176 |
177 |         self.status = QLabel(self)
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:181:80: E501 Line too long (88 > 79)
    |
179 |         self.status.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
180 |         self.status.setWordWrap(True)
181 |         self.status.setAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignTop)
    |                                                                                ^^^^^^^^^ E501
182 |         self.status.setText("Starting...")
183 |         self.status.setFont(QtGui.QFont(families[0], 11))
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:200:9: PLR6301 Method `closeEvent` could be a function, class method, or static method
    |
198 |         self.timer.singleShot(20, self.increaseOpacity)
199 |
200 |     def closeEvent(self, event: QtGui.QCloseEvent) -> None:
    |         ^^^^^^^^^^ PLR6301
201 |         event.ignore()
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:213:16: PLW0603 Using the global statement to update `main_window` is discouraged
    |
211 |             sys.exit(1)
212 |         self.end_time = time.perf_counter()
213 |         global main_window
    |                ^^^^^^^^^^^ PLW0603
214 |         main_window = MainWindow()
215 |         main_window.show()
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:217:80: E501 Line too long (110 > 79)
    |
215 |         main_window.show()
216 |         self.hide()
217 |         main_window.setStatusText.emit("Startup took %.3fs" % (self.end_time - self.start_time - paused_time))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:220:1: PLR0904 Too many public methods (22 > 20)
    |
220 | / class MainWindow(QMainWindow):
221 | |     showError = Signal(str, str)
222 | |     showInfo = Signal(str, str)
223 | |     showWarning = Signal(str, str)
224 | |     showParamSettings = Signal()
225 | |     setStatusText = Signal(str)
226 | |
227 | |     _execInMainThreadSignal = Signal()
228 | |     _execInMainThreadFunc = None
229 | |     _execInMainThreadResult = None
230 | |     _execInMainThreadSuccess = False
231 | |     _execInMainThreadLock = threading.Lock()
232 | |     _execInMainThreadResultEvent = threading.Event()
233 | |
234 | |     def __init__(self):
235 | |         super().__init__()
236 | |         self.setWindowIcon(QtGui.QIcon("./icon/icon.ico"))
237 | |         self.setWindowTitle("Demucs GUI %s" % __version__)
238 | |         self.setStatusBar(QStatusBar())
239 | |         self.timer = QTimer()
240 | |         self.widget = QWidget()
241 | |         self.tab_widget = QTabWidget()
242 | |         self.setCentralWidget(self.widget)
243 | |         self.widget_layout = QVBoxLayout()
244 | |         self.widget_layout.addWidget(self.tab_widget)
245 | |         self.widget.setLayout(self.widget_layout)
246 | |         self.m = QMessageBox()
247 | |         self.showError.connect(self.showErrorFunc)
248 | |         self.showInfo.connect(self.showInfoFunc)
249 | |         self.showWarning.connect(self.showWarningFunc)
250 | |         self.showParamSettings.connect(self.showParamSettingsFunc)
251 | |         self.setStatusText.connect(self.setStatusTextFunc)
252 | |         self._execInMainThreadSignal.connect(self._exec_in_main_thread_executor)
253 | |         self.timer.singleShot(50, self.showModelSelector)
254 | |
255 | |         self.menubar = QMenuBar()
256 | |         self.menu_about = QMenu("About")
257 | |         self.menu_about_about = Action(
258 | |             "About Demucs GUI", self, lambda: self.showInfoFunc("About Demucs GUI %s" % __version__, LICENSE)
259 | |         )
260 | |         self.menu_about_about.setMenuRole(Action.MenuRole.NoRole)
261 | |         self.menu_about_usage = Action(
262 | |             "Usage", self, lambda: webbrowser.open("https://github.com/CarlGao4/Demucs-Gui/blob/main/usage.md")
263 | |         )
264 | |         self.menu_clear_history = Action("Clear history (including mixer presets)", self, self.clear_history)
265 | |         self.menu_clear_location = Action(
266 | |             "Clear saved file location", self, lambda: shared.ResetHistory("save_location")
267 | |         )
268 | |         self.menu_reset_style = Action("Reset style", self, lambda: shared.SetSetting("style", None))
269 | |         self.menu_check_update = Action(
270 | |             "Check for update",
271 | |             self,
272 | |             lambda: shared.checkUpdate(lambda *x: self.exec_in_main(lambda: self.validateUpdate(*x, show=True))),
273 | |         )
274 | |         self.menu_restart = Action("Restart", self, self.restart)
275 | |         self.menu_about_log = Action("Open log", self, self.open_log)
276 | |         self.menu_about.addActions(
277 | |             [
278 | |                 self.menu_about_about,
279 | |                 self.menu_about_usage,
280 | |                 self.menu_clear_history,
281 | |                 self.menu_clear_location,
282 | |                 self.menu_reset_style,
283 | |                 self.menu_check_update,
284 | |                 self.menu_restart,
285 | |                 self.menu_about_log,
286 | |             ]
287 | |         )
288 | |         if sys.platform == "win32" and (
289 | |             (separator.has_Intel and sys.version_info[:2] == (3, 11)) or find_device_win.has_Intel
290 | |         ):
291 | |             self.menu_aot = Action("About AOT", self, self.ask_AOT)
292 | |             self.menu_about.addAction(self.menu_aot)
293 | |         self.menubar.addAction(self.menu_about.menuAction())
294 | |
295 | |         if shared.debug:
296 | |             self.code_input_window = QWidget()
297 | |             self.code_edit = ExpandingQPlainTextEdit()
298 | |             self.code_edit.setPlaceholderText("Enter code here")
299 | |             self.code_edit.setFont(QtGui.QFont("Courier New", 10))
300 | |             self.code_edit.setMinimumHeight(200)
301 | |             self.code_run = QPushButton("Run")
302 | |             self.code_run.clicked.connect(self.runCode)
303 | |             self.code_run.setToolTip("Ctrl+Return")
304 | |             self.code_layout = QVBoxLayout()
305 | |             self.code_layout.addWidget(self.code_edit)
306 | |             self.code_layout.addWidget(self.code_run)
307 | |             self.code_input_window.setLayout(self.code_layout)
308 | |             self.code_input_window.setWindowTitle("Run code")
309 | |             self.code_input_window.setWindowIcon(QtGui.QIcon("./icon/icon.ico"))
310 | |             self.code_input_window.closeEvent = lambda event: self.code_input_window.hide()
311 | |             self.code_input_window.focusPolicy = Qt.FocusPolicy.StrongFocus
312 | |             self.code_shortcut = QtGui.QShortcut(QtGui.QKeySequence("Ctrl+Return"), self.code_input_window)
313 | |             self.code_shortcut.activated.connect(self.runCode)
314 | |             self.code_shortcut.setAutoRepeat(False)
315 | |
316 | |             self.menu_debug = QMenu("Debug")
317 | |             self.menu_debug_settings = Action("Print settings", self, self.printSettings)
318 | |             self.menu_debug_history = Action("Print history", self, self.printHistory)
319 | |             self.menu_run_code = Action("Run code", self, self.showRunCodeWindow)
320 | |             self.menu_debug.addAction(self.menu_debug_settings)
321 | |             self.menu_debug.addAction(self.menu_debug_history)
322 | |             self.menu_debug.addAction(self.menu_run_code)
323 | |             self.menubar.addAction(self.menu_debug.menuAction())
324 | |
325 | |         self.setMenuBar(self.menubar)
326 | |
327 | |         self.restarting = False
328 | |         self._status_prefix = ""
329 | |         self._status_text = ""
330 | |
331 | |         shared.checkUpdate(lambda *x: self.exec_in_main(lambda: self.validateUpdate(*x)))
332 | |
333 | |     def showModelSelector(self):
334 | |         self.model_selector = ModelSelector()
335 | |         self.tab_widget.addTab(self.model_selector, self.model_selector.widget_title)
336 | |         if (
337 | |             sys.platform == "win32"
338 | |             and sys.version_info[:2] == (3, 11)
339 | |             and separator.has_Intel
340 | |             and separator.Intel_JIT_only
341 | |         ):
342 | |             self.ask_AOT(open_from_menu=False)
343 | |
344 | |     def showParamSettingsFunc(self):
345 | |         self.param_settings = SepParamSettings()
346 | |         self.save_options = SaveOptions()
347 | |         self.param_settings.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
348 | |         self.options_tab = QWidget()
349 | |         self.options_tab.setLayout(QVBoxLayout())
350 | |         self.options_tab.layout().addWidget(self.param_settings)
351 | |         self.options_tab.layout().addWidget(self.save_options)
352 | |         self.mixer = Mixer()
353 | |         self.file_queue = FileQueue()
354 | |         self.separation_control = SeparationControl()
355 | |         self.tab_widget.addTab(self.options_tab, "Options")
356 | |         self.tab_widget.addTab(self.mixer, self.mixer.widget_title)
357 | |         self.tab_widget.addTab(self.file_queue, self.file_queue.widget_title % self.file_queue.queue_length)
358 | |         self.widget_layout.addWidget(self.separation_control)
359 | |
360 | |     def updateQueueLength(self):
361 | |         self.tab_widget.setTabText(
362 | |             self.tab_widget.indexOf(self.file_queue), self.file_queue.widget_title % self.file_queue.queue_length
363 | |         )
364 | |
365 | |     def loadModel(self, model, repo):
366 | |         try:
367 | |             self.separator = separator.Separator(model, repo, self.setStatusText.emit)
368 | |         except separator.ModelSourceNameUnsupportedError as e:
369 | |             return e
370 | |         except Exception:
371 | |             logging.error(
372 | |                 "Failed to load model %s from %s:\n%s"
373 | |                 % (model, ('"' + str(repo) + '"') if repo is not None else "remote repo", traceback.format_exc())
374 | |             )
375 | |             return False
376 | |         except SystemExit:
377 | |             logging.error(
378 | |                 "Failed to load model %s from %s:\n%s"
379 | |                 % (model, ('"' + str(repo) + '"') if repo is not None else "remote repo", traceback.format_exc())
380 | |             )
381 | |             return False
382 | |         return True
383 | |
384 | |     def closeEvent(self, event):
385 | |         if (
386 | |             self.restarting
387 | |             or (not hasattr(self, "separator"))
388 | |             or (not (self.separator.separating or self.save_options.saving))
389 | |             or (
390 | |                 self.m.question(
391 | |                     self,
392 | |                     "Separation in progress",
393 | |                     "Separation is not finished, quit anyway?",
394 | |                     self.m.StandardButton.Yes,
395 | |                     self.m.StandardButton.Cancel,
396 | |                 )
397 | |                 == self.m.StandardButton.Yes
398 | |             )
399 | |         ):
400 | |             if shared.debug:
401 | |                 self.code_input_window.close()
402 | |             return super().closeEvent(event)
403 | |         else:
404 | |             event.ignore()
405 | |
406 | |     def printSettings(self):
407 | |         pprint.pprint(shared.settings, sort_dicts=False, stream=sys.stderr)
408 | |
409 | |     def printHistory(self):
410 | |         pprint.pprint(shared.history, sort_dicts=False, stream=sys.stderr)
411 | |
412 | |     def showRunCodeWindow(self):
413 | |         self.code_input_window.show()
414 | |         self.code_input_window.activateWindow()
415 | |         self.code_input_window.raise_()
416 | |
417 | |     def runCode(self):
418 | |         exec(self.code_edit.toPlainText())
419 | |
420 | |     @property
421 | |     def status_prefix(self):
422 | |         return self._status_prefix
423 | |
424 | |     @status_prefix.setter
425 | |     def status_prefix(self, value):
426 | |         self._status_prefix = value
427 | |         self.refreshStatusText()
428 | |
429 | |     def showErrorFunc(self, title, text):
430 | |         self.m.critical(self, title, text)
431 | |
432 | |     def showInfoFunc(self, title, text):
433 | |         self.m.information(self, title, text)
434 | |
435 | |     def showWarningFunc(self, title, text):
436 | |         self.m.warning(self, title, text)
437 | |
438 | |     def setStatusTextFunc(self, text):
439 | |         self._status_text = text
440 | |         self.statusBar().showMessage(self.status_prefix + text)
441 | |
442 | |     def refreshStatusText(self):
443 | |         self.setStatusText.emit(self._status_text)
444 | |
445 | |     def open_log(self):
446 | |         match sys.platform:
447 | |             case "win32":
448 | |                 os.startfile(str(shared.logfile.resolve()))
449 | |             case "darwin":
450 | |                 os.system(shlex.join(["open", str(shared.logfile.resolve())]))
451 | |             case _:
452 | |                 try:
453 | |                     p = shared.Popen(["xdg-open", str(shared.logfile.resolve())])
454 | |                     assert p.wait(1) == 0
455 | |                 except Exception:
456 | |                     if (
457 | |                         self.m.question(
458 | |                             self,
459 | |                             "Open log failed",
460 | |                             "Failed to open log file. Do you want to copy the path?\n"
461 | |                             "Log file path: %s" % shared.logfile,
462 | |                             self.m.StandardButton.Yes,
463 | |                             self.m.StandardButton.No,
464 | |                         )
465 | |                         == self.m.StandardButton.Yes
466 | |                     ):
467 | |                         QApplication.clipboard().setText(str(shared.logfile))
468 | |
469 | |     def exec_in_main(self, func):
470 | |         with self._execInMainThreadLock:
471 | |             self._execInMainThreadFunc = func
472 | |             self._execInMainThreadResultEvent.clear()
473 | |             self._execInMainThreadSignal.emit()
474 | |             self._execInMainThreadResultEvent.wait()
475 | |             if self._execInMainThreadSuccess:
476 | |                 ret = self._execInMainThreadResult
477 | |                 self._execInMainThreadResult = None
478 | |                 self._execInMainThreadFunc = None
479 | |                 return ret
480 | |             else:
481 | |                 err = self._execInMainThreadResult
482 | |                 self._execInMainThreadResult = None
483 | |                 self._execInMainThreadFunc = None
484 | |                 raise err
485 | |
486 | |     def _exec_in_main_thread_executor(self):
487 | |         try:
488 | |             self._execInMainThreadResult = self._execInMainThreadFunc()
489 | |             self._execInMainThreadSuccess = True
490 | |         except Exception as e:
491 | |             self._execInMainThreadResult = e
492 | |             self._execInMainThreadSuccess = False
493 | |         self._execInMainThreadResultEvent.set()
494 | |
495 | |     def validateUpdate(self, new_version, description="", show=False):
496 | |         if new_version is None:
497 | |             if show:
498 | |                 self.m.warning(
499 | |                     self, "Check for update failed", "Failed to check for update. Check log file for details."
500 | |                 )
501 | |             return
502 | |         version_new = packaging.version.Version(new_version)
503 | |         if version_new <= packaging.version.Version(__version__):
504 | |             if show:
505 | |                 self.m.information(self, "No update available", "You are using the latest version.")
506 | |             return
507 | |         message = f"A new version ({new_version}) of Demucs GUI is available. "
508 | |         if description:
509 | |             message += f"\n\n{description}\n\n"
510 | |         message += "Do you want to visit GitHub to download it?"
511 | |         if version_new.is_prerelease:
512 | |             message += "\nWarning: this is a pre-release version."
513 | |         if (
514 | |             self.m.question(self, "Update available", message, self.m.StandardButton.Yes, self.m.StandardButton.No)
515 | |             == self.m.StandardButton.Yes
516 | |         ):
517 | |             webbrowser.open("https://github.com/CarlGao4/Demucs-Gui/releases")
518 | |
519 | |     def clear_history(self):
520 | |         if (
521 | |             self.m.question(
522 | |                 self,
523 | |                 "Clear history",
524 | |                 "Are you sure you want to clear the history? This action cannot be undone. (Restart required)",
525 | |                 self.m.StandardButton.Yes,
526 | |                 self.m.StandardButton.No,
527 | |             )
528 | |             == self.m.StandardButton.Yes
529 | |         ):
530 | |             shared.ResetHistory()
531 | |             app.quit()
532 | |
533 | |     def restart(self):
534 | |         if (
535 | |             (not hasattr(self, "separator"))
536 | |             or (not (self.separator.separating or self.save_options.saving))
537 | |             or (
538 | |                 self.m.question(
539 | |                     self,
540 | |                     "Separation in progress",
541 | |                     "Separation is not finished, restart anyway?",
542 | |                     self.m.StandardButton.Yes,
543 | |                     self.m.StandardButton.Cancel,
544 | |                 )
545 | |                 == self.m.StandardButton.Yes
546 | |             )
547 | |         ):
548 | |             subprocess.Popen(sys.orig_argv)
549 | |             self.restarting = True
550 | |             self.close()
551 | |
552 | |     def ask_AOT(self, *, open_from_menu=True):
553 | |         intel_gpus = []
554 | |         ipex_version = separator.ipex.__version__ if separator.ipex is not None else None
555 | |         if not find_device_win.ipex_version_available(ipex_version):
556 | |             if open_from_menu:
557 | |                 self.m.warning(
558 | |                     self,
559 | |                     "Unsupported IPEX version",
560 | |                     "I didn't build the AOT version for this version of IPEX. Maybe you can try building it yourself "
561 | |                     "if you are running from source.",
562 | |                 )
563 | |             return
564 | |         for i in find_device_win.gpus:
565 | |             if gpu_ver := find_device_win.is_intel_supported(i[1], i[2], ipex_version):
566 | |                 intel_gpus.append((i[0], gpu_ver))
567 | |         if not intel_gpus:
568 | |             self.m.warning(self, "No supported Intel GPU found", "No supported Intel GPU found.")
569 | |             return
570 | |         if not open_from_menu:
571 | |             prompt = "Detected Intel GPU support, but AOT is not enabled.\n\n"
572 | |             warn = False
573 | |         elif not separator.has_Intel:
574 | |             prompt = "Warning: Intel GPU support disabled, though supported Intel GPU detected.\n\n"
575 | |             warn = True
576 | |         else:
577 | |             prompt = ""
578 | |             warn = False
579 | |         intel_gpu_links = {}  # {link: [gpu_ver, ...]}
580 | |         for i in intel_gpus:
581 | |             if link := find_device_win.get_download_link(i[1], ipex_version):
582 | |                 if link not in intel_gpu_links:
583 | |                     intel_gpu_links[link] = []
584 | |                 intel_gpu_links[link].append(i[1])
585 | |         if len(intel_gpu_links) == 1:
586 | |             m = QMessageBox(self)
587 | |             m.setWindowTitle("About AOT")
588 | |             prompt += "Found %d supported Intel GPUs:\n" % len(intel_gpus)
589 | |             for idx, i in enumerate(intel_gpus):
590 | |                 prompt += "%d. %s (Version: %s)\n" % (idx + 1, i[0], i[1])
591 | |             prompt += "\nDo you want to download the AOT version or open AOT documentation?"
592 | |             prompt += (
593 | |                 "\n\nNote: The downloaded file may contain multiple versions of AOT for different GPUs, "
594 | |                 "please choose the correct version shown above."
595 | |             )
596 | |             m.setText(prompt)
597 | |             download_button = m.addButton("Download", m.ButtonRole.ActionRole)
598 | |             doc_button = m.addButton("Open documentation", m.ButtonRole.ActionRole)
599 | |             close_button = m.addButton(m.StandardButton.Close)
600 | |             m.setDefaultButton(doc_button)
601 | |             if warn:
602 | |                 m.setIcon(m.Icon.Warning)
603 | |             else:
604 | |                 m.setIcon(m.Icon.Question)
605 | |             while True:
606 | |                 m.exec()
607 | |                 if m.clickedButton() == download_button:
608 | |                     webbrowser.open(next(iter(intel_gpu_links)))
609 | |                 elif m.clickedButton() == doc_button:
610 | |                     webbrowser.open("https://github.com/CarlGao4/Demucs-Gui/blob/main/MKL-AOT.md")
611 | |                 else:
612 | |                     break
613 | |         else:
614 | |             m = QMessageBox(self)
615 | |             m.setWindowTitle("About AOT")
616 | |             prompt += "Found %d supported Intel GPUs:\n" % len(intel_gpus)
617 | |             for idx, i in enumerate(intel_gpus):
618 | |                 prompt += "%d. %s (Version: %s)\n" % (idx + 1, i[0], i[1])
619 | |             prompt += "\nDo you want to download the AOT version for one of these GPUs or open AOT documentation?"
620 | |             m.setText(prompt)
621 | |             download_buttons = []
622 | |             for link, versions in intel_gpu_links.items():
623 | |                 download_buttons.append(
624 | |                     (link, m.addButton("Download for %s" % (", ".join(versions)), m.ButtonRole.ActionRole))
625 | |                 )
626 | |             doc_button = m.addButton("Open documentation", m.ButtonRole.ActionRole)
627 | |             close_button = m.addButton(m.StandardButton.Close)
628 | |             m.setDefaultButton(doc_button)
629 | |             if warn:
630 | |                 m.setIcon(m.Icon.Warning)
631 | |             else:
632 | |                 m.setIcon(m.Icon.Question)
633 | |             while True:
634 | |                 m.exec()
635 | |                 if m.clickedButton() == doc_button:
636 | |                     webbrowser.open("https://github.com/CarlGao4/Demucs-Gui/blob/main/MKL-AOT.md")
637 | |                 elif m.clickedButton() == close_button:
638 | |                     break
639 | |                 else:
640 | |                     for i in download_buttons:
641 | |                         if m.clickedButton() == i[1]:
642 | |                             webbrowser.open(i[0], ipex_version)
643 | |                             break
    | |_________________________________^ PLR0904
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:234:9: PLR0915 Too many statements (68 > 50)
    |
232 |     _execInMainThreadResultEvent = threading.Event()
233 |
234 |     def __init__(self):
    |         ^^^^^^^^ PLR0915
235 |         super().__init__()
236 |         self.setWindowIcon(QtGui.QIcon("./icon/icon.ico"))
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:258:80: E501 Line too long (109 > 79)
    |
256 |         self.menu_about = QMenu("About")
257 |         self.menu_about_about = Action(
258 |             "About Demucs GUI", self, lambda: self.showInfoFunc("About Demucs GUI %s" % __version__, LICENSE)
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
259 |         )
260 |         self.menu_about_about.setMenuRole(Action.MenuRole.NoRole)
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:264:80: E501 Line too long (109 > 79)
    |
262 |             "Usage", self, lambda: webbrowser.open("https://github.com/CarlGao4/Demucs-Gui/blob/main/usage.md")
263 |         )
264 |         self.menu_clear_history = Action("Clear history (including mixer presets)", self, self.clear_history)
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
265 |         self.menu_clear_location = Action(
266 |             "Clear saved file location", self, lambda: shared.ResetHistory("save_location")
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:266:80: E501 Line too long (91 > 79)
    |
264 |         self.menu_clear_history = Action("Clear history (including mixer presets)", self, self.clear_history)
265 |         self.menu_clear_location = Action(
266 |             "Clear saved file location", self, lambda: shared.ResetHistory("save_location")
    |                                                                                ^^^^^^^^^^^^ E501
267 |         )
268 |         self.menu_reset_style = Action("Reset style", self, lambda: shared.SetSetting("style", None))
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:268:80: E501 Line too long (101 > 79)
    |
266 |             "Clear saved file location", self, lambda: shared.ResetHistory("save_location")
267 |         )
268 |         self.menu_reset_style = Action("Reset style", self, lambda: shared.SetSetting("style", None))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^ E501
269 |         self.menu_check_update = Action(
270 |             "Check for update",
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:272:80: E501 Line too long (113 > 79)
    |
270 |             "Check for update",
271 |             self,
272 |             lambda: shared.checkUpdate(lambda *x: self.exec_in_main(lambda: self.validateUpdate(*x, show=True))),
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
273 |         )
274 |         self.menu_restart = Action("Restart", self, self.restart)
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:289:80: E501 Line too long (98 > 79)
    |
287 |         )
288 |         if sys.platform == "win32" and (
289 |             (separator.has_Intel and sys.version_info[:2] == (3, 11)) or find_device_win.has_Intel
    |                                                                                ^^^^^^^^^^^^^^^^^^^ E501
290 |         ):
291 |             self.menu_aot = Action("About AOT", self, self.ask_AOT)
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:310:80: E501 Line too long (91 > 79)
    |
308 |             self.code_input_window.setWindowTitle("Run code")
309 |             self.code_input_window.setWindowIcon(QtGui.QIcon("./icon/icon.ico"))
310 |             self.code_input_window.closeEvent = lambda event: self.code_input_window.hide()
    |                                                                                ^^^^^^^^^^^^ E501
311 |             self.code_input_window.focusPolicy = Qt.FocusPolicy.StrongFocus
312 |             self.code_shortcut = QtGui.QShortcut(QtGui.QKeySequence("Ctrl+Return"), self.code_input_window)
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:312:80: E501 Line too long (107 > 79)
    |
310 |             self.code_input_window.closeEvent = lambda event: self.code_input_window.hide()
311 |             self.code_input_window.focusPolicy = Qt.FocusPolicy.StrongFocus
312 |             self.code_shortcut = QtGui.QShortcut(QtGui.QKeySequence("Ctrl+Return"), self.code_input_window)
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
313 |             self.code_shortcut.activated.connect(self.runCode)
314 |             self.code_shortcut.setAutoRepeat(False)
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:317:80: E501 Line too long (89 > 79)
    |
316 |             self.menu_debug = QMenu("Debug")
317 |             self.menu_debug_settings = Action("Print settings", self, self.printSettings)
    |                                                                                ^^^^^^^^^^ E501
318 |             self.menu_debug_history = Action("Print history", self, self.printHistory)
319 |             self.menu_run_code = Action("Run code", self, self.showRunCodeWindow)
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:318:80: E501 Line too long (86 > 79)
    |
316 |             self.menu_debug = QMenu("Debug")
317 |             self.menu_debug_settings = Action("Print settings", self, self.printSettings)
318 |             self.menu_debug_history = Action("Print history", self, self.printHistory)
    |                                                                                ^^^^^^^ E501
319 |             self.menu_run_code = Action("Run code", self, self.showRunCodeWindow)
320 |             self.menu_debug.addAction(self.menu_debug_settings)
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:319:80: E501 Line too long (81 > 79)
    |
317 |             self.menu_debug_settings = Action("Print settings", self, self.printSettings)
318 |             self.menu_debug_history = Action("Print history", self, self.printHistory)
319 |             self.menu_run_code = Action("Run code", self, self.showRunCodeWindow)
    |                                                                                ^^ E501
320 |             self.menu_debug.addAction(self.menu_debug_settings)
321 |             self.menu_debug.addAction(self.menu_debug_history)
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:331:80: E501 Line too long (89 > 79)
    |
329 |         self._status_text = ""
330 |
331 |         shared.checkUpdate(lambda *x: self.exec_in_main(lambda: self.validateUpdate(*x)))
    |                                                                                ^^^^^^^^^^ E501
332 |
333 |     def showModelSelector(self):
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:335:80: E501 Line too long (85 > 79)
    |
333 |     def showModelSelector(self):
334 |         self.model_selector = ModelSelector()
335 |         self.tab_widget.addTab(self.model_selector, self.model_selector.widget_title)
    |                                                                                ^^^^^^ E501
336 |         if (
337 |             sys.platform == "win32"
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:347:80: E501 Line too long (97 > 79)
    |
345 |         self.param_settings = SepParamSettings()
346 |         self.save_options = SaveOptions()
347 |         self.param_settings.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
    |                                                                                ^^^^^^^^^^^^^^^^^^ E501
348 |         self.options_tab = QWidget()
349 |         self.options_tab.setLayout(QVBoxLayout())
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:357:80: E501 Line too long (108 > 79)
    |
355 |         self.tab_widget.addTab(self.options_tab, "Options")
356 |         self.tab_widget.addTab(self.mixer, self.mixer.widget_title)
357 |         self.tab_widget.addTab(self.file_queue, self.file_queue.widget_title % self.file_queue.queue_length)
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
358 |         self.widget_layout.addWidget(self.separation_control)
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:362:80: E501 Line too long (113 > 79)
    |
360 |     def updateQueueLength(self):
361 |         self.tab_widget.setTabText(
362 |             self.tab_widget.indexOf(self.file_queue), self.file_queue.widget_title % self.file_queue.queue_length
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
363 |         )
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:367:80: E501 Line too long (86 > 79)
    |
365 |     def loadModel(self, model, repo):
366 |         try:
367 |             self.separator = separator.Separator(model, repo, self.setStatusText.emit)
    |                                                                                ^^^^^^^ E501
368 |         except separator.ModelSourceNameUnsupportedError as e:
369 |             return e
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:373:80: E501 Line too long (113 > 79)
    |
371 |             logging.error(
372 |                 "Failed to load model %s from %s:\n%s"
373 |                 % (model, ('"' + str(repo) + '"') if repo is not None else "remote repo", traceback.format_exc())
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
374 |             )
375 |             return False
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:379:80: E501 Line too long (113 > 79)
    |
377 |             logging.error(
378 |                 "Failed to load model %s from %s:\n%s"
379 |                 % (model, ('"' + str(repo) + '"') if repo is not None else "remote repo", traceback.format_exc())
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
380 |             )
381 |             return False
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:406:9: PLR6301 Method `printSettings` could be a function, class method, or static method
    |
404 |             event.ignore()
405 |
406 |     def printSettings(self):
    |         ^^^^^^^^^^^^^ PLR6301
407 |         pprint.pprint(shared.settings, sort_dicts=False, stream=sys.stderr)
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:409:9: PLR6301 Method `printHistory` could be a function, class method, or static method
    |
407 |         pprint.pprint(shared.settings, sort_dicts=False, stream=sys.stderr)
408 |
409 |     def printHistory(self):
    |         ^^^^^^^^^^^^ PLR6301
410 |         pprint.pprint(shared.history, sort_dicts=False, stream=sys.stderr)
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:453:80: E501 Line too long (81 > 79)
    |
451 |             case _:
452 |                 try:
453 |                     p = shared.Popen(["xdg-open", str(shared.logfile.resolve())])
    |                                                                                ^^ E501
454 |                     assert p.wait(1) == 0
455 |                 except Exception:
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:460:80: E501 Line too long (86 > 79)
    |
458 | …                     self,
459 | …                     "Open log failed",
460 | …                     "Failed to open log file. Do you want to copy the path?\n"
    |                                                                          ^^^^^^^ E501
461 | …                     "Log file path: %s" % shared.logfile,
462 | …                     self.m.StandardButton.Yes,
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:499:80: E501 Line too long (110 > 79)
    |
497 |             if show:
498 |                 self.m.warning(
499 |                     self, "Check for update failed", "Failed to check for update. Check log file for details."
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
500 |                 )
501 |             return
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:505:80: E501 Line too long (100 > 79)
    |
503 |         if version_new <= packaging.version.Version(__version__):
504 |             if show:
505 |                 self.m.information(self, "No update available", "You are using the latest version.")
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^ E501
506 |             return
507 |         message = f"A new version ({new_version}) of Demucs GUI is available. "
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:514:80: E501 Line too long (115 > 79)
    |
512 |             message += "\nWarning: this is a pre-release version."
513 |         if (
514 |             self.m.question(self, "Update available", message, self.m.StandardButton.Yes, self.m.StandardButton.No)
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
515 |             == self.m.StandardButton.Yes
516 |         ):
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:524:80: E501 Line too long (111 > 79)
    |
522 |                 self,
523 |                 "Clear history",
524 |                 "Are you sure you want to clear the history? This action cannot be undone. (Restart required)",
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
525 |                 self.m.StandardButton.Yes,
526 |                 self.m.StandardButton.No,
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:552:9: PLR0912 Too many branches (30 > 12)
    |
550 |             self.close()
551 |
552 |     def ask_AOT(self, *, open_from_menu=True):
    |         ^^^^^^^ PLR0912
553 |         intel_gpus = []
554 |         ipex_version = separator.ipex.__version__ if separator.ipex is not None else None
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:552:9: PLR0915 Too many statements (73 > 50)
    |
550 |             self.close()
551 |
552 |     def ask_AOT(self, *, open_from_menu=True):
    |         ^^^^^^^ PLR0915
553 |         intel_gpus = []
554 |         ipex_version = separator.ipex.__version__ if separator.ipex is not None else None
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:554:80: E501 Line too long (89 > 79)
    |
552 |     def ask_AOT(self, *, open_from_menu=True):
553 |         intel_gpus = []
554 |         ipex_version = separator.ipex.__version__ if separator.ipex is not None else None
    |                                                                                ^^^^^^^^^^ E501
555 |         if not find_device_win.ipex_version_available(ipex_version):
556 |             if open_from_menu:
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:560:80: E501 Line too long (118 > 79)
    |
558 |                     self,
559 |                     "Unsupported IPEX version",
560 |                     "I didn't build the AOT version for this version of IPEX. Maybe you can try building it yourself "
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
561 |                     "if you are running from source.",
562 |                 )
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:565:80: E501 Line too long (87 > 79)
    |
563 |             return
564 |         for i in find_device_win.gpus:
565 |             if gpu_ver := find_device_win.is_intel_supported(i[1], i[2], ipex_version):
    |                                                                                ^^^^^^^^ E501
566 |                 intel_gpus.append((i[0], gpu_ver))
567 |         if not intel_gpus:
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:568:80: E501 Line too long (97 > 79)
    |
566 |                 intel_gpus.append((i[0], gpu_ver))
567 |         if not intel_gpus:
568 |             self.m.warning(self, "No supported Intel GPU found", "No supported Intel GPU found.")
    |                                                                                ^^^^^^^^^^^^^^^^^^ E501
569 |             return
570 |         if not open_from_menu:
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:574:80: E501 Line too long (100 > 79)
    |
572 |             warn = False
573 |         elif not separator.has_Intel:
574 |             prompt = "Warning: Intel GPU support disabled, though supported Intel GPU detected.\n\n"
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^ E501
575 |             warn = True
576 |         else:
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:591:80: E501 Line too long (92 > 79)
    |
589 |             for idx, i in enumerate(intel_gpus):
590 |                 prompt += "%d. %s (Version: %s)\n" % (idx + 1, i[0], i[1])
591 |             prompt += "\nDo you want to download the AOT version or open AOT documentation?"
    |                                                                                ^^^^^^^^^^^^^ E501
592 |             prompt += (
593 |                 "\n\nNote: The downloaded file may contain multiple versions of AOT for different GPUs, "
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:593:80: E501 Line too long (105 > 79)
    |
591 |             prompt += "\nDo you want to download the AOT version or open AOT documentation?"
592 |             prompt += (
593 |                 "\n\nNote: The downloaded file may contain multiple versions of AOT for different GPUs, "
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
594 |                 "please choose the correct version shown above."
595 |             )
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:598:80: E501 Line too long (83 > 79)
    |
596 |             m.setText(prompt)
597 |             download_button = m.addButton("Download", m.ButtonRole.ActionRole)
598 |             doc_button = m.addButton("Open documentation", m.ButtonRole.ActionRole)
    |                                                                                ^^^^ E501
599 |             close_button = m.addButton(m.StandardButton.Close)
600 |             m.setDefaultButton(doc_button)
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:619:80: E501 Line too long (114 > 79)
    |
617 |             for idx, i in enumerate(intel_gpus):
618 |                 prompt += "%d. %s (Version: %s)\n" % (idx + 1, i[0], i[1])
619 |             prompt += "\nDo you want to download the AOT version for one of these GPUs or open AOT documentation?"
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
620 |             m.setText(prompt)
621 |             download_buttons = []
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:624:80: E501 Line too long (107 > 79)
    |
622 |             for link, versions in intel_gpu_links.items():
623 |                 download_buttons.append(
624 |                     (link, m.addButton("Download for %s" % (", ".join(versions)), m.ButtonRole.ActionRole))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
625 |                 )
626 |             doc_button = m.addButton("Open documentation", m.ButtonRole.ActionRole)
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:626:80: E501 Line too long (83 > 79)
    |
624 |                     (link, m.addButton("Download for %s" % (", ".join(versions)), m.ButtonRole.ActionRole))
625 |                 )
626 |             doc_button = m.addButton("Open documentation", m.ButtonRole.ActionRole)
    |                                                                                ^^^^ E501
627 |             close_button = m.addButton(m.StandardButton.Close)
628 |             m.setDefaultButton(doc_button)
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:665:80: E501 Line too long (92 > 79)
    |
663 |         self.model_info.setMinimumHeight(160)
664 |         self.model_info.setWordWrap(True)
665 |         self.model_info.setAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignTop)
    |                                                                                ^^^^^^^^^^^^^ E501
666 |         self.model_info.setMinimumWidth(300)
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:707:16: PLW0602 Using global for `main_window` but no assignment is done
    |
705 |     @shared.thread_wrapper(daemon=True)
706 |     def loadModel(self):
707 |         global main_window
    |                ^^^^^^^^^^^ PLW0602
708 |
709 |         main_window.exec_in_main(lambda: self.setEnabled(False))
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:710:80: E501 Line too long (82 > 79)
    |
709 |         main_window.exec_in_main(lambda: self.setEnabled(False))
710 |         main_window.exec_in_main(lambda: self.advanced_settings.setEnabled(False))
    |                                                                                ^^^ E501
711 |
712 |         model_name = self.models[main_window.exec_in_main(lambda: self.select_combobox.currentIndex())]
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:712:59: PLW0108 Lambda may be unnecessary; consider inlining inner function
    |
710 |         main_window.exec_in_main(lambda: self.advanced_settings.setEnabled(False))
711 |
712 |         model_name = self.models[main_window.exec_in_main(lambda: self.select_combobox.currentIndex())]
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLW0108
713 |         model_repo = self.repos[main_window.exec_in_main(lambda: self.select_combobox.currentIndex())]
714 |         logging.info(
    |
    = help: Inline function call

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:712:80: E501 Line too long (103 > 79)
    |
710 |         main_window.exec_in_main(lambda: self.advanced_settings.setEnabled(False))
711 |
712 |         model_name = self.models[main_window.exec_in_main(lambda: self.select_combobox.currentIndex())]
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^ E501
713 |         model_repo = self.repos[main_window.exec_in_main(lambda: self.select_combobox.currentIndex())]
714 |         logging.info(
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:713:58: PLW0108 Lambda may be unnecessary; consider inlining inner function
    |
712 |         model_name = self.models[main_window.exec_in_main(lambda: self.select_combobox.currentIndex())]
713 |         model_repo = self.repos[main_window.exec_in_main(lambda: self.select_combobox.currentIndex())]
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLW0108
714 |         logging.info(
715 |             "Loading model %s from repo %s" % (model_name, model_repo if model_repo is not None else '"remote"')
    |
    = help: Inline function call

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:713:80: E501 Line too long (102 > 79)
    |
712 |         model_name = self.models[main_window.exec_in_main(lambda: self.select_combobox.currentIndex())]
713 |         model_repo = self.repos[main_window.exec_in_main(lambda: self.select_combobox.currentIndex())]
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^ E501
714 |         logging.info(
715 |             "Loading model %s from repo %s" % (model_name, model_repo if model_repo is not None else '"remote"')
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:715:80: E501 Line too long (112 > 79)
    |
713 |         model_repo = self.repos[main_window.exec_in_main(lambda: self.select_combobox.currentIndex())]
714 |         logging.info(
715 |             "Loading model %s from repo %s" % (model_name, model_repo if model_repo is not None else '"remote"')
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
716 |         )
717 |         main_window.setStatusText.emit("Loading model %s" % model_name)
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:726:80: E501 Line too long (101 > 79)
    |
724 |             case False:
725 |                 main_window.showError.emit(
726 |                     "Load model failed", "Failed to load model. Check log file for more information."
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^ E501
727 |                 )
728 |                 main_window.exec_in_main(lambda: self.setEnabled(True))
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:729:80: E501 Line too long (89 > 79)
    |
727 |                 )
728 |                 main_window.exec_in_main(lambda: self.setEnabled(True))
729 |                 main_window.exec_in_main(lambda: self.advanced_settings.setEnabled(True))
    |                                                                                ^^^^^^^^^^ E501
730 |                 return
731 |             case separator.ModelSourceNameUnsupportedError as e:
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:734:80: E501 Line too long (89 > 79)
    |
732 |                 main_window.showError.emit("Model not supported", str(e))
733 |                 main_window.exec_in_main(lambda: self.setEnabled(True))
734 |                 main_window.exec_in_main(lambda: self.advanced_settings.setEnabled(True))
    |                                                                                ^^^^^^^^^^ E501
735 |                 return
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:738:80: E501 Line too long (99 > 79)
    |
737 |         model_info = main_window.separator.modelInfo()
738 |         main_window.exec_in_main(lambda: main_window.model_selector.model_info.setText(model_info))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^ E501
739 |         main_window.exec_in_main(lambda: self.model_info.setMinimumHeight(self.model_info.heightForWidth(400)))
740 |         main_window.setStatusText.emit("Model loaded within %.4fs" % (end_time - start_time))
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:739:80: E501 Line too long (111 > 79)
    |
737 |         model_info = main_window.separator.modelInfo()
738 |         main_window.exec_in_main(lambda: main_window.model_selector.model_info.setText(model_info))
739 |         main_window.exec_in_main(lambda: self.model_info.setMinimumHeight(self.model_info.heightForWidth(400)))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
740 |         main_window.setStatusText.emit("Model loaded within %.4fs" % (end_time - start_time))
741 |         main_window.showParamSettings.emit()
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:740:80: E501 Line too long (93 > 79)
    |
738 |         main_window.exec_in_main(lambda: main_window.model_selector.model_info.setText(model_info))
739 |         main_window.exec_in_main(lambda: self.model_info.setMinimumHeight(self.model_info.heightForWidth(400)))
740 |         main_window.setStatusText.emit("Model loaded within %.4fs" % (end_time - start_time))
    |                                                                                ^^^^^^^^^^^^^^ E501
741 |         main_window.showParamSettings.emit()
742 |         logging.info("Model loaded within %.4fs" % (end_time - start_time))
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:756:80: E501 Line too long (100 > 79)
    |
755 |         self.info = QLabel()
756 |         self.info.setText("Additional model path:\nWill search for models apart from the defaults.")
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^ E501
757 |
758 |         self.path_list = QListWidget()
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:760:80: E501 Line too long (80 > 79)
    |
758 |         self.path_list = QListWidget()
759 |         self.path_list.setMinimumWidth(300)
760 |         self.path_list.addItems(list(set(shared.GetSetting("custom_repo", []))))
    |                                                                                ^ E501
761 |
762 |         self.new_path = QLineEdit()
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:798:80: E501 Line too long (114 > 79)
    |
796 |         shared.SetSetting(
797 |             "custom_repo",
798 |             list(set(shared.GetSetting("custom_repo", []) + [str(pathlib.Path(self.new_path.text()).resolve())])),
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
799 |         )
800 |         self.new_path.clear()
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:802:80: E501 Line too long (80 > 79)
    |
800 |         self.new_path.clear()
801 |         self.path_list.clear()
802 |         self.path_list.addItems(list(set(shared.GetSetting("custom_repo", []))))
    |                                                                                ^ E501
803 |         self.refresh_command()
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:809:80: E501 Line too long (119 > 79)
    |
807 |             return
808 |         shared.SetSetting(
809 |             "custom_repo", list(set(shared.GetSetting("custom_repo", [])) - {self.path_list.selectedItems()[0].text()})
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
810 |         )
811 |         self.path_list.clear()
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:812:80: E501 Line too long (80 > 79)
    |
810 |         )
811 |         self.path_list.clear()
812 |         self.path_list.addItems(list(set(shared.GetSetting("custom_repo", []))))
    |                                                                                ^ E501
813 |         self.refresh_command()
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:821:9: PLR0915 Too many statements (80 > 50)
    |
820 | class SepParamSettings(QGroupBox):
821 |     def __init__(self):
    |         ^^^^^^^^ PLR0915
822 |         global main_window
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:822:16: PLW0602 Using global for `main_window` but no assignment is done
    |
820 | class SepParamSettings(QGroupBox):
821 |     def __init__(self):
822 |         global main_window
    |                ^^^^^^^^^^^ PLW0602
823 |
824 |         super().__init__()
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:829:80: E501 Line too long (82 > 79)
    |
827 |         self.device_label = QLabel()
828 |         self.device_label.setText("Device:")
829 |         self.device_label.setToolTip("Device on which to execute the computation")
    |                                                                                ^^^ E501
830 |
831 |         self.device_selector = QComboBox()
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:834:80: E501 Line too long (116 > 79)
    |
832 |         for info, id_ in separator.getAvailableDevices():
833 |             self.device_selector.addItem(info, userData=id_)
834 |         self.device_selector.currentTextChanged.connect(lambda string: self.device_selector.setToolTip(str(string)))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
835 |         self.device_selector.setCurrentIndex(separator.default_device)
836 |         self.device_selector.setMinimumWidth(200)
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:843:80: E501 Line too long (110 > 79)
    |
842 |         self.segment_spinbox = QDoubleSpinBox()
843 |         self.segment_spinbox.setRange(0.1, math.floor(float(main_window.separator.default_segment) * 10) / 10)
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
844 |         self.segment_spinbox.setSingleStep(0.1)
845 |         self.segment_spinbox.setValue(self.segment_spinbox.maximum())
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:851:80: E501 Line too long (88 > 79)
    |
849 |         self.segment_slider = QSlider()
850 |         self.segment_slider.setOrientation(Qt.Orientation.Horizontal)
851 |         self.segment_slider.setRange(1, int(main_window.separator.default_segment * 10))
    |                                                                                ^^^^^^^^^ E501
852 |         self.segment_slider.setValue(self.segment_slider.maximum())
853 |         self.segment_slider.valueChanged.connect(lambda value: self.segment_spinbox.setValue(value / 10))
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:853:80: E501 Line too long (105 > 79)
    |
851 |         self.segment_slider.setRange(1, int(main_window.separator.default_segment * 10))
852 |         self.segment_slider.setValue(self.segment_slider.maximum())
853 |         self.segment_slider.valueChanged.connect(lambda value: self.segment_spinbox.setValue(value / 10))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
854 |         self.segment_spinbox.valueChanged.connect(lambda value: self.segment_slider.setValue(int(value * 10)))
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:854:80: E501 Line too long (110 > 79)
    |
852 |         self.segment_slider.setValue(self.segment_slider.maximum())
853 |         self.segment_slider.valueChanged.connect(lambda value: self.segment_spinbox.setValue(value / 10))
854 |         self.segment_spinbox.valueChanged.connect(lambda value: self.segment_slider.setValue(int(value * 10)))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
855 |
856 |         self.overlap_label = QLabel()
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:870:80: E501 Line too long (106 > 79)
    |
868 |         self.overlap_slider.setRange(0, 99)
869 |         self.overlap_slider.setValue(25)
870 |         self.overlap_slider.valueChanged.connect(lambda value: self.overlap_spinbox.setValue(value / 100))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
871 |         self.overlap_spinbox.valueChanged.connect(lambda value: self.overlap_slider.setValue(int(value * 100)))
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:871:80: E501 Line too long (111 > 79)
    |
869 |         self.overlap_slider.setValue(25)
870 |         self.overlap_slider.valueChanged.connect(lambda value: self.overlap_spinbox.setValue(value / 100))
871 |         self.overlap_spinbox.valueChanged.connect(lambda value: self.overlap_slider.setValue(int(value * 100)))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
872 |
873 |         self.shifts_label = QLabel()
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:889:49: PLW0108 Lambda may be unnecessary; consider inlining inner function
    |
887 |         self.shifts_slider.setRange(0, 20)
888 |         self.shifts_slider.setValue(0)
889 |         self.shifts_slider.valueChanged.connect(lambda value: self.shifts_spinbox.setValue(value))
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLW0108
890 |         self.shifts_spinbox.valueChanged.connect(lambda value: self.shifts_slider.setValue(value))
    |
    = help: Inline function call

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:889:80: E501 Line too long (98 > 79)
    |
887 |         self.shifts_slider.setRange(0, 20)
888 |         self.shifts_slider.setValue(0)
889 |         self.shifts_slider.valueChanged.connect(lambda value: self.shifts_spinbox.setValue(value))
    |                                                                                ^^^^^^^^^^^^^^^^^^^ E501
890 |         self.shifts_spinbox.valueChanged.connect(lambda value: self.shifts_slider.setValue(value))
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:890:50: PLW0108 Lambda may be unnecessary; consider inlining inner function
    |
888 |         self.shifts_slider.setValue(0)
889 |         self.shifts_slider.valueChanged.connect(lambda value: self.shifts_spinbox.setValue(value))
890 |         self.shifts_spinbox.valueChanged.connect(lambda value: self.shifts_slider.setValue(value))
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLW0108
891 |
892 |         self.default_button = QPushButton()
    |
    = help: Inline function call

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:890:80: E501 Line too long (98 > 79)
    |
888 |         self.shifts_slider.setValue(0)
889 |         self.shifts_slider.valueChanged.connect(lambda value: self.shifts_spinbox.setValue(value))
890 |         self.shifts_spinbox.valueChanged.connect(lambda value: self.shifts_slider.setValue(value))
    |                                                                                ^^^^^^^^^^^^^^^^^^^ E501
891 |
892 |         self.default_button = QPushButton()
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:895:80: E501 Line too long (104 > 79)
    |
893 |         self.default_button.setText("Restore defaults")
894 |         self.default_button.clicked.connect(self.restoreDefaults)
895 |         self.default_button.setSizePolicy(QSizePolicy.Policy.MinimumExpanding, QSizePolicy.Policy.Fixed)
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^ E501
896 |
897 |         self.separate_once_added = QCheckBox()
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:899:80: E501 Line too long (94 > 79)
    |
897 |         self.separate_once_added = QCheckBox()
898 |         self.separate_once_added.setText("Separate once added")
899 |         self.separate_once_added.setToolTip("Separate the file once it is added to the queue")
    |                                                                                ^^^^^^^^^^^^^^^ E501
900 |         self.separate_once_added.setChecked(shared.GetHistory("separate_once_added", default=False))
901 |         self.separate_once_added.stateChanged.connect(lambda x: shared.SetHistory("separate_once_added", value=x))
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:900:80: E501 Line too long (100 > 79)
    |
898 |         self.separate_once_added.setText("Separate once added")
899 |         self.separate_once_added.setToolTip("Separate the file once it is added to the queue")
900 |         self.separate_once_added.setChecked(shared.GetHistory("separate_once_added", default=False))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^ E501
901 |         self.separate_once_added.stateChanged.connect(lambda x: shared.SetHistory("separate_once_added", value=x))
902 |         self.separate_once_added.setSizePolicy(QSizePolicy.Policy.MinimumExpanding, QSizePolicy.Policy.Fixed)
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:901:80: E501 Line too long (114 > 79)
    |
899 |         self.separate_once_added.setToolTip("Separate the file once it is added to the queue")
900 |         self.separate_once_added.setChecked(shared.GetHistory("separate_once_added", default=False))
901 |         self.separate_once_added.stateChanged.connect(lambda x: shared.SetHistory("separate_once_added", value=x))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
902 |         self.separate_once_added.setSizePolicy(QSizePolicy.Policy.MinimumExpanding, QSizePolicy.Policy.Fixed)
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:902:80: E501 Line too long (109 > 79)
    |
900 |         self.separate_once_added.setChecked(shared.GetHistory("separate_once_added", default=False))
901 |         self.separate_once_added.stateChanged.connect(lambda x: shared.SetHistory("separate_once_added", value=x))
902 |         self.separate_once_added.setSizePolicy(QSizePolicy.Policy.MinimumExpanding, QSizePolicy.Policy.Fixed)
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
903 |
904 |         self.check_layout = QHBoxLayout()
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:927:80: E501 Line too long (85 > 79)
    |
925 |         self.device_selector.setCurrentIndex(separator.default_device)
926 |         self.segment_spinbox.setValue(float(main_window.separator.default_segment))
927 |         self.segment_slider.setValue(int(main_window.separator.default_segment * 10))
    |                                                                                ^^^^^^ E501
928 |         self.overlap_spinbox.setValue(0.25)
929 |         self.overlap_slider.setValue(25)
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:938:9: PLR0915 Too many statements (168 > 50)
    |
936 |     ChangeParamEvent = threading.Event()
937 |
938 |     def __init__(self):
    |         ^^^^^^^^ PLR0915
939 |         global main_window
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:939:16: PLW0602 Using global for `main_window` but no assignment is done
    |
938 |     def __init__(self):
939 |         global main_window
    |                ^^^^^^^^^^^ PLW0602
940 |
941 |         super().__init__()
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:949:80: E501 Line too long (93 > 79)
    |
947 |         self.location_help.setText("Syntax help")
948 |         self.location_help.clicked.connect(
949 |             lambda: main_window.showInfo.emit("Save location syntax", shared.save_loc_syntax)
    |                                                                                ^^^^^^^^^^^^^^ E501
950 |         )
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:959:80: E501 Line too long (105 > 79)
    |
957 |         self.location_group.addButton(self.loc_relative_path_button, 0)
958 |         self.location_group.addButton(self.loc_absolute_path_button, 1)
959 |         self.location_group.idClicked.connect(lambda x: shared.SetHistory("save_location_type", value=x))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
960 |         if shared.GetHistory("save_location_type", default=0) == 0:
961 |             self.loc_relative_path_button.setChecked(True)
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:968:80: E501 Line too long (118 > 79)
    |
966 |         self.loc_input.setEditable(True)
967 |         locations = list(
968 |             shared.GetHistory("save_location", default="separated/{model}/{track}/{stem}.{ext}", use_ordered_set=True)
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
969 |         )
970 |         if "separated/{model}/{track}/{stem}.{ext}" not in locations:
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:978:80: E501 Line too long (114 > 79)
    |
976 |         self.browse_button.clicked.connect(self.browseLocation)
977 |         self.browse_button.setEnabled(self.location_group.checkedId() == 1)
978 |         self.location_group.idToggled.connect(lambda Id, checked: self.browse_button.setEnabled(not Id ^ checked))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
979 |
980 |         self.clip_mode_label = QLabel()
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:985:80: E501 Line too long (88 > 79)
    |
983 |         self.clip_mode = QComboBox()
984 |         self.clip_mode.addItems(["rescale", "clamp", "tanh", "none"])
985 |         self.clip_mode.setCurrentText(shared.GetHistory("clip_mode", default="rescale"))
    |                                                                                ^^^^^^^^^ E501
986 |         self.clip_mode.currentTextChanged.connect(lambda x: shared.SetHistory("clip_mode", value=x))
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:986:80: E501 Line too long (100 > 79)
    |
984 |         self.clip_mode.addItems(["rescale", "clamp", "tanh", "none"])
985 |         self.clip_mode.setCurrentText(shared.GetHistory("clip_mode", default="rescale"))
986 |         self.clip_mode.currentTextChanged.connect(lambda x: shared.SetHistory("clip_mode", value=x))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^ E501
987 |
988 |         self.encoder_selector_label = QLabel()
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:990:80: E501 Line too long (96 > 79)
    |
988 |         self.encoder_selector_label = QLabel()
989 |         self.encoder_selector_label.setText("Encoder:")
990 |         self.encoder_selector_label.setToolTip("Select the encoder to use for saving the files")
    |                                                                                ^^^^^^^^^^^^^^^^^ E501
991 |
992 |         self.encoder_group = QButtonGroup()
    |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1000:80: E501 Line too long (91 > 79)
     |
 998 |         self.encoder_group.addButton(self.encoder_selector_ffmpeg, 1)
 999 |         self.encoder_group.idClicked.connect(self.switchEncoder)
1000 |         self.encoder_group.button(shared.GetHistory("encoder", default=0)).setChecked(True)
     |                                                                                ^^^^^^^^^^^^ E501
1001 |
1002 |         self.encoder_sndfile_box = QWidget()
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1017:80: E501 Line too long (89 > 79)
     |
1015 |         self.file_format = QComboBox()
1016 |         self.file_format.addItems(["wav", "flac"])
1017 |         self.file_format.setCurrentText(shared.GetHistory("file_format", default="flac"))
     |                                                                                ^^^^^^^^^^ E501
1018 |         self.file_format.currentTextChanged.connect(lambda x: shared.SetHistory("file_format", value=x))
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1018:80: E501 Line too long (104 > 79)
     |
1016 |         self.file_format.addItems(["wav", "flac"])
1017 |         self.file_format.setCurrentText(shared.GetHistory("file_format", default="flac"))
1018 |         self.file_format.currentTextChanged.connect(lambda x: shared.SetHistory("file_format", value=x))
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1019 |
1020 |         self.sample_fmt_label = QLabel()
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1027:80: E501 Line too long (88 > 79)
     |
1025 |         self.sample_fmt.addItem("int24", "PCM_24")
1026 |         self.sample_fmt.addItem("float32", "FLOAT")
1027 |         self.sample_fmt.setCurrentText(shared.GetHistory("sample_fmt", default="int16"))
     |                                                                                ^^^^^^^^^ E501
1028 |         self.sample_fmt.currentTextChanged.connect(lambda x: shared.SetHistory("sample_fmt", value=x))
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1028:80: E501 Line too long (102 > 79)
     |
1026 |         self.sample_fmt.addItem("float32", "FLOAT")
1027 |         self.sample_fmt.setCurrentText(shared.GetHistory("sample_fmt", default="int16"))
1028 |         self.sample_fmt.currentTextChanged.connect(lambda x: shared.SetHistory("sample_fmt", value=x))
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^ E501
1029 |
1030 |         self.preset_selector_label = QLabel()
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1032:80: E501 Line too long (97 > 79)
     |
1030 |         self.preset_selector_label = QLabel()
1031 |         self.preset_selector_label.setText("Preset:")
1032 |         self.preset_selector_label.setToolTip("Select the command line preset to use for ffmpeg")
     |                                                                                ^^^^^^^^^^^^^^^^^^ E501
1033 |
1034 |         self.preset_selector = QComboBox()
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1035:80: E501 Line too long (98 > 79)
     |
1034 |         self.preset_selector = QComboBox()
1035 |         self.preset_selector.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
     |                                                                                ^^^^^^^^^^^^^^^^^^^ E501
1036 |         self.loadPresets()
1037 |         self.preset_selector.setCurrentText(shared.GetHistory("ffmpeg_default_preset", default="MP3"))
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1037:80: E501 Line too long (102 > 79)
     |
1035 |         self.preset_selector.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
1036 |         self.loadPresets()
1037 |         self.preset_selector.setCurrentText(shared.GetHistory("ffmpeg_default_preset", default="MP3"))
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^ E501
1038 |         self.ignore_preset_change = False
1039 |         self.preset_selector.currentIndexChanged.connect(self.switchFFmpegPreset)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1043:80: E501 Line too long (89 > 79)
     |
1041 |         self.file_extension_label = QLabel()
1042 |         self.file_extension_label.setText("File extension:")
1043 |         self.file_extension_label.setToolTip("File extension to use for the saved files")
     |                                                                                ^^^^^^^^^^ E501
1044 |
1045 |         self.file_extension = QLineEdit()
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1056:80: E501 Line too long (96 > 79)
     |
1054 |         self.command.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAlwaysOff)
1055 |         self.command.setWordWrapMode(QtGui.QTextOption.WrapMode.WrapAtWordBoundaryOrAnywhere)
1056 |         self.command_label.setContentsMargins(0, self.command.document().documentMargin(), 0, 0)
     |                                                                                ^^^^^^^^^^^^^^^^^ E501
1057 |
1058 |         self.command_help_button = QPushButton()
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1061:80: E501 Line too long (91 > 79)
     |
1059 |         self.command_help_button.setText("Help")
1060 |         self.command_help_button.clicked.connect(
1061 |             lambda: main_window.showInfo.emit("Command syntax help", shared.command_syntax)
     |                                                                                ^^^^^^^^^^^^ E501
1062 |         )
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1080:80: E501 Line too long (96 > 79)
     |
1078 |         self.parsed_command = TextWrappedQLabel()
1079 |         self.parsed_command.setWordWrap(True)
1080 |         self.parsed_command.setAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignTop)
     |                                                                                ^^^^^^^^^^^^^^^^^ E501
1081 |         self.parsed_command.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1081:80: E501 Line too long (99 > 79)
     |
1079 |         self.parsed_command.setWordWrap(True)
1080 |         self.parsed_command.setAlignment(Qt.AlignmentFlag.AlignLeft | Qt.AlignmentFlag.AlignTop)
1081 |         self.parsed_command.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum)
     |                                                                                ^^^^^^^^^^^^^^^^^^^^ E501
1082 |
1083 |         self.retry_on_error = QCheckBox()
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1089:80: E501 Line too long (90 > 79)
     |
1087 |             "Separation will be paused when waiting for your input."
1088 |         )
1089 |         self.retry_on_error.setChecked(shared.GetHistory("retry_on_error", default=False))
     |                                                                                ^^^^^^^^^^^ E501
1090 |         self.retry_on_error.stateChanged.connect(lambda x: shared.SetHistory("retry_on_error", value=x))
1091 |         self.retry_on_error.setSizePolicy(QSizePolicy.Policy.MinimumExpanding, QSizePolicy.Policy.Fixed)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1090:80: E501 Line too long (104 > 79)
     |
1088 |         )
1089 |         self.retry_on_error.setChecked(shared.GetHistory("retry_on_error", default=False))
1090 |         self.retry_on_error.stateChanged.connect(lambda x: shared.SetHistory("retry_on_error", value=x))
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1091 |         self.retry_on_error.setSizePolicy(QSizePolicy.Policy.MinimumExpanding, QSizePolicy.Policy.Fixed)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1091:80: E501 Line too long (104 > 79)
     |
1089 |         self.retry_on_error.setChecked(shared.GetHistory("retry_on_error", default=False))
1090 |         self.retry_on_error.stateChanged.connect(lambda x: shared.SetHistory("retry_on_error", value=x))
1091 |         self.retry_on_error.setSizePolicy(QSizePolicy.Policy.MinimumExpanding, QSizePolicy.Policy.Fixed)
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1092 |
1093 |         self.retry_button = QPushButton()
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1115:80: E501 Line too long (81 > 79)
     |
1113 |         self.widget_layout.addWidget(self.clip_mode_label, 4, 0, 1, 2)
1114 |         self.widget_layout.addWidget(self.clip_mode, 4, 2)
1115 |         self.encoder_sndfile_layout.addWidget(self.file_format_label, 0, 0, 1, 2)
     |                                                                                ^^ E501
1116 |         self.encoder_sndfile_layout.addWidget(self.file_format, 0, 2)
1117 |         self.encoder_sndfile_layout.addWidget(self.sample_fmt_label, 1, 0, 1, 2)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1117:80: E501 Line too long (80 > 79)
     |
1115 |         self.encoder_sndfile_layout.addWidget(self.file_format_label, 0, 0, 1, 2)
1116 |         self.encoder_sndfile_layout.addWidget(self.file_format, 0, 2)
1117 |         self.encoder_sndfile_layout.addWidget(self.sample_fmt_label, 1, 0, 1, 2)
     |                                                                                ^ E501
1118 |         self.encoder_sndfile_layout.addWidget(self.sample_fmt, 1, 2)
1119 |         self.encoder_ffmpeg_layout.addWidget(self.preset_selector_label, 0, 0)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1123:80: E501 Line too long (97 > 79)
     |
1121 |         self.encoder_ffmpeg_layout.addWidget(self.file_extension_label, 0, 2)
1122 |         self.encoder_ffmpeg_layout.addWidget(self.file_extension, 0, 3)
1123 |         self.encoder_ffmpeg_layout.addWidget(self.command_label, 1, 0, Qt.AlignmentFlag.AlignTop)
     |                                                                                ^^^^^^^^^^^^^^^^^^ E501
1124 |         self.encoder_ffmpeg_layout.addWidget(self.command, 1, 1, 1, 3)
1125 |         self.encoder_ffmpeg_buttons_layout.addWidget(self.command_help_button)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1129:80: E501 Line too long (92 > 79)
     |
1127 |         self.encoder_ffmpeg_buttons_layout.addWidget(self.remove_preset_button)
1128 |         self.encoder_ffmpeg_buttons_layout.addWidget(self.set_default_button)
1129 |         self.encoder_ffmpeg_layout.addLayout(self.encoder_ffmpeg_buttons_layout, 2, 0, 1, 4)
     |                                                                                ^^^^^^^^^^^^^ E501
1130 |         self.encoder_ffmpeg_layout.addWidget(self.parsed_command, 3, 0, 1, 4)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1152:80: E501 Line too long (80 > 79)
     |
1151 |     def browseLocation(self):
1152 |         p = QFileDialog.getExistingDirectory(self, "Browse saved file location")
     |                                                                                ^ E501
1153 |         if p:
1154 |             self.loc_input.setCurrentText(p)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1162:80: E501 Line too long (82 > 79)
     |
1160 |         match Id:
1161 |             case 0:
1162 |                 self.widget_layout.addWidget(self.encoder_sndfile_box, 6, 0, 1, 3)
     |                                                                                ^^^ E501
1163 |                 self.encoder_sndfile_box.show()
1164 |             case 1:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1165:80: E501 Line too long (81 > 79)
     |
1163 |                 self.encoder_sndfile_box.show()
1164 |             case 1:
1165 |                 self.widget_layout.addWidget(self.encoder_ffmpeg_box, 6, 0, 1, 3)
     |                                                                                ^^ E501
1166 |                 self.encoder_ffmpeg_box.show()
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1169:9: PLR0913 Too many arguments in function definition (7 > 5)
     |
1168 |     @shared.thread_wrapper(daemon=True)
1169 |     def save(
     |         ^^^^ PLR0913
1170 |         self, file: pathlib.Path | shared.URL_with_filename, origin, tensor, tags, save_func, item, finishCallback
1171 |     ):
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1169:9: PLR0917 Too many positional arguments (7/5)
     |
1168 |     @shared.thread_wrapper(daemon=True)
1169 |     def save(
     |         ^^^^ PLR0917
1170 |         self, file: pathlib.Path | shared.URL_with_filename, origin, tensor, tags, save_func, item, finishCallback
1171 |     ):
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1169:9: PLR0912 Too many branches (32 > 12)
     |
1168 |     @shared.thread_wrapper(daemon=True)
1169 |     def save(
     |         ^^^^ PLR0912
1170 |         self, file: pathlib.Path | shared.URL_with_filename, origin, tensor, tags, save_func, item, finishCallback
1171 |     ):
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1169:9: PLR0915 Too many statements (89 > 50)
     |
1168 |     @shared.thread_wrapper(daemon=True)
1169 |     def save(
     |         ^^^^ PLR0915
1170 |         self, file: pathlib.Path | shared.URL_with_filename, origin, tensor, tags, save_func, item, finishCallback
1171 |     ):
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1170:80: E501 Line too long (114 > 79)
     |
1168 |     @shared.thread_wrapper(daemon=True)
1169 |     def save(
1170 |         self, file: pathlib.Path | shared.URL_with_filename, origin, tensor, tags, save_func, item, finishCallback
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1171 |     ):
1172 |         global main_window
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1172:16: PLW0602 Using global for `main_window` but no assignment is done
     |
1170 |         self, file: pathlib.Path | shared.URL_with_filename, origin, tensor, tags, save_func, item, finishCallback
1171 |     ):
1172 |         global main_window
     |                ^^^^^^^^^^^ PLW0602
1173 |         self.saving += 1
1174 |         finishCallback(shared.FileStatus.Writing, item)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1175:9: PLR1702 Too many nested blocks (6 > 5)
     |
1173 |           self.saving += 1
1174 |           finishCallback(shared.FileStatus.Writing, item)
1175 | /         with self.SaveLock:
1176 | |             shared.AddHistory("save_location", value=self.loc_input.currentText())
1177 | |             while True:
1178 | |                 main_window.mixer.setEnabled(False)
1179 | |                 self.retry_button.setEnabled(False)
1180 | |                 ret = None
1181 | |                 for stem, stem_data in main_window.mixer.mix(origin, tensor):
1182 | |                     try:
1183 | |                         if separator.np.isnan(stem_data).any() or separator.np.isinf(stem_data).any():
1184 | |                             logging.warning("NaN or inf found in stem %s" % stem)
1185 | |                         match self.encoder_group.checkedId():
1186 | |                             case 0:
1187 | |                                 file_ext = self.file_format.currentText()
1188 | |                             case 1:
1189 | |                                 tags_avoid_conflict = tags.copy()
1190 | |                                 for i in ["input", "inputext", "inputpath"]:
1191 | |                                     if i in tags_avoid_conflict:
1192 | |                                         tags_avoid_conflict.pop(i)
1193 | |                                 file_ext = self.file_extension.text().format(
1194 | |                                     input=file.stem,
1195 | |                                     inputext=file.suffix[1:],
1196 | |                                     inputpath=str(file.parent),
1197 | |                                     **tags_avoid_conflict,
1198 | |                                 )
1199 | |                             case _:
1200 | |                                 file_ext = "wav"
1201 | |                         parents = [file.name]
1202 | |                         parent = file
1203 | |                         while parent.parent != parent and len(parents) < 16:
1204 | |                             parent = parent.parent
1205 | |                             parents.append(parent.name)
1206 | |                         if len(parents) < 16:
1207 | |                             parents += [""] * (16 - len(parents))
1208 | |                         tags_avoid_conflict = tags.copy()
1209 | |                         for i in ["track", "trackext", "stem", "ext", "model", "host"]:
1210 | |                             if i in tags_avoid_conflict:
1211 | |                                 tags_avoid_conflict[f"{i}_"] = tags_avoid_conflict.pop(i)
1212 | |                         file_path_str = self.loc_input.currentText().format(
1213 | |                             *parents,
1214 | |                             track=file.stem,
1215 | |                             trackext=file.name,
1216 | |                             stem=stem,
1217 | |                             ext=file_ext,
1218 | |                             model=main_window.model_selector.select_combobox.currentText(),
1219 | |                             host=file["host"] if isinstance(file, shared.URL_with_filename) else "localfile",
1220 | |                             **tags_avoid_conflict,
1221 | |                         )
1222 | |                         match self.location_group.checkedId():
1223 | |                             case 0:
1224 | |                                 file_path = file.parent / file_path_str
1225 | |                             case 1:
1226 | |                                 file_path = pathlib.Path(file_path_str)
1227 | |                         match self.clip_mode.currentText():
1228 | |                             case "rescale":
1229 | |                                 if (peak := stem_data.abs().max()) > 0.999:
1230 | |                                     data = stem_data / peak * 0.999
1231 | |                                 else:
1232 | |                                     data = stem_data
1233 | |                             case "clamp":
1234 | |                                 data = stem_data.clamp(-0.999, 0.999)
1235 | |                             case "tanh":
1236 | |                                 data = stem_data.tanh()
1237 | |                             case "none":
1238 | |                                 data = stem_data
1239 | |                     except Exception:
1240 | |                         logging.error("Failed to prepare data for saving:\n%s" % traceback.format_exc())
1241 | |                         ret = traceback.format_exc()
1242 | |                         break
1243 | |                     try:
1244 | |                         file_path.parent.mkdir(parents=True, exist_ok=True)
1245 | |                         match self.encoder_group.checkedId():
1246 | |                             case 0:
1247 | |                                 ret = save_func(file_path, data, self.sample_fmt.currentData(), encoder="sndfile")
1248 | |                             case 1:
1249 | |                                 tags_avoid_conflict = tags.copy()
1250 | |                                 for i in ["input", "inputext", "inputpath", "output"]:
1251 | |                                     if i in tags_avoid_conflict:
1252 | |                                         tags_avoid_conflict.pop(i)
1253 | |                                 command = [
1254 | |                                     i.format(
1255 | |                                         input=file.stem,
1256 | |                                         inputext=file.suffix[1:],
1257 | |                                         inputpath=str(file.parent),
1258 | |                                         output=str(file_path),
1259 | |                                         **tags_avoid_conflict,
1260 | |                                     )
1261 | |                                     for i in shared.try_parse_cmd(self.command.text())
1262 | |                                 ]
1263 | |                                 logging.info("Saving file %s with command %s" % (file_path, command))
1264 | |                                 ret = save_func(command, data, encoder="ffmpeg")
1265 | |                     except Exception:
1266 | |                         logging.error("Failed to save file %s:\n%s" % (file_path, traceback.format_exc()))
1267 | |                         ret = traceback.format_exc()
1268 | |                     if ret is not None:
1269 | |                         break
1270 | |                 main_window.mixer.setEnabled(True)
1271 | |                 if ret is None:
1272 | |                     break
1273 | |                 if self.retry_on_error.isChecked():
1274 | |                     if (
1275 | |                         main_window.exec_in_main(
1276 | |                             lambda: main_window.m.question(
1277 | |                                 main_window,
1278 | |                                 "Retry saving",
1279 | |                                 "Saving failed. Do you want to retry? You can change some options before retrying."
1280 | |                                 "\n\nError message:\n%s" % str(ret),
1281 | |                                 main_window.m.StandardButton.Yes,
1282 | |                                 main_window.m.StandardButton.No,
1283 | |                             )
1284 | |                         )
1285 | |                         == main_window.m.StandardButton.No
1286 | |                     ):
1287 | |                         break
1288 | |                 ret = None
1289 | |                 self.ChangeParamEvent.clear()
1290 | |                 main_window.setStatusText.emit("Waiting for your input...")
1291 | |                 self.lockOther()
1292 | |                 self.retry_button.setEnabled(True)
1293 | |                 self.ChangeParamEvent.wait()
1294 | |                 self.unlockOther()
1295 | |             self.saving -= 1
     | |____________________________^ PLR1702
1296 |           if ret is None:
1297 |               finishCallback(shared.FileStatus.Finished, item)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1175:9: PLR1702 Too many nested blocks (6 > 5)
     |
1173 |           self.saving += 1
1174 |           finishCallback(shared.FileStatus.Writing, item)
1175 | /         with self.SaveLock:
1176 | |             shared.AddHistory("save_location", value=self.loc_input.currentText())
1177 | |             while True:
1178 | |                 main_window.mixer.setEnabled(False)
1179 | |                 self.retry_button.setEnabled(False)
1180 | |                 ret = None
1181 | |                 for stem, stem_data in main_window.mixer.mix(origin, tensor):
1182 | |                     try:
1183 | |                         if separator.np.isnan(stem_data).any() or separator.np.isinf(stem_data).any():
1184 | |                             logging.warning("NaN or inf found in stem %s" % stem)
1185 | |                         match self.encoder_group.checkedId():
1186 | |                             case 0:
1187 | |                                 file_ext = self.file_format.currentText()
1188 | |                             case 1:
1189 | |                                 tags_avoid_conflict = tags.copy()
1190 | |                                 for i in ["input", "inputext", "inputpath"]:
1191 | |                                     if i in tags_avoid_conflict:
1192 | |                                         tags_avoid_conflict.pop(i)
1193 | |                                 file_ext = self.file_extension.text().format(
1194 | |                                     input=file.stem,
1195 | |                                     inputext=file.suffix[1:],
1196 | |                                     inputpath=str(file.parent),
1197 | |                                     **tags_avoid_conflict,
1198 | |                                 )
1199 | |                             case _:
1200 | |                                 file_ext = "wav"
1201 | |                         parents = [file.name]
1202 | |                         parent = file
1203 | |                         while parent.parent != parent and len(parents) < 16:
1204 | |                             parent = parent.parent
1205 | |                             parents.append(parent.name)
1206 | |                         if len(parents) < 16:
1207 | |                             parents += [""] * (16 - len(parents))
1208 | |                         tags_avoid_conflict = tags.copy()
1209 | |                         for i in ["track", "trackext", "stem", "ext", "model", "host"]:
1210 | |                             if i in tags_avoid_conflict:
1211 | |                                 tags_avoid_conflict[f"{i}_"] = tags_avoid_conflict.pop(i)
1212 | |                         file_path_str = self.loc_input.currentText().format(
1213 | |                             *parents,
1214 | |                             track=file.stem,
1215 | |                             trackext=file.name,
1216 | |                             stem=stem,
1217 | |                             ext=file_ext,
1218 | |                             model=main_window.model_selector.select_combobox.currentText(),
1219 | |                             host=file["host"] if isinstance(file, shared.URL_with_filename) else "localfile",
1220 | |                             **tags_avoid_conflict,
1221 | |                         )
1222 | |                         match self.location_group.checkedId():
1223 | |                             case 0:
1224 | |                                 file_path = file.parent / file_path_str
1225 | |                             case 1:
1226 | |                                 file_path = pathlib.Path(file_path_str)
1227 | |                         match self.clip_mode.currentText():
1228 | |                             case "rescale":
1229 | |                                 if (peak := stem_data.abs().max()) > 0.999:
1230 | |                                     data = stem_data / peak * 0.999
1231 | |                                 else:
1232 | |                                     data = stem_data
1233 | |                             case "clamp":
1234 | |                                 data = stem_data.clamp(-0.999, 0.999)
1235 | |                             case "tanh":
1236 | |                                 data = stem_data.tanh()
1237 | |                             case "none":
1238 | |                                 data = stem_data
1239 | |                     except Exception:
1240 | |                         logging.error("Failed to prepare data for saving:\n%s" % traceback.format_exc())
1241 | |                         ret = traceback.format_exc()
1242 | |                         break
1243 | |                     try:
1244 | |                         file_path.parent.mkdir(parents=True, exist_ok=True)
1245 | |                         match self.encoder_group.checkedId():
1246 | |                             case 0:
1247 | |                                 ret = save_func(file_path, data, self.sample_fmt.currentData(), encoder="sndfile")
1248 | |                             case 1:
1249 | |                                 tags_avoid_conflict = tags.copy()
1250 | |                                 for i in ["input", "inputext", "inputpath", "output"]:
1251 | |                                     if i in tags_avoid_conflict:
1252 | |                                         tags_avoid_conflict.pop(i)
1253 | |                                 command = [
1254 | |                                     i.format(
1255 | |                                         input=file.stem,
1256 | |                                         inputext=file.suffix[1:],
1257 | |                                         inputpath=str(file.parent),
1258 | |                                         output=str(file_path),
1259 | |                                         **tags_avoid_conflict,
1260 | |                                     )
1261 | |                                     for i in shared.try_parse_cmd(self.command.text())
1262 | |                                 ]
1263 | |                                 logging.info("Saving file %s with command %s" % (file_path, command))
1264 | |                                 ret = save_func(command, data, encoder="ffmpeg")
1265 | |                     except Exception:
1266 | |                         logging.error("Failed to save file %s:\n%s" % (file_path, traceback.format_exc()))
1267 | |                         ret = traceback.format_exc()
1268 | |                     if ret is not None:
1269 | |                         break
1270 | |                 main_window.mixer.setEnabled(True)
1271 | |                 if ret is None:
1272 | |                     break
1273 | |                 if self.retry_on_error.isChecked():
1274 | |                     if (
1275 | |                         main_window.exec_in_main(
1276 | |                             lambda: main_window.m.question(
1277 | |                                 main_window,
1278 | |                                 "Retry saving",
1279 | |                                 "Saving failed. Do you want to retry? You can change some options before retrying."
1280 | |                                 "\n\nError message:\n%s" % str(ret),
1281 | |                                 main_window.m.StandardButton.Yes,
1282 | |                                 main_window.m.StandardButton.No,
1283 | |                             )
1284 | |                         )
1285 | |                         == main_window.m.StandardButton.No
1286 | |                     ):
1287 | |                         break
1288 | |                 ret = None
1289 | |                 self.ChangeParamEvent.clear()
1290 | |                 main_window.setStatusText.emit("Waiting for your input...")
1291 | |                 self.lockOther()
1292 | |                 self.retry_button.setEnabled(True)
1293 | |                 self.ChangeParamEvent.wait()
1294 | |                 self.unlockOther()
1295 | |             self.saving -= 1
     | |____________________________^ PLR1702
1296 |           if ret is None:
1297 |               finishCallback(shared.FileStatus.Finished, item)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1175:9: PLR1702 Too many nested blocks (6 > 5)
     |
1173 |           self.saving += 1
1174 |           finishCallback(shared.FileStatus.Writing, item)
1175 | /         with self.SaveLock:
1176 | |             shared.AddHistory("save_location", value=self.loc_input.currentText())
1177 | |             while True:
1178 | |                 main_window.mixer.setEnabled(False)
1179 | |                 self.retry_button.setEnabled(False)
1180 | |                 ret = None
1181 | |                 for stem, stem_data in main_window.mixer.mix(origin, tensor):
1182 | |                     try:
1183 | |                         if separator.np.isnan(stem_data).any() or separator.np.isinf(stem_data).any():
1184 | |                             logging.warning("NaN or inf found in stem %s" % stem)
1185 | |                         match self.encoder_group.checkedId():
1186 | |                             case 0:
1187 | |                                 file_ext = self.file_format.currentText()
1188 | |                             case 1:
1189 | |                                 tags_avoid_conflict = tags.copy()
1190 | |                                 for i in ["input", "inputext", "inputpath"]:
1191 | |                                     if i in tags_avoid_conflict:
1192 | |                                         tags_avoid_conflict.pop(i)
1193 | |                                 file_ext = self.file_extension.text().format(
1194 | |                                     input=file.stem,
1195 | |                                     inputext=file.suffix[1:],
1196 | |                                     inputpath=str(file.parent),
1197 | |                                     **tags_avoid_conflict,
1198 | |                                 )
1199 | |                             case _:
1200 | |                                 file_ext = "wav"
1201 | |                         parents = [file.name]
1202 | |                         parent = file
1203 | |                         while parent.parent != parent and len(parents) < 16:
1204 | |                             parent = parent.parent
1205 | |                             parents.append(parent.name)
1206 | |                         if len(parents) < 16:
1207 | |                             parents += [""] * (16 - len(parents))
1208 | |                         tags_avoid_conflict = tags.copy()
1209 | |                         for i in ["track", "trackext", "stem", "ext", "model", "host"]:
1210 | |                             if i in tags_avoid_conflict:
1211 | |                                 tags_avoid_conflict[f"{i}_"] = tags_avoid_conflict.pop(i)
1212 | |                         file_path_str = self.loc_input.currentText().format(
1213 | |                             *parents,
1214 | |                             track=file.stem,
1215 | |                             trackext=file.name,
1216 | |                             stem=stem,
1217 | |                             ext=file_ext,
1218 | |                             model=main_window.model_selector.select_combobox.currentText(),
1219 | |                             host=file["host"] if isinstance(file, shared.URL_with_filename) else "localfile",
1220 | |                             **tags_avoid_conflict,
1221 | |                         )
1222 | |                         match self.location_group.checkedId():
1223 | |                             case 0:
1224 | |                                 file_path = file.parent / file_path_str
1225 | |                             case 1:
1226 | |                                 file_path = pathlib.Path(file_path_str)
1227 | |                         match self.clip_mode.currentText():
1228 | |                             case "rescale":
1229 | |                                 if (peak := stem_data.abs().max()) > 0.999:
1230 | |                                     data = stem_data / peak * 0.999
1231 | |                                 else:
1232 | |                                     data = stem_data
1233 | |                             case "clamp":
1234 | |                                 data = stem_data.clamp(-0.999, 0.999)
1235 | |                             case "tanh":
1236 | |                                 data = stem_data.tanh()
1237 | |                             case "none":
1238 | |                                 data = stem_data
1239 | |                     except Exception:
1240 | |                         logging.error("Failed to prepare data for saving:\n%s" % traceback.format_exc())
1241 | |                         ret = traceback.format_exc()
1242 | |                         break
1243 | |                     try:
1244 | |                         file_path.parent.mkdir(parents=True, exist_ok=True)
1245 | |                         match self.encoder_group.checkedId():
1246 | |                             case 0:
1247 | |                                 ret = save_func(file_path, data, self.sample_fmt.currentData(), encoder="sndfile")
1248 | |                             case 1:
1249 | |                                 tags_avoid_conflict = tags.copy()
1250 | |                                 for i in ["input", "inputext", "inputpath", "output"]:
1251 | |                                     if i in tags_avoid_conflict:
1252 | |                                         tags_avoid_conflict.pop(i)
1253 | |                                 command = [
1254 | |                                     i.format(
1255 | |                                         input=file.stem,
1256 | |                                         inputext=file.suffix[1:],
1257 | |                                         inputpath=str(file.parent),
1258 | |                                         output=str(file_path),
1259 | |                                         **tags_avoid_conflict,
1260 | |                                     )
1261 | |                                     for i in shared.try_parse_cmd(self.command.text())
1262 | |                                 ]
1263 | |                                 logging.info("Saving file %s with command %s" % (file_path, command))
1264 | |                                 ret = save_func(command, data, encoder="ffmpeg")
1265 | |                     except Exception:
1266 | |                         logging.error("Failed to save file %s:\n%s" % (file_path, traceback.format_exc()))
1267 | |                         ret = traceback.format_exc()
1268 | |                     if ret is not None:
1269 | |                         break
1270 | |                 main_window.mixer.setEnabled(True)
1271 | |                 if ret is None:
1272 | |                     break
1273 | |                 if self.retry_on_error.isChecked():
1274 | |                     if (
1275 | |                         main_window.exec_in_main(
1276 | |                             lambda: main_window.m.question(
1277 | |                                 main_window,
1278 | |                                 "Retry saving",
1279 | |                                 "Saving failed. Do you want to retry? You can change some options before retrying."
1280 | |                                 "\n\nError message:\n%s" % str(ret),
1281 | |                                 main_window.m.StandardButton.Yes,
1282 | |                                 main_window.m.StandardButton.No,
1283 | |                             )
1284 | |                         )
1285 | |                         == main_window.m.StandardButton.No
1286 | |                     ):
1287 | |                         break
1288 | |                 ret = None
1289 | |                 self.ChangeParamEvent.clear()
1290 | |                 main_window.setStatusText.emit("Waiting for your input...")
1291 | |                 self.lockOther()
1292 | |                 self.retry_button.setEnabled(True)
1293 | |                 self.ChangeParamEvent.wait()
1294 | |                 self.unlockOther()
1295 | |             self.saving -= 1
     | |____________________________^ PLR1702
1296 |           if ret is None:
1297 |               finishCallback(shared.FileStatus.Finished, item)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1176:80: E501 Line too long (82 > 79)
     |
1174 |         finishCallback(shared.FileStatus.Writing, item)
1175 |         with self.SaveLock:
1176 |             shared.AddHistory("save_location", value=self.loc_input.currentText())
     |                                                                                ^^^ E501
1177 |             while True:
1178 |                 main_window.mixer.setEnabled(False)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1183:80: E501 Line too long (102 > 79)
     |
1181 |                 for stem, stem_data in main_window.mixer.mix(origin, tensor):
1182 |                     try:
1183 |                         if separator.np.isnan(stem_data).any() or separator.np.isinf(stem_data).any():
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^ E501
1184 |                             logging.warning("NaN or inf found in stem %s" % stem)
1185 |                         match self.encoder_group.checkedId():
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1184:80: E501 Line too long (81 > 79)
     |
1182 |                     try:
1183 |                         if separator.np.isnan(stem_data).any() or separator.np.isinf(stem_data).any():
1184 |                             logging.warning("NaN or inf found in stem %s" % stem)
     |                                                                                ^^ E501
1185 |                         match self.encoder_group.checkedId():
1186 |                             case 0:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1203:74: PLR2004 Magic value used in comparison, consider replacing `16` with a constant variable
     |
1201 |                         parents = [file.name]
1202 |                         parent = file
1203 |                         while parent.parent != parent and len(parents) < 16:
     |                                                                          ^^ PLR2004
1204 |                             parent = parent.parent
1205 |                             parents.append(parent.name)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1206:43: PLR2004 Magic value used in comparison, consider replacing `16` with a constant variable
     |
1204 |                             parent = parent.parent
1205 |                             parents.append(parent.name)
1206 |                         if len(parents) < 16:
     |                                           ^^ PLR2004
1207 |                             parents += [""] * (16 - len(parents))
1208 |                         tags_avoid_conflict = tags.copy()
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1209:80: E501 Line too long (87 > 79)
     |
1207 |                             parents += [""] * (16 - len(parents))
1208 |                         tags_avoid_conflict = tags.copy()
1209 |                         for i in ["track", "trackext", "stem", "ext", "model", "host"]:
     |                                                                                ^^^^^^^^ E501
1210 |                             if i in tags_avoid_conflict:
1211 |                                 tags_avoid_conflict[f"{i}_"] = tags_avoid_conflict.pop(i)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1211:80: E501 Line too long (89 > 79)
     |
1209 |                         for i in ["track", "trackext", "stem", "ext", "model", "host"]:
1210 |                             if i in tags_avoid_conflict:
1211 |                                 tags_avoid_conflict[f"{i}_"] = tags_avoid_conflict.pop(i)
     |                                                                                ^^^^^^^^^^ E501
1212 |                         file_path_str = self.loc_input.currentText().format(
1213 |                             *parents,
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1219:80: E501 Line too long (109 > 79)
     |
1217 |                             ext=file_ext,
1218 |                             model=main_window.model_selector.select_combobox.currentText(),
1219 |                             host=file["host"] if isinstance(file, shared.URL_with_filename) else "localfile",
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1220 |                             **tags_avoid_conflict,
1221 |                         )
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1229:70: PLR2004 Magic value used in comparison, consider replacing `0.999` with a constant variable
     |
1227 |                         match self.clip_mode.currentText():
1228 |                             case "rescale":
1229 |                                 if (peak := stem_data.abs().max()) > 0.999:
     |                                                                      ^^^^^ PLR2004
1230 |                                     data = stem_data / peak * 0.999
1231 |                                 else:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1240:80: E501 Line too long (104 > 79)
     |
1238 |                                 data = stem_data
1239 |                     except Exception:
1240 |                         logging.error("Failed to prepare data for saving:\n%s" % traceback.format_exc())
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1241 |                         ret = traceback.format_exc()
1242 |                         break
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1247:80: E501 Line too long (114 > 79)
     |
1245 |                         match self.encoder_group.checkedId():
1246 |                             case 0:
1247 |                                 ret = save_func(file_path, data, self.sample_fmt.currentData(), encoder="sndfile")
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1248 |                             case 1:
1249 |                                 tags_avoid_conflict = tags.copy()
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1250:80: E501 Line too long (86 > 79)
     |
1248 | …                     case 1:
1249 | …                         tags_avoid_conflict = tags.copy()
1250 | …                         for i in ["input", "inputext", "inputpath", "output"]:
     |                                                                          ^^^^^^^ E501
1251 | …                             if i in tags_avoid_conflict:
1252 | …                                 tags_avoid_conflict.pop(i)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1261:80: E501 Line too long (86 > 79)
     |
1259 | …                             **tags_avoid_conflict,
1260 | …                         )
1261 | …                         for i in shared.try_parse_cmd(self.command.text())
     |                                                                      ^^^^^^^ E501
1262 | …                     ]
1263 | …                     logging.info("Saving file %s with command %s" % (file_path, command))
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1263:80: E501 Line too long (101 > 79)
     |
1261 |                                     for i in shared.try_parse_cmd(self.command.text())
1262 |                                 ]
1263 |                                 logging.info("Saving file %s with command %s" % (file_path, command))
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^ E501
1264 |                                 ret = save_func(command, data, encoder="ffmpeg")
1265 |                     except Exception:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1264:80: E501 Line too long (80 > 79)
     |
1262 |                                 ]
1263 |                                 logging.info("Saving file %s with command %s" % (file_path, command))
1264 |                                 ret = save_func(command, data, encoder="ffmpeg")
     |                                                                                ^ E501
1265 |                     except Exception:
1266 |                         logging.error("Failed to save file %s:\n%s" % (file_path, traceback.format_exc()))
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1266:80: E501 Line too long (106 > 79)
     |
1264 |                                 ret = save_func(command, data, encoder="ffmpeg")
1265 |                     except Exception:
1266 |                         logging.error("Failed to save file %s:\n%s" % (file_path, traceback.format_exc()))
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1267 |                         ret = traceback.format_exc()
1268 |                     if ret is not None:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1279:80: E501 Line too long (115 > 79)
     |
1277 | …                     main_window,
1278 | …                     "Retry saving",
1279 | …                     "Saving failed. Do you want to retry? You can change some options before retrying."
     |                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1280 | …                     "\n\nError message:\n%s" % str(ret),
1281 | …                     main_window.m.StandardButton.Yes,
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1305:80: E501 Line too long (114 > 79)
     |
1303 |         self.preset_selector.clear()
1304 |         self.preset_selector.addItem(
1305 |             "MP3", {"command": "ffmpeg -y -v level+warning -i - -c:a libmp3lame -b:a 320k {output}", "ext": "mp3"}
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1306 |         )
1307 |         self.preset_selector.addItem(
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1308:80: E501 Line too long (107 > 79)
     |
1306 |         )
1307 |         self.preset_selector.addItem(
1308 |             "AAC", {"command": "ffmpeg -y -v level+warning -i - -c:a aac -b:a 320k {output}", "ext": "m4a"}
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1309 |         )
1310 |         self.preset_selector.addItem(
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1313:80: E501 Line too long (95 > 79)
     |
1311 |             "Copy video stream",
1312 |             {
1313 |                 "command": "ffmpeg -y -v level+warning -i - -i {inputpath}/{input}.{inputext} "
     |                                                                                ^^^^^^^^^^^^^^^^ E501
1314 |                 "-map 1:v? -map 0:a -c:v copy {output}",
1315 |                 "ext": "{inputext}",
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1318:80: E501 Line too long (84 > 79)
     |
1316 |             },
1317 |         )
1318 |         for name, preset in shared.GetHistory("ffmpeg_presets", default={}).items():
     |                                                                                ^^^^^ E501
1319 |             preset_dict = json.loads(preset)
1320 |             if not isinstance(preset_dict, dict) or set(preset_dict.keys()) != {"name", "command", "ext"}:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1320:80: E501 Line too long (106 > 79)
     |
1318 |         for name, preset in shared.GetHistory("ffmpeg_presets", default={}).items():
1319 |             preset_dict = json.loads(preset)
1320 |             if not isinstance(preset_dict, dict) or set(preset_dict.keys()) != {"name", "command", "ext"}:
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1321 |                 logging.error("Invalid preset %s: %s" % (name, preset))
1322 |                 continue
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1328:80: E501 Line too long (91 > 79)
     |
1327 |     def savePreset(self):
1328 |         name, ok = QInputDialog.getText(self, "Save preset", "Enter a name for the preset")
     |                                                                                ^^^^^^^^^^^^ E501
1329 |         if not ok:
1330 |             return
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1332:80: E501 Line too long (110 > 79)
     |
1330 |             return
1331 |         if name.lower() in {"mp3", "aac", "copy video stream"}:
1332 |             main_window.m.warning(self, "Invalid name", "Name cannot be 'MP3', 'AAC' or 'Copy video stream'.")
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1333 |             return
1334 |         if name.lower() in shared.GetHistory("ffmpeg_presets", default={}):
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1346:80: E501 Line too long (119 > 79)
     |
1344 |             ):
1345 |                 return
1346 |         logging.info("Save preset %s:\ncommand: %s\next: %s" % (name, self.command.text(), self.file_extension.text()))
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1347 |         shared.SetHistory(
1348 |             "ffmpeg_presets",
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1351:80: E501 Line too long (120 > 79)
     |
1349 |             name.lower(),
1350 |             value=json.dumps(
1351 |                 {"name": name, "command": self.command.text(), "ext": self.file_extension.text()}, separators=(",", ":")
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1352 |             ),
1353 |         )
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1360:80: E501 Line too long (90 > 79)
     |
1358 |         name = self.preset_selector.currentText()
1359 |         if name.lower() in {"mp3", "aac", "copy video stream"}:
1360 |             main_window.m.warning(self, "Invalid name", "Cannot remove built-in presets.")
     |                                                                                ^^^^^^^^^^^ E501
1361 |             return
1362 |         if (
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1380:80: E501 Line too long (109 > 79)
     |
1378 |         preset = self.preset_selector.currentText()
1379 |         preset_data = self.preset_selector.currentData()
1380 |         if preset_data["command"] != self.command.text() or preset_data["ext"] != self.file_extension.text():
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1381 |             main_window.showWarning.emit(
1382 |                 "Set default preset",
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1383:80: E501 Line too long (112 > 79)
     |
1381 |             main_window.showWarning.emit(
1382 |                 "Set default preset",
1383 |                 "Your current settings are different from the preset settings. If you want to set your current "
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1384 |                 "settings as the default, please save it first.",
1385 |             )
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1391:80: E501 Line too long (82 > 79)
     |
1389 |         command = self.command.text()
1390 |         if "\r" in command or "\n" in command:
1391 |             self.command.setPlainText(command.replace("\r", "").replace("\n", ""))
     |                                                                                ^^^ E501
1392 |             return
1393 |         if command and (parsed := shared.try_parse_cmd(command)):
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1408:56: PLR6201 Use a set literal when testing for membership
     |
1406 |     def lockOther(self):
1407 |         for i in range(main_window.tab_widget.count()):
1408 |             if main_window.tab_widget.widget(i) not in [self.parent(), main_window.mixer]:
     |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR6201
1409 |                 main_window.tab_widget.setTabEnabled(i, False)
1410 |         main_window.param_settings.setEnabled(False)
     |
     = help: Convert to `set`

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1408:80: E501 Line too long (90 > 79)
     |
1406 |     def lockOther(self):
1407 |         for i in range(main_window.tab_widget.count()):
1408 |             if main_window.tab_widget.widget(i) not in [self.parent(), main_window.mixer]:
     |                                                                                ^^^^^^^^^^^ E501
1409 |                 main_window.tab_widget.setTabEnabled(i, False)
1410 |         main_window.param_settings.setEnabled(False)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1413:9: PLR6301 Method `unlockOther` could be a function, class method, or static method
     |
1411 |         main_window.separation_control.setEnabled(False)
1412 |
1413 |     def unlockOther(self):
     |         ^^^^^^^^^^^ PLR6301
1414 |         for i in range(main_window.tab_widget.count()):
1415 |             main_window.tab_widget.setTabEnabled(i, True)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1424:9: PLR0915 Too many statements (83 > 50)
     |
1422 |     new_url_event = threading.Event()
1423 |
1424 |     def __init__(self):
     |         ^^^^^^^^ PLR0915
1425 |         global main_window
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1425:16: PLW0602 Using global for `main_window` but no assignment is done
     |
1424 |     def __init__(self):
1425 |         global main_window
     |                ^^^^^^^^^^^ PLW0602
1426 |
1427 |         super().__init__()
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1439:80: E501 Line too long (93 > 79)
     |
1437 |         self.table.horizontalScrollBar().setSingleStep(8)
1438 |         self.table.verticalHeader().setSectionResizeMode(QHeaderView.ResizeMode.ResizeToContents)
1439 |         self.table.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeMode.Stretch)
     |                                                                                ^^^^^^^^^^^^^^ E501
1440 |         self.table.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeMode.Fixed)
1441 |         self.table.horizontalHeader().setMinimumSectionSize(80)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1440:80: E501 Line too long (91 > 79)
     |
1438 |         self.table.verticalHeader().setSectionResizeMode(QHeaderView.ResizeMode.ResizeToContents)
1439 |         self.table.horizontalHeader().setSectionResizeMode(0, QHeaderView.ResizeMode.Stretch)
1440 |         self.table.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeMode.Fixed)
     |                                                                                ^^^^^^^^^^^^ E501
1441 |         self.table.horizontalHeader().setMinimumSectionSize(80)
1442 |         font = self.table.font()
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1449:80: E501 Line too long (97 > 79)
     |
1447 |         self.table.setHorizontalHeaderLabels(["File", "Status"])
1448 |         self.table.setColumnWidth(1, 80)
1449 |         self.table.horizontalHeaderItem(0).setToolTip("Click here to toggle file name/full path")
     |                                                                                ^^^^^^^^^^^^^^^^^^ E501
1450 |
1451 |         self.table.setAcceptDrops(True)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1457:80: E501 Line too long (83 > 79)
     |
1456 |         self.show_full_path = False
1457 |         self.table.horizontalHeaderItem(0).setToolTip("Toggle full path/file name")
     |                                                                                ^^^^ E501
1458 |         self.table.horizontalHeaderItem(1).setToolTip("Toggle animation")
1459 |         self.table.horizontalHeader().sectionClicked.connect(self.tableHeaderClicked)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1467:80: E501 Line too long (107 > 79)
     |
1465 |         self.add_folder_button.setText("Add folder")
1466 |         self.add_folder_button.clicked.connect(
1467 |             lambda: self.addFiles([QFileDialog.getExistingDirectory(main_window, "Add a folder to queue")])
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1468 |         )
1469 |         self.add_folder_button.setFocusProxy(self.table)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1475:80: E501 Line too long (120 > 79)
     |
1473 |         self.add_files_button.clicked.connect(
1474 |             lambda: self.addFiles(
1475 |                 QFileDialog.getOpenFileNames(main_window, "Add files to queue", filter=separator.audio.format_filter)[0]
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1476 |             )
1477 |         )
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1534:9: PLR6301 Method `table_dragEnterEvent` could be a function, class method, or static method
     |
1532 |         self.queue_length = 0
1533 |
1534 |     def table_dragEnterEvent(self, event):
     |         ^^^^^^^^^^^^^^^^^^^^ PLR6301
1535 |         if event.mimeData().hasUrls():
1536 |             event.accept()
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1547:27: PLR6201 Use a set literal when testing for membership
     |
1546 |     def table_keyReleaseEvent(self, event):
1547 |         if event.key() in (Qt.Key.Key_Backspace, Qt.Key.Key_Delete):
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR6201
1548 |             self.removeFiles()
     |
     = help: Convert to `set`

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1564:16: PLW0602 Using global for `main_window` but no assignment is done
     |
1563 |     def addFiles(self, files):
1564 |         global main_window
     |                ^^^^^^^^^^^ PLW0602
1565 |         files = map(pathlib.Path, (i for i in files if len(i)))
1566 |         for file in files:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1570:80: E501 Line too long (91 > 79)
     |
1568 |                 for dirpath, dirnames, filenames in os.walk(file):
1569 |                     dirpath_path = pathlib.Path(dirpath)
1570 |                     self.addFiles([str(dirpath_path / filename) for filename in filenames])
     |                                                                                ^^^^^^^^^^^^ E501
1571 |             else:
1572 |                 with file_queue_lock:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1575:31: PLR2004 Magic value used in comparison, consider replacing `500` with a constant variable
     |
1573 |                     row = self.table.rowCount()
1574 |                     self.table.insertRow(row)
1575 |                     if row == 500:
     |                               ^^^ PLR2004
1576 |                         main_window.showWarning.emit(
1577 |                             "Queue too long",
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1578:80: E501 Line too long (114 > 79)
     |
1576 |                         main_window.showWarning.emit(
1577 |                             "Queue too long",
1578 |                             "You have added more than 500 files to the queue. This may cause performance issues. "
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1579 |                             "You may switch to other tabs or minimize the window to reduce the impact.",
1580 |                         )
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1579:80: E501 Line too long (104 > 79)
     |
1577 |                             "Queue too long",
1578 |                             "You have added more than 500 files to the queue. This may cause performance issues. "
1579 |                             "You may switch to other tabs or minimize the window to reduce the impact.",
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1580 |                         )
1581 |                     if self.show_full_path:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1587:80: E501 Line too long (83 > 79)
     |
1585 |                     self.table.setItem(row, 1, QTableWidgetItem())
1586 |                     self.table.item(row, 0).setToolTip(str(file))
1587 |                     self.table.item(row, 0).setData(Qt.ItemDataRole.UserRole, file)
     |                                                                                ^^^^ E501
1588 |                     self.table.item(row, 1).setData(Qt.ItemDataRole.UserRole, [shared.FileStatus.Queued])
1589 |                     self.table.item(row, 1).setData(ProgressDelegate.ProgressRole, 0)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1588:80: E501 Line too long (105 > 79)
     |
1586 |                     self.table.item(row, 0).setToolTip(str(file))
1587 |                     self.table.item(row, 0).setData(Qt.ItemDataRole.UserRole, file)
1588 |                     self.table.item(row, 1).setData(Qt.ItemDataRole.UserRole, [shared.FileStatus.Queued])
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1589 |                     self.table.item(row, 1).setData(ProgressDelegate.ProgressRole, 0)
1590 |                     self.table.item(row, 1).setData(ProgressDelegate.TextRole, "Queued")
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1589:80: E501 Line too long (85 > 79)
     |
1587 |                     self.table.item(row, 0).setData(Qt.ItemDataRole.UserRole, file)
1588 |                     self.table.item(row, 1).setData(Qt.ItemDataRole.UserRole, [shared.FileStatus.Queued])
1589 |                     self.table.item(row, 1).setData(ProgressDelegate.ProgressRole, 0)
     |                                                                                ^^^^^^ E501
1590 |                     self.table.item(row, 1).setData(ProgressDelegate.TextRole, "Queued")
1591 |                     self.queue_length += 1
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1590:80: E501 Line too long (88 > 79)
     |
1588 |                     self.table.item(row, 1).setData(Qt.ItemDataRole.UserRole, [shared.FileStatus.Queued])
1589 |                     self.table.item(row, 1).setData(ProgressDelegate.ProgressRole, 0)
1590 |                     self.table.item(row, 1).setData(ProgressDelegate.TextRole, "Queued")
     |                                                                                ^^^^^^^^^ E501
1591 |                     self.queue_length += 1
1592 |                 if main_window.param_settings.separate_once_added.isChecked():
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1612:16: PLW0602 Using global for `main_window` but no assignment is done
     |
1611 |     def addUrl(self):
1612 |         global main_window
     |                ^^^^^^^^^^^ PLW0602
1613 |         default_content = ""
1614 |         try:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1616:80: E501 Line too long (120 > 79)
     |
1614 |         try:
1615 |             if re.match(
1616 |                 rf"^(?:(?:.*? )?{shared.urlreg_str[1:-1]}(?:\r*\n)*)+$", clip := QApplication.clipboard().text().strip()
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1617 |             ):
1618 |                 default_content = clip
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1625:80: E501 Line too long (96 > 79)
     |
1623 |             "Add URLs",
1624 |             "Enter URLs to add to the queue, one per line\n"
1625 |             "You can specify the filename by separating file name and URL with a single space\n"
     |                                                                                ^^^^^^^^^^^^^^^^^ E501
1626 |             "Example: filename%20containing%20space https://example.com/file.mp3\n"
1627 |             "Spaces in both filename and URL should be URL-encoded (%20)",
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1637:80: E501 Line too long (99 > 79)
     |
1635 |             if " " in line:
1636 |                 name, url = line.rsplit(" ", 1)
1637 |                 name = re.sub(r'[/\\:?*"<>|\u0000-\u0019]', "", urllib.parse.unquote(name.strip()))
     |                                                                                ^^^^^^^^^^^^^^^^^^^^ E501
1638 |                 url = shared.URL_with_filename(url, name=name, protocols=separator.audio.ffmpeg_protocols)
1639 |             else:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1638:80: E501 Line too long (106 > 79)
     |
1636 |                 name, url = line.rsplit(" ", 1)
1637 |                 name = re.sub(r'[/\\:?*"<>|\u0000-\u0019]', "", urllib.parse.unquote(name.strip()))
1638 |                 url = shared.URL_with_filename(url, name=name, protocols=separator.audio.ffmpeg_protocols)
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1639 |             else:
1640 |                 url = shared.URL_with_filename(line, protocols=separator.audio.ffmpeg_protocols)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1640:80: E501 Line too long (96 > 79)
     |
1638 |                 url = shared.URL_with_filename(url, name=name, protocols=separator.audio.ffmpeg_protocols)
1639 |             else:
1640 |                 url = shared.URL_with_filename(line, protocols=separator.audio.ffmpeg_protocols)
     |                                                                                ^^^^^^^^^^^^^^^^^ E501
1641 |                 if not url["name"]:
1642 |                     logging.error("Can't find filename in URL %s\nPlease specify the filename" % url)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1642:80: E501 Line too long (101 > 79)
     |
1640 |                 url = shared.URL_with_filename(line, protocols=separator.audio.ffmpeg_protocols)
1641 |                 if not url["name"]:
1642 |                     logging.error("Can't find filename in URL %s\nPlease specify the filename" % url)
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^ E501
1643 |                     continue
1644 |             with file_queue_lock:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1647:27: PLR2004 Magic value used in comparison, consider replacing `500` with a constant variable
     |
1645 |                 row = self.table.rowCount()
1646 |                 self.table.insertRow(row)
1647 |                 if row == 500:
     |                           ^^^ PLR2004
1648 |                     main_window.showWarning.emit(
1649 |                         "Queue too long",
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1650:80: E501 Line too long (110 > 79)
     |
1648 |                     main_window.showWarning.emit(
1649 |                         "Queue too long",
1650 |                         "You have added more than 500 files to the queue. This may cause performance issues. "
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1651 |                         "You may switch to other tabs or minimize the window to reduce the impact.",
1652 |                     )
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1651:80: E501 Line too long (100 > 79)
     |
1649 |                         "Queue too long",
1650 |                         "You have added more than 500 files to the queue. This may cause performance issues. "
1651 |                         "You may switch to other tabs or minimize the window to reduce the impact.",
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^ E501
1652 |                     )
1653 |                 self.table.setItem(row, 0, QTableWidgetItem(str(url)))
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1659:80: E501 Line too long (101 > 79)
     |
1657 |                 self.table.item(row, 0).setToolTip(str(url))
1658 |                 self.table.item(row, 0).setData(Qt.ItemDataRole.UserRole, url)
1659 |                 self.table.item(row, 1).setData(Qt.ItemDataRole.UserRole, [shared.FileStatus.Queued])
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^ E501
1660 |                 self.table.item(row, 1).setData(ProgressDelegate.ProgressRole, 0)
1661 |                 self.table.item(row, 1).setData(ProgressDelegate.TextRole, "Queued")
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1660:80: E501 Line too long (81 > 79)
     |
1658 |                 self.table.item(row, 0).setData(Qt.ItemDataRole.UserRole, url)
1659 |                 self.table.item(row, 1).setData(Qt.ItemDataRole.UserRole, [shared.FileStatus.Queued])
1660 |                 self.table.item(row, 1).setData(ProgressDelegate.ProgressRole, 0)
     |                                                                                ^^ E501
1661 |                 self.table.item(row, 1).setData(ProgressDelegate.TextRole, "Queued")
1662 |                 self.queue_length += 1
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1661:80: E501 Line too long (84 > 79)
     |
1659 |                 self.table.item(row, 1).setData(Qt.ItemDataRole.UserRole, [shared.FileStatus.Queued])
1660 |                 self.table.item(row, 1).setData(ProgressDelegate.ProgressRole, 0)
1661 |                 self.table.item(row, 1).setData(ProgressDelegate.TextRole, "Queued")
     |                                                                                ^^^^^ E501
1662 |                 self.queue_length += 1
1663 |             if main_window.param_settings.separate_once_added.isChecked():
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1693:80: E501 Line too long (86 > 79)
     |
1691 |             for i in range(self.table.rowCount()):
1692 |                 item = self.table.item(i, 0)
1693 |                 if isinstance(p := item.data(Qt.ItemDataRole.UserRole), pathlib.Path):
     |                                                                                ^^^^^^^ E501
1694 |                     item.setText(p.name)
1695 |                 elif isinstance(p, shared.URL_with_filename):
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1703:80: E501 Line too long (96 > 79)
     |
1702 |     def removeFiles(self):
1703 |         indexes = sorted(list(set(i.row() for i in self.table.selectedIndexes())), reverse=True)
     |                                                                                ^^^^^^^^^^^^^^^^^ E501
1704 |         for i in indexes:
1705 |             if self.table.item(i, 1).data(Qt.ItemDataRole.UserRole)[0] not in [
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1705:79: PLR6201 Use a set literal when testing for membership
     |
1703 |           indexes = sorted(list(set(i.row() for i in self.table.selectedIndexes())), reverse=True)
1704 |           for i in indexes:
1705 |               if self.table.item(i, 1).data(Qt.ItemDataRole.UserRole)[0] not in [
     |  _______________________________________________________________________________^
1706 | |                 shared.FileStatus.Paused,
1707 | |                 shared.FileStatus.Queued,
1708 | |                 shared.FileStatus.Finished,
1709 | |                 shared.FileStatus.Cancelled,
1710 | |                 shared.FileStatus.Failed,
1711 | |             ]:
     | |_____________^ PLR6201
1712 |                   continue
1713 |               if self.table.item(i, 1).data(Qt.ItemDataRole.UserRole)[0] in [
     |
     = help: Convert to `set`

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1713:75: PLR6201 Use a set literal when testing for membership
     |
1711 |               ]:
1712 |                   continue
1713 |               if self.table.item(i, 1).data(Qt.ItemDataRole.UserRole)[0] in [
     |  ___________________________________________________________________________^
1714 | |                 shared.FileStatus.Queued,
1715 | |                 shared.FileStatus.Paused,
1716 | |             ]:
     | |_____________^ PLR6201
1717 |                   self.queue_length -= 1
1718 |                   main_window.updateQueueLength()
     |
     = help: Convert to `set`

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1724:80: E501 Line too long (99 > 79)
     |
1722 |         indexes = list(set(i.row() for i in self.table.selectedIndexes()))
1723 |         for i in indexes:
1724 |             if self.table.item(i, 1).data(Qt.ItemDataRole.UserRole)[0] == shared.FileStatus.Queued:
     |                                                                                ^^^^^^^^^^^^^^^^^^^^ E501
1725 |                 self.table.item(i, 1).setData(Qt.ItemDataRole.UserRole, [shared.FileStatus.Paused])
1726 |                 self.table.item(i, 1).setData(ProgressDelegate.TextRole, "Paused")
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1725:80: E501 Line too long (99 > 79)
     |
1723 |         for i in indexes:
1724 |             if self.table.item(i, 1).data(Qt.ItemDataRole.UserRole)[0] == shared.FileStatus.Queued:
1725 |                 self.table.item(i, 1).setData(Qt.ItemDataRole.UserRole, [shared.FileStatus.Paused])
     |                                                                                ^^^^^^^^^^^^^^^^^^^^ E501
1726 |                 self.table.item(i, 1).setData(ProgressDelegate.TextRole, "Paused")
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1726:80: E501 Line too long (82 > 79)
     |
1724 |             if self.table.item(i, 1).data(Qt.ItemDataRole.UserRole)[0] == shared.FileStatus.Queued:
1725 |                 self.table.item(i, 1).setData(Qt.ItemDataRole.UserRole, [shared.FileStatus.Paused])
1726 |                 self.table.item(i, 1).setData(ProgressDelegate.TextRole, "Paused")
     |                                                                                ^^^ E501
1727 |
1728 |     def resume(self):
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1731:75: PLR6201 Use a set literal when testing for membership
     |
1729 |           indexes = list(set(i.row() for i in self.table.selectedIndexes()))
1730 |           for i in indexes:
1731 |               if self.table.item(i, 1).data(Qt.ItemDataRole.UserRole)[0] in [
     |  ___________________________________________________________________________^
1732 | |                 shared.FileStatus.Paused,
1733 | |                 shared.FileStatus.Cancelled,
1734 | |                 shared.FileStatus.Failed,
1735 | |             ]:
     | |_____________^ PLR6201
1736 |                   if self.table.item(i, 1).data(Qt.ItemDataRole.UserRole)[0] in [
1737 |                       shared.FileStatus.Cancelled,
     |
     = help: Convert to `set`

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1736:79: PLR6201 Use a set literal when testing for membership
     |
1734 |                   shared.FileStatus.Failed,
1735 |               ]:
1736 |                   if self.table.item(i, 1).data(Qt.ItemDataRole.UserRole)[0] in [
     |  _______________________________________________________________________________^
1737 | |                     shared.FileStatus.Cancelled,
1738 | |                     shared.FileStatus.Failed,
1739 | |                 ]:
     | |_________________^ PLR6201
1740 |                       self.queue_length += 1
1741 |                       main_window.updateQueueLength()
     |
     = help: Convert to `set`

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1742:80: E501 Line too long (99 > 79)
     |
1740 |                     self.queue_length += 1
1741 |                     main_window.updateQueueLength()
1742 |                 self.table.item(i, 1).setData(Qt.ItemDataRole.UserRole, [shared.FileStatus.Queued])
     |                                                                                ^^^^^^^^^^^^^^^^^^^^ E501
1743 |                 self.table.item(i, 1).setData(ProgressDelegate.TextRole, "Queued")
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1743:80: E501 Line too long (82 > 79)
     |
1741 |                     main_window.updateQueueLength()
1742 |                 self.table.item(i, 1).setData(Qt.ItemDataRole.UserRole, [shared.FileStatus.Queued])
1743 |                 self.table.item(i, 1).setData(ProgressDelegate.TextRole, "Queued")
     |                                                                                ^^^ E501
1744 |
1745 |     def moveTop(self):
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1746:80: E501 Line too long (82 > 79)
     |
1745 |     def moveTop(self):
1746 |         indexes = sorted(list(set(i.row() for i in self.table.selectedIndexes())))
     |                                                                                ^^^ E501
1747 |         for i, index in enumerate(indexes):
1748 |             if self.table.item(index, 1).data(Qt.ItemDataRole.UserRole)[0] not in [
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1748:80: E501 Line too long (83 > 79)
     |
1746 |         indexes = sorted(list(set(i.row() for i in self.table.selectedIndexes())))
1747 |         for i, index in enumerate(indexes):
1748 |             if self.table.item(index, 1).data(Qt.ItemDataRole.UserRole)[0] not in [
     |                                                                                ^^^^ E501
1749 |                 shared.FileStatus.Paused,
1750 |                 shared.FileStatus.Queued,
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1748:83: PLR6201 Use a set literal when testing for membership
     |
1746 |           indexes = sorted(list(set(i.row() for i in self.table.selectedIndexes())))
1747 |           for i, index in enumerate(indexes):
1748 |               if self.table.item(index, 1).data(Qt.ItemDataRole.UserRole)[0] not in [
     |  ___________________________________________________________________________________^
1749 | |                 shared.FileStatus.Paused,
1750 | |                 shared.FileStatus.Queued,
1751 | |             ]:
     | |_____________^ PLR6201
1752 |                   continue
1753 |               self.table.insertRow(i)
     |
     = help: Convert to `set`

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1762:80: E501 Line too long (103 > 79)
     |
1760 |             self.setEnabled(False)
1761 |             for i in range(self.table.rowCount()):
1762 |                 if self.table.item(i, 1).data(Qt.ItemDataRole.UserRole)[0] == shared.FileStatus.Queued:
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^ E501
1763 |                     self.setEnabled(True)
1764 |                     return i
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1782:80: E501 Line too long (88 > 79)
     |
1780 |         if super().editors == 0:
1781 |             self._mixer.slider.setEnabled(True)
1782 |         self._mixer.selectedItemChanged(*(self._mixer.outputs_table.currentItem(),) * 2)
     |                                                                                ^^^^^^^^^ E501
1783 |         return ret
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1789:9: PLR0915 Too many statements (78 > 50)
     |
1787 |     widget_title = "Mixer"
1788 |
1789 |     def __init__(self):
     |         ^^^^^^^^ PLR0915
1790 |         super().__init__()
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1793:80: E501 Line too long (97 > 79)
     |
1792 |         self.preset_stem_key = json.dumps(
1793 |             list(sorted(main_window.separator.sources)), separators=(",", ":"), ensure_ascii=True
     |                                                                                ^^^^^^^^^^^^^^^^^^ E501
1794 |         )
1795 |         logging.info("Preset stem key: %s" % self.preset_stem_key)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1799:80: E501 Line too long (91 > 79)
     |
1797 |         self.preset_label = QLabel()
1798 |         self.preset_label.setText("Preset:")
1799 |         self.preset_label.setSizePolicy(QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Fixed)
     |                                                                                ^^^^^^^^^^^^ E501
1800 |
1801 |         self.preset_combobox = QComboBox()
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1802:80: E501 Line too long (98 > 79)
     |
1801 |         self.preset_combobox = QComboBox()
1802 |         self.preset_combobox.setSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Fixed)
     |                                                                                ^^^^^^^^^^^^^^^^^^^ E501
1803 |         self.loadSavedPresets()
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1807:80: E501 Line too long (91 > 79)
     |
1805 |         self.preset_apply = QPushButton()
1806 |         self.preset_apply.setText("Apply")
1807 |         self.preset_apply.setSizePolicy(QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Fixed)
     |                                                                                ^^^^^^^^^^^^ E501
1808 |         self.preset_apply.clicked.connect(self.applyPreset)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1812:80: E501 Line too long (90 > 79)
     |
1810 |         self.preset_save = QPushButton()
1811 |         self.preset_save.setText("Save")
1812 |         self.preset_save.setSizePolicy(QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Fixed)
     |                                                                                ^^^^^^^^^^^ E501
1813 |         self.preset_save.clicked.connect(self.savePreset)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1817:80: E501 Line too long (97 > 79)
     |
1815 |         self.preset_set_default = QPushButton()
1816 |         self.preset_set_default.setText("Set as default")
1817 |         self.preset_set_default.setSizePolicy(QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Fixed)
     |                                                                                ^^^^^^^^^^^^^^^^^^ E501
1818 |         self.preset_set_default.clicked.connect(self.setDefaultPreset)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1822:80: E501 Line too long (92 > 79)
     |
1820 |         self.preset_delete = QPushButton()
1821 |         self.preset_delete.setText("Delete")
1822 |         self.preset_delete.setSizePolicy(QSizePolicy.Policy.Fixed, QSizePolicy.Policy.Fixed)
     |                                                                                ^^^^^^^^^^^^^ E501
1823 |         self.preset_delete.clicked.connect(self.deletePreset)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1826:80: E501 Line too long (81 > 79)
     |
1825 |         self.outputs_table = QTableWidgetWithCheckBox()
1826 |         self.outputs_table.setColumnCount(len(main_window.separator.sources) + 2)
     |                                                                                ^^ E501
1827 |         self.outputs_table.setHorizontalHeaderLabels(["Output name", "origin"] + list(main_window.separator.sources))
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1827:80: E501 Line too long (117 > 79)
     |
1825 |         self.outputs_table = QTableWidgetWithCheckBox()
1826 |         self.outputs_table.setColumnCount(len(main_window.separator.sources) + 2)
1827 |         self.outputs_table.setHorizontalHeaderLabels(["Output name", "origin"] + list(main_window.separator.sources))
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1828 |
1829 |         self.outputs_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.ResizeToContents)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1830:80: E501 Line too long (101 > 79)
     |
1829 |         self.outputs_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.ResizeToContents)
1830 |         self.outputs_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^ E501
1831 |         self.outputs_table.verticalHeader().setSectionResizeMode(QHeaderView.ResizeMode.ResizeToContents)
1832 |         self.outputs_table.setSelectionMode(QTableWidget.SelectionMode.ExtendedSelection)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1840:80: E501 Line too long (110 > 79)
     |
1838 |         self.delegate = DelegateCallback(self)
1839 |         self.delegate.addDelegate(
1840 |             FileNameDelegate(), lambda x: x.column() == 1 and x.row() > len(main_window.separator.sources) * 3
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1841 |         )
1842 |         self.delegate.addDelegate(
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1844:80: E501 Line too long (90 > 79)
     |
1842 |         self.delegate.addDelegate(
1843 |             PercentSpinBoxDelegate(minimum=-500, maximum=500, step=1),
1844 |             lambda x: x.column() > 1 and x.row() > len(main_window.separator.sources) * 3,
     |                                                                                ^^^^^^^^^^^ E501
1845 |         )
1846 |         self.delegate.addDelegate(
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1847:80: E501 Line too long (112 > 79)
     |
1845 |         )
1846 |         self.delegate.addDelegate(
1847 |             DoNothingDelegate(), lambda x: x.column() >= 1 and x.row() <= len(main_window.separator.sources) * 3
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1848 |         )
1849 |         self.outputs_table.setItemDelegate(self.delegate)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1851:80: E501 Line too long (111 > 79)
     |
1849 |         self.outputs_table.setItemDelegate(self.delegate)
1850 |
1851 |         default_preset = shared.GetHistory("default_preset", self.preset_stem_key, default=None, autoset=False)
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1852 |         if (
1853 |             not default_preset
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1855:80: E501 Line too long (114 > 79)
     |
1853 |             not default_preset
1854 |             or default_preset.lower() == "default"
1855 |             or default_preset not in shared.GetHistory("presets", self.preset_stem_key, default={}, autoset=False)
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1856 |         ):
1857 |             self.addDefaultStems()
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1900:27: PLR6201 Use a set literal when testing for membership
     |
1899 |     def keyPressEvent(self, event):
1900 |         if event.key() in (Qt.Key.Key_Backspace, Qt.Key.Key_Delete):
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR6201
1901 |             self.removeSelected()
     |
     = help: Convert to `set`

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1904:80: E501 Line too long (112 > 79)
     |
1903 |     def removeSelected(self):
1904 |         if max(i.row() for i in self.outputs_table.selectedIndexes()) <= len(main_window.separator.sources) * 3:
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1905 |             main_window.showError.emit("Cannot remove default stems", "Cannot remove default stems")
1906 |         indexes = sorted(list(set(i.row() for i in self.outputs_table.selectedIndexes())), reverse=True)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1905:80: E501 Line too long (100 > 79)
     |
1903 |     def removeSelected(self):
1904 |         if max(i.row() for i in self.outputs_table.selectedIndexes()) <= len(main_window.separator.sources) * 3:
1905 |             main_window.showError.emit("Cannot remove default stems", "Cannot remove default stems")
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^ E501
1906 |         indexes = sorted(list(set(i.row() for i in self.outputs_table.selectedIndexes())), reverse=True)
1907 |         for i in indexes:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1906:80: E501 Line too long (104 > 79)
     |
1904 |         if max(i.row() for i in self.outputs_table.selectedIndexes()) <= len(main_window.separator.sources) * 3:
1905 |             main_window.showError.emit("Cannot remove default stems", "Cannot remove default stems")
1906 |         indexes = sorted(list(set(i.row() for i in self.outputs_table.selectedIndexes())), reverse=True)
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1907 |         for i in indexes:
1908 |             if i <= len(main_window.separator.sources) * 3:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1917:80: E501 Line too long (120 > 79)
     |
1915 |             self.outputs_table.addRow(
1916 |                 [stem]
1917 |                 + ["100%\u3000" if idx + 1 == j else "0%\u3000" for j in range(len(main_window.separator.sources) + 1)],
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1918 |                 True,
1919 |             )
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1926:80: E501 Line too long (93 > 79)
     |
1924 |                 ["minus_" + stem]
1925 |                 + [
1926 |                     "100%\u3000" if j == 0 else "-100%\u3000" if idx + 1 == j else "0%\u3000"
     |                                                                                ^^^^^^^^^^^^^^ E501
1927 |                     for j in range(len(main_window.separator.sources) + 1)
1928 |                 ],
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1946:80: E501 Line too long (113 > 79)
     |
1944 |         self.outputs_table.addRow(
1945 |             ["all_left"]
1946 |             + ["100%\u3000" if j == 0 else "-100%\u3000" for j in range(len(main_window.separator.sources) + 1)],
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1947 |             False,
1948 |         )
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1951:80: E501 Line too long (113 > 79)
     |
1950 |     def addStem(self, *, stem_name="stem", enabled=True):
1951 |         self.outputs_table.addRow([stem_name] + ["0%\u3000"] * (len(main_window.separator.sources) + 1), enabled)
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1952 |
1953 |     def loadSavedPresets(self):
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1956:80: E501 Line too long (114 > 79)
     |
1954 |         self.preset_combobox.clear()
1955 |         self.preset_combobox.addItems(["Default"])
1956 |         saved_presets = list(shared.GetHistory("presets", self.preset_stem_key, default={}, autoset=False).keys())
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1957 |         logging.info("Adding saved presets: %s" % saved_presets)
1958 |         self.preset_combobox.addItems(saved_presets)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1964:80: E501 Line too long (97 > 79)
     |
1962 |         # For default stems, we only save whether it is enabled
1963 |         for i in range(len(main_window.separator.sources) * 3 + 1):
1964 |             preset[0][self.outputs_table.item(i, 0).text()] = self.outputs_table.getCheckState(i)
     |                                                                                ^^^^^^^^^^^^^^^^^^ E501
1965 |         for i in range(len(main_window.separator.sources) * 3 + 1, self.outputs_table.rowCount()):
1966 |             # We can't assume that all models have sorted sources, so use dict to store the values
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1965:80: E501 Line too long (98 > 79)
     |
1963 |         for i in range(len(main_window.separator.sources) * 3 + 1):
1964 |             preset[0][self.outputs_table.item(i, 0).text()] = self.outputs_table.getCheckState(i)
1965 |         for i in range(len(main_window.separator.sources) * 3 + 1, self.outputs_table.rowCount()):
     |                                                                                ^^^^^^^^^^^^^^^^^^^ E501
1966 |             # We can't assume that all models have sorted sources, so use dict to store the values
1967 |             # Item format: ("stem name", {"source": "value"}, bool("enabled"))
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1966:80: E501 Line too long (98 > 79)
     |
1964 |             preset[0][self.outputs_table.item(i, 0).text()] = self.outputs_table.getCheckState(i)
1965 |         for i in range(len(main_window.separator.sources) * 3 + 1, self.outputs_table.rowCount()):
1966 |             # We can't assume that all models have sorted sources, so use dict to store the values
     |                                                                                ^^^^^^^^^^^^^^^^^^^ E501
1967 |             # Item format: ("stem name", {"source": "value"}, bool("enabled"))
1968 |             preset[1].append(
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1972:80: E501 Line too long (83 > 79)
     |
1970 |                     self.outputs_table.item(i, 0).text(),
1971 |                     {
1972 |                         self.outputs_table.horizontalHeaderItem(j + 1).text(): int(
     |                                                                                ^^^^ E501
1973 |                             self.outputs_table.item(i, j + 1).data(Qt.ItemDataRole.EditRole)[:-2]
1974 |                         )
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1973:80: E501 Line too long (97 > 79)
     |
1971 |                     {
1972 |                         self.outputs_table.horizontalHeaderItem(j + 1).text(): int(
1973 |                             self.outputs_table.item(i, j + 1).data(Qt.ItemDataRole.EditRole)[:-2]
     |                                                                                ^^^^^^^^^^^^^^^^^^ E501
1974 |                         )
1975 |                         for j in range(len(main_window.separator.sources) + 1)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1987:80: E501 Line too long (100 > 79)
     |
1985 |             return
1986 |         if not name:
1987 |             main_window.showError.emit("Preset name cannot be empty", "Preset name cannot be empty")
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^ E501
1988 |             return
1989 |         if name.lower() == "default":
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1990:80: E501 Line too long (108 > 79)
     |
1988 |             return
1989 |         if name.lower() == "default":
1990 |             main_window.showError.emit('Preset name cannot be "default"', 'Preset name cannot be "default"')
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
1991 |             return
1992 |         logging.info("Saving preset name: %s" % name)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1993:80: E501 Line too long (97 > 79)
     |
1991 |             return
1992 |         logging.info("Saving preset name: %s" % name)
1993 |         if name in shared.GetHistory("presets", self.preset_stem_key, default={}, autoset=False):
     |                                                                                ^^^^^^^^^^^^^^^^^^ E501
1994 |             if (
1995 |                 not main_window.m.question(
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:1998:80: E501 Line too long (83 > 79)
     |
1996 |                     "Preset name already exists",
1997 |                     "Preset name already exists, overwrite?",
1998 |                     QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
     |                                                                                ^^^^ E501
1999 |                     QMessageBox.StandardButton.No,
2000 |                 )
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2007:80: E501 Line too long (91 > 79)
     |
2005 |         preset = self.getCurrentPreset()
2006 |         shared.SetHistory("presets", self.preset_stem_key, name, value=preset)
2007 |         logging.info("Preset data:\n%s" % json.dumps(preset, ensure_ascii=False, indent=4))
     |                                                                                ^^^^^^^^^^^^ E501
2008 |         self.loadSavedPresets()
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2012:80: E501 Line too long (113 > 79)
     |
2010 |     def setDefaultPreset(self):
2011 |         if self.getCurrentPreset() != (
2012 |             shared.GetHistory("presets", self.preset_stem_key, self.preset_combobox.currentText(), autoset=False)
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
2013 |             if self.preset_combobox.currentText() != "Default"
2014 |             else [
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2018:80: E501 Line too long (91 > 79)
     |
2016 |                     sum(
2017 |                         [
2018 |                             [(stem, True), (f"minus_{stem}", False), (f"no_{stem}", False)]
     |                                                                                ^^^^^^^^^^^^ E501
2019 |                             for stem in main_window.separator.sources
2020 |                         ],
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2029:80: E501 Line too long (86 > 79)
     |
2027 |             main_window.showWarning.emit(
2028 |                 "Preset not saved",
2029 |                 "You are not saving your current settings as default, but the preset "
     |                                                                                ^^^^^^^ E501
2030 |                 f"{self.preset_combobox.currentText()}.",
2031 |             )
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2032:80: E501 Line too long (107 > 79)
     |
2030 |                 f"{self.preset_combobox.currentText()}.",
2031 |             )
2032 |         shared.SetHistory("default_preset", self.preset_stem_key, value=self.preset_combobox.currentText())
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
2033 |         logging.info("Set default preset to %s" % self.preset_combobox.currentText())
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2033:80: E501 Line too long (85 > 79)
     |
2031 |             )
2032 |         shared.SetHistory("default_preset", self.preset_stem_key, value=self.preset_combobox.currentText())
2033 |         logging.info("Set default preset to %s" % self.preset_combobox.currentText())
     |                                                                                ^^^^^^ E501
2034 |
2035 |     def deletePreset(self):
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2038:80: E501 Line too long (106 > 79)
     |
2036 |         wait_for_delete = self.preset_combobox.currentText()
2037 |         if wait_for_delete.lower() == "default":
2038 |             main_window.showError.emit('Cannot delete "default" preset', 'Cannot delete "default" preset')
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
2039 |             return
2040 |         if (
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2059:80: E501 Line too long (118 > 79)
     |
2057 |                 self.outputs_table.removeRow(0)
2058 |             self.addDefaultStems()
2059 |         preset = shared.GetHistory("presets", self.preset_stem_key, self.preset_combobox.currentText(), autoset=False)
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
2060 |         if not preset:
2061 |             return
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2069:80: E501 Line too long (107 > 79)
     |
2067 |         self.addDefaultStems()
2068 |         for i in range(len(main_window.separator.sources) * 3 + 1):
2069 |             self.outputs_table.setCheckState(i, preset[0].get(self.outputs_table.item(i, 0).text(), False))
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
2070 |         # Add custom stems and restore their values and enabled state
2071 |         for stem, sources, enabled in preset[1]:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2073:80: E501 Line too long (95 > 79)
     |
2071 |         for stem, sources, enabled in preset[1]:
2072 |             # Calculate weights first
2073 |             # The order of sources is not guaranteed, so we need to use the index of the source
     |                                                                                ^^^^^^^^^^^^^^^^ E501
2074 |             weights = [stem, f"{sources['origin']}%\u3000"]
2075 |             for source in main_window.separator.sources:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2080:80: E501 Line too long (90 > 79)
     |
2079 |     def duplicateSelected(self):
2080 |         indexes = sorted(list(set(i.row() for i in self.outputs_table.selectedIndexes())))
     |                                                                                ^^^^^^^^^^^ E501
2081 |         for i in indexes:
2082 |             self.outputs_table.addRow((), True)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2084:80: E501 Line too long (119 > 79)
     |
2082 |             self.outputs_table.addRow((), True)
2083 |             for j in range(self.outputs_table.columnCount()):
2084 |                 self.outputs_table.setItem(self.outputs_table.rowCount() - 1, j, self.outputs_table.item(i, j).clone())
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
2085 |
2086 |     def resizeEvent(self, event=None) -> None:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2087:80: E501 Line too long (110 > 79)
     |
2086 |     def resizeEvent(self, event=None) -> None:
2087 |         self.outputs_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
2088 |         required_width = self.outputs_table.columnWidth(0)
2089 |         self.outputs_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2089:80: E501 Line too long (101 > 79)
     |
2087 |         self.outputs_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)
2088 |         required_width = self.outputs_table.columnWidth(0)
2089 |         self.outputs_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^ E501
2090 |         if required_width > self.outputs_table.columnWidth(0):
2091 |             self.outputs_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2091:80: E501 Line too long (114 > 79)
     |
2089 |         self.outputs_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)
2090 |         if required_width > self.outputs_table.columnWidth(0):
2091 |             self.outputs_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.ResizeMode.ResizeToContents)
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
2092 |
2093 |     def selectedItemChanged(self, current, previous):
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2101:80: E501 Line too long (88 > 79)
     |
2099 |         if self.slider_value_changed_by_user:
2100 |             for i in self.outputs_table.selectedItems():
2101 |                 if i.column() != 1 and i.row() > len(main_window.separator.sources) * 3:
     |                                                                                ^^^^^^^^^ E501
2102 |                     i.setData(Qt.ItemDataRole.EditRole, str(value) + "%\u3000")
2103 |         else:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2106:80: E501 Line too long (100 > 79)
     |
2104 |             self.slider_value_changed_by_user = True
2105 |
2106 |     def mix(self, origin: "separator.torch.Tensor", separated: "dict[str, separator.torch.Tensor]"):
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^ E501
2107 |         for i in range(self.outputs_table.rowCount()):
2108 |             if self.outputs_table.getCheckState(i):
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2112:80: E501 Line too long (101 > 79)
     |
2110 |                 logging.info("Mixing stem %s" % stem)
2111 |                 out = origin.clone()
2112 |                 out *= float(self.outputs_table.item(i, 1).data(Qt.ItemDataRole.EditRole)[:-2]) / 100
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^ E501
2113 |                 for j in range(self.outputs_table.columnCount() - 2):
2114 |                     source = self.outputs_table.horizontalHeaderItem(j + 2).text()
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2114:80: E501 Line too long (82 > 79)
     |
2112 |                 out *= float(self.outputs_table.item(i, 1).data(Qt.ItemDataRole.EditRole)[:-2]) / 100
2113 |                 for j in range(self.outputs_table.columnCount() - 2):
2114 |                     source = self.outputs_table.horizontalHeaderItem(j + 2).text()
     |                                                                                ^^^ E501
2115 |                     out += (
2116 |                         separated[source]
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2117:80: E501 Line too long (102 > 79)
     |
2115 |                     out += (
2116 |                         separated[source]
2117 |                         * float(self.outputs_table.item(i, j + 2).data(Qt.ItemDataRole.EditRole)[:-2])
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^ E501
2118 |                         / 100
2119 |                     )
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2190:80: E501 Line too long (85 > 79)
     |
2188 |         self.current_audio_progressbar.setValue(int(value * 65536))
2189 |         item.setData(ProgressDelegate.ProgressRole, value)
2190 |         item.setData(Qt.ItemDataRole.UserRole, [shared.FileStatus.Separating, value])
     |                                                                                ^^^^^^ E501
2191 |         item.setData(ProgressDelegate.TextRole, "")
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2194:16: PLW0602 Using global for `main_window` but no assignment is done
     |
2193 |     def setModelProgress(self, value):
2194 |         global main_window
     |                ^^^^^^^^^^^ PLW0602
2195 |         if self.stop_now:
2196 |             self.stop_now = False
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2205:16: PLW0602 Using global for `main_window` but no assignment is done
     |
2204 |     def setAudioProgress(self, value, item: QTableWidgetItem):
2205 |         global main_window
     |                ^^^^^^^^^^^ PLW0602
2206 |         if self.stop_now:
2207 |             self.stop_now = False
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2215:9: PLR6301 Method `setStatusForItem` could be a function, class method, or static method
     |
2213 |         self.setAudioProgressSignal.emit(value, item)
2214 |
2215 |     def setStatusForItem(self, status, item: QTableWidgetItem):
     |         ^^^^^^^^^^^^^^^^ PLR6301
2216 |         item.setData(Qt.ItemDataRole.UserRole, [status])
2217 |         match status:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2227:80: E501 Line too long (84 > 79)
     |
2225 |             case shared.FileStatus.Finished:
2226 |                 item.setData(ProgressDelegate.TextRole, "Finished")
2227 |                 item.setData(Qt.ItemDataRole.UserRole, [shared.FileStatus.Finished])
     |                                                                                ^^^^^ E501
2228 |                 main_window.setStatusText.emit(
2229 |                     "Separation finished: %s" % main_window.file_queue.table.item(item.row(), 0).text()
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2229:80: E501 Line too long (103 > 79)
     |
2227 |                 item.setData(Qt.ItemDataRole.UserRole, [shared.FileStatus.Finished])
2228 |                 main_window.setStatusText.emit(
2229 |                     "Separation finished: %s" % main_window.file_queue.table.item(item.row(), 0).text()
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^ E501
2230 |                 )
2231 |             case shared.FileStatus.Failed:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2233:80: E501 Line too long (82 > 79)
     |
2231 |             case shared.FileStatus.Failed:
2232 |                 item.setData(ProgressDelegate.TextRole, "Failed")
2233 |                 item.setData(Qt.ItemDataRole.UserRole, [shared.FileStatus.Failed])
     |                                                                                ^^^ E501
2234 |                 item.setData(ProgressDelegate.ProgressRole, 0)
2235 |             case shared.FileStatus.Cancelled:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2237:80: E501 Line too long (85 > 79)
     |
2235 |             case shared.FileStatus.Cancelled:
2236 |                 item.setData(ProgressDelegate.TextRole, "Cancelled")
2237 |                 item.setData(Qt.ItemDataRole.UserRole, [shared.FileStatus.Cancelled])
     |                                                                                ^^^^^^ E501
2238 |                 item.setData(ProgressDelegate.ProgressRole, 0)
2239 |             case shared.FileStatus.Writing:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2241:80: E501 Line too long (83 > 79)
     |
2239 |             case shared.FileStatus.Writing:
2240 |                 item.setData(ProgressDelegate.TextRole, "Writing")
2241 |                 item.setData(Qt.ItemDataRole.UserRole, [shared.FileStatus.Writing])
     |                                                                                ^^^^ E501
2242 |         if self.stop_now:
2243 |             self.stop_now = False
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2244:26: PLR6201 Use a set literal when testing for membership
     |
2242 |         if self.stop_now:
2243 |             self.stop_now = False
2244 |         if status not in [shared.FileStatus.Writing]:
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR6201
2245 |             main_window.file_queue.queue_length -= 1
2246 |             main_window.updateQueueLength()
     |
     = help: Convert to `set`

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2252:16: PLW0602 Using global for `main_window` but no assignment is done
     |
2251 |     def startSeparation(self, no_warning=False):
2252 |         global main_window
     |                ^^^^^^^^^^^ PLW0602
2253 |         if not self.start_button.isEnabled():
2254 |             return
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2260:80: E501 Line too long (95 > 79)
     |
2258 |             separator.empty_cache()
2259 |             return
2260 |         if "{stem}" not in main_window.save_options.loc_input.currentText() and not no_warning:
     |                                                                                ^^^^^^^^^^^^^^^^ E501
2261 |             main_window.showWarning.emit("Warning", '"{stem}" not included in save location. May cause overwrite.')
2262 |         if main_window.save_options.encoder_group.checkedId() == 1:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2261:80: E501 Line too long (115 > 79)
     |
2259 |             return
2260 |         if "{stem}" not in main_window.save_options.loc_input.currentText() and not no_warning:
2261 |             main_window.showWarning.emit("Warning", '"{stem}" not included in save location. May cause overwrite.')
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
2262 |         if main_window.save_options.encoder_group.checkedId() == 1:
2263 |             if not shared.is_sublist(["-i", "-"], shared.try_parse_cmd(main_window.save_options.command.text())):
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2263:80: E501 Line too long (113 > 79)
     |
2261 |             main_window.showWarning.emit("Warning", '"{stem}" not included in save location. May cause overwrite.')
2262 |         if main_window.save_options.encoder_group.checkedId() == 1:
2263 |             if not shared.is_sublist(["-i", "-"], shared.try_parse_cmd(main_window.save_options.command.text())):
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
2264 |                 main_window.showError.emit(
2265 |                     "Invalid command",
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2266:80: E501 Line too long (103 > 79)
     |
2264 |                 main_window.showError.emit(
2265 |                     "Invalid command",
2266 |                     'Command must contain "-i -" for ffmpeg encoder. You are not saving output audio.',
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^ E501
2267 |                 )
2268 |                 return
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2269:80: E501 Line too long (108 > 79)
     |
2267 |                 )
2268 |                 return
2269 |             if "-v" not in shared.try_parse_cmd(main_window.save_options.command.text()) and not no_warning:
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
2270 |                 main_window.showWarning.emit(
2271 |                     "Warning",
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2272:80: E501 Line too long (117 > 79)
     |
2270 |                 main_window.showWarning.emit(
2271 |                     "Warning",
2272 |                     'Command does not contain "-v" for ffmpeg encoder. May output too much information to log file.',
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
2273 |                 )
2274 |         self.start_button.setEnabled(False)
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2275:80: E501 Line too long (89 > 79)
     |
2273 |                 )
2274 |         self.start_button.setEnabled(False)
2275 |         file = main_window.file_queue.table.item(index, 0).data(Qt.ItemDataRole.UserRole)
     |                                                                                ^^^^^^^^^^ E501
2276 |         item = main_window.file_queue.table.item(index, 1)
2277 |         item.setData(Qt.ItemDataRole.UserRole, [shared.FileStatus.Separating])
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2304:16: PLW0602 Using global for `main_window` but no assignment is done
     |
2303 |     def pauseResume(self):
2304 |         global main_window
     |                ^^^^^^^^^^^ PLW0602
2305 |         if self.not_paused.is_set():
2306 |             self.not_paused.clear()
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2318:80: E501 Line too long (91 > 79)
     |
2316 |     try:
2317 |         shared.InitializeFolder()
2318 |         log_filename = datetime.datetime.now().strftime("%Y%m%d_%H%M%S_demucs_gui_log.log")
     |                                                                                ^^^^^^^^^^^^ E501
2319 |         if shared.debug:
2320 |             log = sys.stderr
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2322:80: E501 Line too long (87 > 79)
     |
2320 |             log = sys.stderr
2321 |         else:
2322 |             log = open(str(shared.logfile / log_filename), mode="at", encoding="utf-8")
     |                                                                                ^^^^^^^^ E501
2323 |             sys.stderr = log
2324 |             sys.stdout = log
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2331:80: E501 Line too long (100 > 79)
     |
2329 |             logging.basicConfig(
2330 |                 handlers=[handler, syslog_handler],
2331 |                 format="%(asctime)s (%(filename)s) (Line %(lineno)d) [%(levelname)s] : %(message)s",
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^ E501
2332 |                 level=logging.DEBUG,
2333 |             )
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2337:80: E501 Line too long (100 > 79)
     |
2335 |             logging.basicConfig(
2336 |                 handlers=[handler],
2337 |                 format="%(asctime)s (%(filename)s) (Line %(lineno)d) [%(levelname)s] : %(message)s",
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^ E501
2338 |                 level=logging.DEBUG,
2339 |             )
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2345:80: E501 Line too long (84 > 79)
     |
2343 |         msgbox = QMessageBox()
2344 |         msgbox.setIcon(QMessageBox.Icon.Critical)
2345 |         msgbox.setText("Failed to initialize log file. \n" + traceback.format_exc())
     |                                                                                ^^^^^ E501
2346 |         msgbox.setWindowTitle("Demucs GUI start failed")
2347 |         msgbox.exec()
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2357:80: E501 Line too long (111 > 79)
     |
2355 |     logging.info("CPU count: %d" % psutil.cpu_count())
2356 |     logging.info(
2357 |         "System memory: %d (%s)" % (psutil.virtual_memory().total, shared.HSize(psutil.virtual_memory().total))
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
2358 |     )
2359 |     logging.info(
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2360:80: E501 Line too long (114 > 79)
     |
2358 |     )
2359 |     logging.info(
2360 |         "System free memory: %d (%s)" % (psutil.virtual_memory().free, shared.HSize(psutil.virtual_memory().free))
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
2361 |     )
2362 |     try:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2364:80: E501 Line too long (114 > 79)
     |
2362 |     try:
2363 |         logging.info(
2364 |             "System swap memory: %d (%s)" % (psutil.swap_memory().total, shared.HSize(psutil.swap_memory().total))
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
2365 |         )
2366 |     except RuntimeError:
     |

Demucs-Gui-1.3.2.1/GUI/GuiMain.py:2390:80: E501 Line too long (120 > 79)
     |
2388 |     logging.debug("Supported styles: %s" % ", ".join(QStyleFactory.keys()))
2389 |     style_setting = shared.GetSetting(
2390 |         "style", "windowsvista" if (default_style := app.style().objectName().lower()) == "windows11" else default_style
     |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
2391 |     )  # Currently Windows11 style is not stable enough
2392 |     if style_setting.lower() in [i.lower() for i in QStyleFactory.keys()]:
     |

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:52:9: PLC0414 Import alias does not rename original package
   |
50 |     )
51 |     from qt_table_checkbox.side6_table_checkbox import (
52 |         QTableWidgetWithCheckBox as QTableWidgetWithCheckBox,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0414
53 |     )
54 | else:
   |
   = help: Remove import alias

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:86:9: PLC0414 Import alias does not rename original package
   |
84 |     )
85 |     from qt_table_checkbox.qt6_table_checkbox import (
86 |         QTableWidgetWithCheckBox as QTableWidgetWithCheckBox,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0414
87 |     )
   |
   = help: Remove import alias

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:103:80: E501 Line too long (86 > 79)
    |
101 |         super().__init__(*args, **kwargs)
102 |
103 |         self.textalignment = Qt.AlignmentFlag.AlignLeft | Qt.TextFlag.TextWrapAnywhere
    |                                                                                ^^^^^^^ E501
104 |         self.isTextLabel = True
105 |         self.setSizePolicy(QSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))
    |

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:105:80: E501 Line too long (97 > 79)
    |
103 |         self.textalignment = Qt.AlignmentFlag.AlignLeft | Qt.TextFlag.TextWrapAnywhere
104 |         self.isTextLabel = True
105 |         self.setSizePolicy(QSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Minimum))
    |                                                                                ^^^^^^^^^^^^^^^^^^ E501
106 |         self._minimum_height = 0
    |

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:113:80: E501 Line too long (89 > 79)
    |
111 |         painter = QPainter(self)
112 |
113 |         self.style().drawPrimitive(QStyle.PrimitiveElement.PE_Widget, opt, painter, self)
    |                                                                                ^^^^^^^^^^ E501
114 |
115 |         self.style().drawItemText(painter, self.rect(), self.textalignment, self.palette(), True, self.text())
    |

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:115:80: E501 Line too long (110 > 79)
    |
113 |         self.style().drawPrimitive(QStyle.PrimitiveElement.PE_Widget, opt, painter, self)
114 |
115 |         self.style().drawItemText(painter, self.rect(), self.textalignment, self.palette(), True, self.text())
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
116 |
117 |     def setMinimumHeight(self, height):
    |

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:123:80: E501 Line too long (93 > 79)
    |
121 |         metrics = QFontMetrics(self.font())
122 |
123 |         return metrics.boundingRect(0, 0, width, 0, self.textalignment, self.text()).height()
    |                                                                                ^^^^^^^^^^^^^^ E501
124 |
125 |     def sizeHint(self):
    |

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:126:80: E501 Line too long (96 > 79)
    |
125 |     def sizeHint(self):
126 |         return QSize(self.width(), max(self._minimum_height, self.heightForWidth(self.width())))
    |                                                                                ^^^^^^^^^^^^^^^^^ E501
127 |
128 |     def minimumSizeHint(self):
    |

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:128:9: PLR6301 Method `minimumSizeHint` could be a function, class method, or static method
    |
126 |         return QSize(self.width(), max(self._minimum_height, self.heightForWidth(self.width())))
127 |
128 |     def minimumSizeHint(self):
    |         ^^^^^^^^^^^^^^^ PLR6301
129 |         return QSize(0, 0)
    |

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:141:80: E501 Line too long (99 > 79)
    |
139 |         super().__init__(*args, **kwargs)
140 |
141 |         self.setSizePolicy(QSizePolicy(QSizePolicy.Policy.Expanding, QSizePolicy.Policy.Preferred))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^ E501
142 |
143 |     def sizeHint(self):
    |

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:178:80: E501 Line too long (96 > 79)
    |
177 | class DelegateCombiner(QStyledItemDelegate):
178 |     """So that we can use multiple delegates in the same QTableView. Will also count editors."""
    |                                                                                ^^^^^^^^^^^^^^^^^ E501
179 |
180 |     def __init__(self, parent=None):
    |

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:186:80: E501 Line too long (115 > 79)
    |
185 |     def addDelegate(
186 |         self, delegate: QStyledItemDelegate, condition: Callable[[Union[QModelIndex, QPersistentModelIndex]], bool]
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
187 |     ):
188 |         self._delegates.append((delegate, condition))
    |

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:267:80: E501 Line too long (119 > 79)
    |
265 |     TextRole = Qt.ItemDataRole.UserRole + 0x1001
266 |
267 |     def paint(self, painter: QPainter, option: QStyleOptionViewItem, index: Union[QModelIndex, QPersistentModelIndex]):
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
268 |         progress = int(index.data(self.ProgressRole) * 10000)
269 |         opt = QStyleOptionProgressBar()
    |

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:274:80: E501 Line too long (88 > 79)
    |
272 |         opt.maximum = 10000  # type: ignore
273 |         opt.progress = progress  # type: ignore
274 |         opt.textAlignment = Qt.AlignmentFlag.AlignCenter | Qt.AlignmentFlag.AlignVCenter  # type: ignore
    |                                                                                ^^^^^^^^^ E501
275 |         if t := index.data(self.TextRole):
276 |             opt.text = t  # type: ignore
    |

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:280:80: E501 Line too long (97 > 79)
    |
278 |             opt.text = "%.1f%%" % (progress / 100)  # type: ignore
279 |         opt.textVisible = True  # type: ignore
280 |         if sys.platform == "darwin" and ((fusion := QStyleFactory.create("Fusion")) is not None):
    |                                                                                ^^^^^^^^^^^^^^^^^^ E501
281 |             fusion.drawControl(QStyle.ControlElement.CE_ProgressBar, opt, painter)
282 |         else:
    |

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:281:80: E501 Line too long (82 > 79)
    |
279 |         opt.textVisible = True  # type: ignore
280 |         if sys.platform == "darwin" and ((fusion := QStyleFactory.create("Fusion")) is not None):
281 |             fusion.drawControl(QStyle.ControlElement.CE_ProgressBar, opt, painter)
    |                                                                                ^^^ E501
282 |         else:
283 |             QApplication.style().drawControl(QStyle.ControlElement.CE_ProgressBar, opt, painter)
    |

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:283:80: E501 Line too long (96 > 79)
    |
281 |             fusion.drawControl(QStyle.ControlElement.CE_ProgressBar, opt, painter)
282 |         else:
283 |             QApplication.style().drawControl(QStyle.ControlElement.CE_ProgressBar, opt, painter)
    |                                                                                ^^^^^^^^^^^^^^^^^ E501
    |

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:306:9: PLR6301 Method `setEditorData` could be a function, class method, or static method
    |
304 |         return editor
305 |
306 |     def setEditorData(self, editor: QSpinBox, index):  # type: ignore[override]
    |         ^^^^^^^^^^^^^ PLR6301
307 |         value = index.model().data(index, Qt.ItemDataRole.EditRole)
308 |         value = int(value[:-2])
    |

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:311:9: PLR6301 Method `setModelData` could be a function, class method, or static method
    |
309 |         editor.setValue(value)
310 |
311 |     def setModelData(self, editor: QSpinBox, model, index):  # type: ignore[override]
    |         ^^^^^^^^^^^^ PLR6301
312 |         editor.interpretText()
313 |         value = editor.value()
    |

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:316:9: PLR6301 Method `updateEditorGeometry` could be a function, class method, or static method
    |
314 |         model.setData(index, str(value) + "%\u3000", Qt.ItemDataRole.EditRole)
315 |
316 |     def updateEditorGeometry(self, editor: QSpinBox, option, index):  # type: ignore[override]
    |         ^^^^^^^^^^^^^^^^^^^^ PLR6301
317 |         editor.setGeometry(option.rect)
    |

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:326:9: PLR6301 Method `createEditor` could be a function, class method, or static method
    |
324 |         super().__init__(parent)
325 |
326 |     def createEditor(self, parent, option, index):
    |         ^^^^^^^^^^^^ PLR6301
327 |         editor = QLineEdit(parent)
328 |         PathRe = QRegularExpression(r"^[^\\/:*?\"<>|]+$")
    |

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:334:9: PLR6301 Method `setEditorData` could be a function, class method, or static method
    |
332 |         return editor
333 |
334 |     def setEditorData(self, editor: QLineEdit, index):  # type: ignore[override]
    |         ^^^^^^^^^^^^^ PLR6301
335 |         value = str(index.model().data(index, Qt.ItemDataRole.EditRole))
336 |         editor.setText(value)
    |

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:338:9: PLR6301 Method `setModelData` could be a function, class method, or static method
    |
336 |         editor.setText(value)
337 |
338 |     def setModelData(self, editor: QLineEdit, model, index):  # type: ignore[override]
    |         ^^^^^^^^^^^^ PLR6301
339 |         value = editor.text()
340 |         model.setData(index, value, Qt.ItemDataRole.EditRole)
    |

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:342:9: PLR6301 Method `updateEditorGeometry` could be a function, class method, or static method
    |
340 |         model.setData(index, value, Qt.ItemDataRole.EditRole)
341 |
342 |     def updateEditorGeometry(self, editor: QLineEdit, option, index):  # type: ignore[override]
    |         ^^^^^^^^^^^^^^^^^^^^ PLR6301
343 |         editor.setGeometry(option.rect)
    |

Demucs-Gui-1.3.2.1/GUI/PySide6_modified.py:352:9: PLR6301 Method `createEditor` could be a function, class method, or static method
    |
350 |         super().__init__(parent)
351 |
352 |     def createEditor(self, parent, option, index):
    |         ^^^^^^^^^^^^ PLR6301
353 |         return None
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:36:80: E501 Line too long (89 > 79)
   |
34 |     os.environ["PATH"] += os.pathsep + str(shared.homeDir / "ffmpeg")
35 | else:
36 |     os.environ["PATH"] = str(shared.homeDir / "ffmpeg") + os.pathsep + os.environ["PATH"]
   |                                                                                ^^^^^^^^^^ E501
37 |
38 | logging.info("Soundfile version: %s" % soundfile.__version__)
   |

Demucs-Gui-1.3.2.1/GUI/audio.py:46:80: E501 Line too long (118 > 79)
   |
44 | ffmpeg_soxr_enabled = False
45 |
46 | format_filter = "libsndfile (%s)" % " ".join(f"*.{format}".lower() for format in soundfile.available_formats().keys())
   |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
47 | ffmpeg_protocols = set()
   |

Demucs-Gui-1.3.2.1/GUI/audio.py:75:16: PLW0603 Using the global statement to update `ffmpeg_available` is discouraged
   |
73 | def checkFFMpeg():
74 |     try:
75 |         global ffmpeg_available, format_filter, ffmpeg_protocols, ffmpeg_soxr_enabled
   |                ^^^^^^^^^^^^^^^^ PLW0603
76 |         p = shared.Popen(["ffmpeg", "-version"])
77 |         out, _ = p.communicate()
   |

Demucs-Gui-1.3.2.1/GUI/audio.py:75:34: PLW0603 Using the global statement to update `format_filter` is discouraged
   |
73 | def checkFFMpeg():
74 |     try:
75 |         global ffmpeg_available, format_filter, ffmpeg_protocols, ffmpeg_soxr_enabled
   |                                  ^^^^^^^^^^^^^ PLW0603
76 |         p = shared.Popen(["ffmpeg", "-version"])
77 |         out, _ = p.communicate()
   |

Demucs-Gui-1.3.2.1/GUI/audio.py:75:49: PLW0603 Using the global statement to update `ffmpeg_protocols` is discouraged
   |
73 | def checkFFMpeg():
74 |     try:
75 |         global ffmpeg_available, format_filter, ffmpeg_protocols, ffmpeg_soxr_enabled
   |                                                 ^^^^^^^^^^^^^^^^ PLW0603
76 |         p = shared.Popen(["ffmpeg", "-version"])
77 |         out, _ = p.communicate()
   |

Demucs-Gui-1.3.2.1/GUI/audio.py:75:67: PLW0603 Using the global statement to update `ffmpeg_soxr_enabled` is discouraged
   |
73 | def checkFFMpeg():
74 |     try:
75 |         global ffmpeg_available, format_filter, ffmpeg_protocols, ffmpeg_soxr_enabled
   |                                                                   ^^^^^^^^^^^^^^^^^^^ PLW0603
76 |         p = shared.Popen(["ffmpeg", "-version"])
77 |         out, _ = p.communicate()
   |

Demucs-Gui-1.3.2.1/GUI/audio.py:75:80: E501 Line too long (85 > 79)
   |
73 | def checkFFMpeg():
74 |     try:
75 |         global ffmpeg_available, format_filter, ffmpeg_protocols, ffmpeg_soxr_enabled
   |                                                                                ^^^^^^ E501
76 |         p = shared.Popen(["ffmpeg", "-version"])
77 |         out, _ = p.communicate()
   |

Demucs-Gui-1.3.2.1/GUI/audio.py:109:80: E501 Line too long (82 > 79)
    |
107 |             ffprobe_protocols.add(line.strip())
108 |         ffmpeg_protocols &= ffprobe_protocols
109 |         logging.info("FFmpeg protocols: %s" % ", ".join(sorted(ffmpeg_protocols)))
    |                                                                                ^^^ E501
110 |         ffmpeg_available = True
111 |         format_filter += ";;All types (*.*)"
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:118:80: E501 Line too long (95 > 79)
    |
118 | def read_audio(file, target_sr=None, update_status: tp.Callable[[str], None] = lambda _: None):
    |                                                                                ^^^^^^^^^^^^^^^^ E501
119 |     if not isinstance(file, pathlib.Path):
120 |         logging.info("Not local path, skipping soundfile reader")
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:126:80: E501 Line too long (86 > 79)
    |
124 |             return read_audio_soundfile(file, target_sr, update_status)
125 |         except Exception:
126 |             logging.error("Failed to read with soundfile:\n" + traceback.format_exc())
    |                                                                                ^^^^^^^ E501
127 |     logging.debug("Reading audio with ffmpeg: %s" % file)
128 |     try:
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:134:80: E501 Line too long (105 > 79)
    |
134 | def read_audio_soundfile(file, target_sr=None, update_status: tp.Callable[[str], None] = lambda _: None):
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
135 |     if callable(update_status):
136 |         update_status(f"Reading audio: {file.name if hasattr(file, 'name') else file}")
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:136:80: E501 Line too long (87 > 79)
    |
134 | def read_audio_soundfile(file, target_sr=None, update_status: tp.Callable[[str], None] = lambda _: None):
135 |     if callable(update_status):
136 |         update_status(f"Reading audio: {file.name if hasattr(file, 'name') else file}")
    |                                                                                ^^^^^^^^ E501
137 |     audio, sr = soundfile.read(file, dtype="float32", always_2d=True)
138 |     logging.info(f"Read audio {file}: samplerate={sr} shape={audio.shape}")
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:141:80: E501 Line too long (95 > 79)
    |
139 |     assert audio.shape[0] > 0, "Audio is empty"
140 |     if target_sr is not None and sr != target_sr:
141 |         logging.info(f"Samplerate {sr} doesn't match target {target_sr}, resampling with SoXR")
    |                                                                                ^^^^^^^^^^^^^^^^ E501
142 |         if callable(update_status):
143 |             update_status("Resampling audio")
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:149:80: E501 Line too long (116 > 79)
    |
147 |         tags_get = tinytag.TinyTag.get(file).as_dict()
148 |         tags_get.update(tags_get["extra"] or {})
149 |         for i in ["audio_offset", "duration", "filesize", "bitrate", "channels", "samplerate", "extra", "bitdepth"]:
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
150 |             tags_get.pop(i, None)
151 |         tags.update(
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:153:80: E501 Line too long (84 > 79)
    |
151 |         tags.update(
152 |             {
153 |                 str(k).lower(): (str(v) if not isinstance(v, float) else "%.6f" % v)
    |                                                                                ^^^^^ E501
154 |                 for k, v in tags_get.items()
155 |                 if isinstance(v, (str, int, float))
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:160:80: E501 Line too long (101 > 79)
    |
158 |     except Exception:
159 |         if not ffmpeg_available:
160 |             logging.error("Failed to read tags with tinytag, FFmpeg is not available, skipping tags")
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^ E501
161 |             return audio, tags
162 |         logging.error("Failed to read tags with tinytag, retrying with ffmpeg")
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:164:80: E501 Line too long (109 > 79)
    |
162 |         logging.error("Failed to read tags with tinytag, retrying with ffmpeg")
163 |         p = shared.Popen(
164 |             ["ffprobe", "-v", "level+warning", "-of", "json=c=1", "-show_streams", "-show_format", str(file)]
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
165 |         )
166 |         logging.debug("ffprobe command: %s" % shlex.join(p.args))
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:169:80: E501 Line too long (86 > 79)
    |
167 |         metadata_str = p.communicate()[0].decode(errors="replace")
168 |         if p.returncode != 0:
169 |             logging.error("FFprobe failed with code %d, skipping tags" % p.returncode)
    |                                                                                ^^^^^^^ E501
170 |             return audio, tags
171 |         logging.info("ffprobe output:\n" + metadata_str)
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:180:80: E501 Line too long (82 > 79)
    |
178 |                 {
179 |                     str(k).lower(): (str(v) if v is not None else "")
180 |                     for k, v in metadata.get("format", {}).get("tags", {}).items()
    |                                                                                ^^^ E501
181 |                 }
182 |             )
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:185:80: E501 Line too long (86 > 79)
    |
183 |             tags.update(
184 |                 {
185 |                     str(k).lower(): str(v) if not isinstance(v, float) else "%.6f" % v
    |                                                                                ^^^^^^^ E501
186 |                     for k, v in metadata.get("streams", [{}])[0].get("tags", {}).items()
187 |                     if isinstance(v, (str, int, float))
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:186:80: E501 Line too long (88 > 79)
    |
184 |                 {
185 |                     str(k).lower(): str(v) if not isinstance(v, float) else "%.6f" % v
186 |                     for k, v in metadata.get("streams", [{}])[0].get("tags", {}).items()
    |                                                                                ^^^^^^^^^ E501
187 |                     if isinstance(v, (str, int, float))
188 |                 }
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:194:80: E501 Line too long (102 > 79)
    |
194 | def read_audio_ffmpeg(file, target_sr=None, update_status: tp.Callable[[str], None] = lambda _: None):
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^ E501
195 |     if not ffmpeg_available:
196 |         raise NotImplementedError("FFmpeg is not available")
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:198:80: E501 Line too long (95 > 79)
    |
196 |         raise NotImplementedError("FFmpeg is not available")
197 |     if callable(update_status):
198 |         update_status(f"Reading file metadata: {file.name if hasattr(file, 'name') else file}")
    |                                                                                ^^^^^^^^^^^^^^^^ E501
199 |     p = shared.Popen(["ffprobe", "-v", "level+warning", "-of", "json=c=1", "-show_streams", "-show_format", str(file)])
200 |     logging.debug("ffprobe command: %s" % shlex.join(p.args))
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:199:80: E501 Line too long (119 > 79)
    |
197 |     if callable(update_status):
198 |         update_status(f"Reading file metadata: {file.name if hasattr(file, 'name') else file}")
199 |     p = shared.Popen(["ffprobe", "-v", "level+warning", "-of", "json=c=1", "-show_streams", "-show_format", str(file)])
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
200 |     logging.debug("ffprobe command: %s" % shlex.join(p.args))
201 |     metadata_str = p.communicate()[0].decode(errors="replace")
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:218:80: E501 Line too long (82 > 79)
    |
216 |         tags.update(
217 |             {
218 |                 str(k).lower(): str(v) if not isinstance(v, float) else "%.6f" % v
    |                                                                                ^^^ E501
219 |                 for k, v in metadata.get("streams", [{}])[0].get("tags", {}).items()
220 |                 if isinstance(v, (str, int, float))
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:219:80: E501 Line too long (84 > 79)
    |
217 |             {
218 |                 str(k).lower(): str(v) if not isinstance(v, float) else "%.6f" % v
219 |                 for k, v in metadata.get("streams", [{}])[0].get("tags", {}).items()
    |                                                                                ^^^^^ E501
220 |                 if isinstance(v, (str, int, float))
221 |             }
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:224:80: E501 Line too long (87 > 79)
    |
222 |         )
223 |     if callable(update_status):
224 |         update_status(f"Reading audio: {file.name if hasattr(file, 'name') else file}")
    |                                                                                ^^^^^^^^ E501
225 |     command = ["ffmpeg", "-v", "level+warning", "-i", str(file), "-map", "a:0"]
226 |     if target_sr is not None:
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:237:80: E501 Line too long (81 > 79)
    |
235 |     del ffmpeg_output
236 |     if ffmpeg_log:
237 |         logging.warning("ffmpeg output:\n" + ffmpeg_log.decode(errors="replace"))
    |                                                                                ^^ E501
238 |     assert p.returncode == 0, "FFmpeg failed with code %d" % p.returncode
239 |     wav_buffer.seek(0)
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:247:80: E501 Line too long (107 > 79)
    |
247 | def save_audio_sndfile(file, audio, smp_fmt, sr, update_status: tp.Callable[[str], None] = lambda _: None):
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
248 |     if callable(update_status):
249 |         update_status(f"Saving audio: {file.name}")
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:251:80: E501 Line too long (81 > 79)
    |
249 |         update_status(f"Saving audio: {file.name}")
250 |     try:
251 |         soundfile.write(file, audio.transpose(0, 1).numpy(), sr, subtype=smp_fmt)
    |                                                                                ^^ E501
252 |     except soundfile.LibsndfileError:
253 |         logging.error(f"Failed to write file {file}:\n" + traceback.format_exc())
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:253:80: E501 Line too long (81 > 79)
    |
251 |         soundfile.write(file, audio.transpose(0, 1).numpy(), sr, subtype=smp_fmt)
252 |     except soundfile.LibsndfileError:
253 |         logging.error(f"Failed to write file {file}:\n" + traceback.format_exc())
    |                                                                                ^^ E501
254 |         return False
255 |     logging.info(f"Saved audio {file}: shape={audio.shape}")
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:259:80: E501 Line too long (100 > 79)
    |
259 | def save_audio_ffmpeg(command, audio, sr, update_status: tp.Callable[[str], None] = lambda _: None):
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^ E501
260 |     if not ffmpeg_available:
261 |         raise NotImplementedError("FFmpeg is not available")
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:268:80: E501 Line too long (94 > 79)
    |
266 |         logging.debug(f"ffmpeg command: {command}")
267 |         wav = io.BytesIO()
268 |         soundfile.write(wav, audio.transpose(0, 1).numpy(), sr, format="WAV", subtype="FLOAT")
    |                                                                                ^^^^^^^^^^^^^^^ E501
269 |         wav.seek(0)
270 |         ffmpeg_output, ffmpeg_log = p.communicate(wav.read())
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:272:80: E501 Line too long (81 > 79)
    |
270 |         ffmpeg_output, ffmpeg_log = p.communicate(wav.read())
271 |     except Exception:
272 |         logging.error("Failed to run ffmpeg command:\n" + traceback.format_exc())
    |                                                                                ^^ E501
273 |         return False
274 |     del wav, ffmpeg_output
    |

Demucs-Gui-1.3.2.1/GUI/audio.py:276:80: E501 Line too long (81 > 79)
    |
274 |     del wav, ffmpeg_output
275 |     if ffmpeg_log:
276 |         logging.warning("ffmpeg output:\n" + ffmpeg_log.decode(errors="replace"))
    |                                                                                ^^ E501
277 |     if p.returncode != 0:
278 |         logging.error(f"FFmpeg failed with code {p.returncode}")
    |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:22:1: E402 Module level import not at top of file
   |
20 | assert sys.platform == "win32"
21 |
22 | import json
   | ^^^^^^^^^^^ E402
23 | import logging
24 | import re
   |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:23:1: E402 Module level import not at top of file
   |
22 | import json
23 | import logging
   | ^^^^^^^^^^^^^^ E402
24 | import re
   |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:24:1: E402 Module level import not at top of file
   |
22 | import json
23 | import logging
24 | import re
   | ^^^^^^^^^ E402
25 |
26 | import more_itertools
   |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:26:1: E402 Module level import not at top of file
   |
24 | import re
25 |
26 | import more_itertools
   | ^^^^^^^^^^^^^^^^^^^^^ E402
27 | import shared
   |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:27:1: E402 Module level import not at top of file
   |
26 | import more_itertools
27 | import shared
   | ^^^^^^^^^^^^^ E402
28 |
29 | # These mappings are generated with ocloc.exe, I ran from 0x0000 to 0xFFFF and found all supported devices
   |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:29:80: E501 Line too long (106 > 79)
   |
27 | import shared
28 |
29 | # These mappings are generated with ocloc.exe, I ran from 0x0000 to 0xFFFF and found all supported devices
   |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
30 | PCI_Mappings = {
31 |     "2.1.10+xpu": {
   |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:32:80: E501 Line too long (83 > 79)
   |
30 | PCI_Mappings = {
31 |     "2.1.10+xpu": {
32 |         "12.0.0": {"9A40", "9A49", "9A59", "9A60", "9A68", "9A70", "9A78", "FF20"},
   |                                                                                ^^^^ E501
33 |         "12.1.0": {"4C80", "4C8A", "4C8B", "4C8C", "4C90", "4C9A"},
34 |         "12.2.0": {
   |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:78:80: E501 Line too long (116 > 79)
   |
76 |         "12.4.0": {"46D0", "46D1", "46D2"},
77 |         "12.10.0": {"4905", "4906", "4907", "4908"},
78 |         "12.55.8": {"4F80", "4F81", "4F82", "4F83", "4F84", "5690", "5691", "5692", "56A0", "56A1", "56A2", "56C0"},
   |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
79 |         "12.56.5": {"4F87", "4F88", "5693", "5694", "5695", "56A5", "56A6", "56B0", "56B1", "56C1"},
80 |         "12.57.0": {"4F85", "4F86", "5696", "5697", "56A3", "56A4", "56B2", "56B3"},
   |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:79:80: E501 Line too long (100 > 79)
   |
77 |         "12.10.0": {"4905", "4906", "4907", "4908"},
78 |         "12.55.8": {"4F80", "4F81", "4F82", "4F83", "4F84", "5690", "5691", "5692", "56A0", "56A1", "56A2", "56C0"},
79 |         "12.56.5": {"4F87", "4F88", "5693", "5694", "5695", "56A5", "56A6", "56B0", "56B1", "56C1"},
   |                                                                                ^^^^^^^^^^^^^^^^^^^^^ E501
80 |         "12.57.0": {"4F85", "4F86", "5696", "5697", "56A3", "56A4", "56B2", "56B3"},
81 |         "12.58.0": {"4F8C", "5698", "5699", "569A", "56A7", "56A8"},
   |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:80:80: E501 Line too long (84 > 79)
   |
78 |         "12.55.8": {"4F80", "4F81", "4F82", "4F83", "4F84", "5690", "5691", "5692", "56A0", "56A1", "56A2", "56C0"},
79 |         "12.56.5": {"4F87", "4F88", "5693", "5694", "5695", "56A5", "56A6", "56B0", "56B1", "56C1"},
80 |         "12.57.0": {"4F85", "4F86", "5696", "5697", "56A3", "56A4", "56B2", "56B3"},
   |                                                                                ^^^^^ E501
81 |         "12.58.0": {"4F8C", "5698", "5699", "569A", "56A7", "56A8"},
82 |         "12.59.0": {"4F89", "56A9", "56AA"},
   |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:85:80: E501 Line too long (83 > 79)
   |
83 |     },
84 |     "2.1.30+xpu": {
85 |         "12.0.0": {"9A40", "9A49", "9A59", "9A60", "9A68", "9A70", "9A78", "FF20"},
   |                                                                                ^^^^ E501
86 |         "12.1.0": {"4C80", "4C8A", "4C8B", "4C8C", "4C90", "4C9A"},
87 |         "12.2.0": {
   |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:131:80: E501 Line too long (116 > 79)
    |
129 |         "12.4.0": {"46D0", "46D1", "46D2"},
130 |         "12.10.0": {"4905", "4906", "4907", "4908"},
131 |         "12.55.8": {"4F80", "4F81", "4F82", "4F83", "4F84", "5690", "5691", "5692", "56A0", "56A1", "56A2", "56C0"},
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
132 |         "12.56.5": {
133 |             "4F87",
    |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:148:80: E501 Line too long (84 > 79)
    |
146 |             "56C1",
147 |         },
148 |         "12.57.0": {"4F85", "4F86", "5696", "5697", "56A3", "56A4", "56B2", "56B3"},
    |                                                                                ^^^^^ E501
149 |         "12.59.0": {"4F89", "56A9", "56AA"},
150 |         "12.58.0": {"4F8C", "5698", "5699", "569A", "56A7", "56A8"},
    |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:155:80: E501 Line too long (83 > 79)
    |
153 |     },
154 |     "2.1.40+xpu": {
155 |         "12.0.0": {"9A40", "9A49", "9A59", "9A60", "9A68", "9A70", "9A78", "FF20"},
    |                                                                                ^^^^ E501
156 |         "12.1.0": {"4C80", "4C8A", "4C8B", "4C8C", "4C90", "4C9A"},
157 |         "12.2.0": {
    |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:240:80: E501 Line too long (84 > 79)
    |
238 |             "56C1",
239 |         },
240 |         "12.57.0": {"4F85", "4F86", "5696", "5697", "56A3", "56A4", "56B2", "56B3"},
    |                                                                                ^^^^^ E501
241 |         "12.60.7": {"0BD0", "0B69", "0B6E", "0BD5", "0BD6", "0BD7", "0BD8", "0BD9", "0BDA", "0BDB"},
242 |         "12.61.7": {"0BD4"},
    |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:241:80: E501 Line too long (100 > 79)
    |
239 |         },
240 |         "12.57.0": {"4F85", "4F86", "5696", "5697", "56A3", "56A4", "56B2", "56B3"},
241 |         "12.60.7": {"0BD0", "0B69", "0B6E", "0BD5", "0BD6", "0BD7", "0BD8", "0BD9", "0BDA", "0BDB"},
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^ E501
242 |         "12.61.7": {"0BD4"},
243 |         "12.70.4": {"7D40", "7D41", "7D45", "7D60", "7D67"},
    |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:333:80: E501 Line too long (84 > 79)
    |
331 |             "56C1",
332 |         },
333 |         "12.57.0": {"4F85", "4F86", "5696", "5697", "56A3", "56A4", "56B2", "56B3"},
    |                                                                                ^^^^^ E501
334 |         "12.60.1": {"0BD0"},
335 |         "12.60.7": {"0B69", "0B6E", "0BD5", "0BD6", "0BD7", "0BD8", "0BD9", "0BDA", "0BDB"},
    |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:335:80: E501 Line too long (92 > 79)
    |
333 |         "12.57.0": {"4F85", "4F86", "5696", "5697", "56A3", "56A4", "56B2", "56B3"},
334 |         "12.60.1": {"0BD0"},
335 |         "12.60.7": {"0B69", "0B6E", "0BD5", "0BD6", "0BD7", "0BD8", "0BD9", "0BDA", "0BDB"},
    |                                                                                ^^^^^^^^^^^^^ E501
336 |         "12.61.7": {"0BD4"},
337 |         "12.70.4": {"7D40", "7D41", "7D45", "7D67"},
    |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:340:80: E501 Line too long (99 > 79)
    |
338 |         "12.71.4": {"7D55", "7DD5"},
339 |         "12.74.4": {"7D51", "7DD1", "B640"},
340 |         "20.1.0": {"E202", "E20B", "E20C", "E20D", "E210", "E212", "E214", "E215", "E216", "E217"},
    |                                                                                ^^^^^^^^^^^^^^^^^^^^ E501
341 |         "20.2.0": {"E220", "E221", "E222", "E223"},
342 |         "20.4.4": {"6420", "64A0", "64B0"},
    |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:409:80: E501 Line too long (83 > 79)
    |
407 |                 "RemoteSigned",
408 |                 "-Command",
409 |                 "[System.Console]::OutputEncoding = [System.Text.Encoding]::UTF8; "
    |                                                                                ^^^^ E501
410 |                 "try { $gpu = Get-WmiObject -Class Win32_VideoController } "
411 |                 "catch { $gpu = Get-CimInstance -ClassName Win32_VideoController }; "
    |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:411:80: E501 Line too long (85 > 79)
    |
409 |                 "[System.Console]::OutputEncoding = [System.Text.Encoding]::UTF8; "
410 |                 "try { $gpu = Get-WmiObject -Class Win32_VideoController } "
411 |                 "catch { $gpu = Get-CimInstance -ClassName Win32_VideoController }; "
    |                                                                                ^^^^^^ E501
412 |                 "foreach ($i in $gpu) { $i.Name; $i.PNPDeviceID; $i.DriverVersion }",
413 |             ]
    |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:412:80: E501 Line too long (85 > 79)
    |
410 |                 "try { $gpu = Get-WmiObject -Class Win32_VideoController } "
411 |                 "catch { $gpu = Get-CimInstance -ClassName Win32_VideoController }; "
412 |                 "foreach ($i in $gpu) { $i.Name; $i.PNPDeviceID; $i.DriverVersion }",
    |                                                                                ^^^^^^ E501
413 |             ]
414 |         )
    |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:429:80: E501 Line too long (83 > 79)
    |
427 |                 "RemoteSigned",
428 |                 "-Command",
429 |                 "[System.Console]::OutputEncoding = [System.Text.Encoding]::UTF8; "
    |                                                                                ^^^^ E501
430 |                 "try { $gpu = Get-WmiObject -Class Win32_VideoController } "
431 |                 "catch { $gpu = Get-CimInstance -ClassName Win32_VideoController }; "
    |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:431:80: E501 Line too long (85 > 79)
    |
429 |                 "[System.Console]::OutputEncoding = [System.Text.Encoding]::UTF8; "
430 |                 "try { $gpu = Get-WmiObject -Class Win32_VideoController } "
431 |                 "catch { $gpu = Get-CimInstance -ClassName Win32_VideoController }; "
    |                                                                                ^^^^^^ E501
432 |                 "foreach ($i in $gpu) { $i.Name; $i.PNPDeviceID; $i.DriverVersion }",
433 |             ]
    |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:432:80: E501 Line too long (85 > 79)
    |
430 |                 "try { $gpu = Get-WmiObject -Class Win32_VideoController } "
431 |                 "catch { $gpu = Get-CimInstance -ClassName Win32_VideoController }; "
432 |                 "foreach ($i in $gpu) { $i.Name; $i.PNPDeviceID; $i.DriverVersion }",
    |                                                                                ^^^^^^ E501
433 |             ]
434 |         )
    |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:442:80: E501 Line too long (119 > 79)
    |
440 |     logging.error("Failed to get GPU information. Output:")
441 |     logging.error(json.dumps(out_lines, indent=4))
442 | parse_re = re.compile(r"[Pp][Cc][Ii]\\[Vv][Ee][Nn]_(?P<vendor>[0-9A-Fa-f]{4})&[Dd][Ee][Vv]_(?P<device>[0-9A-Fa-f]{4})")
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
443 | for gpu in more_itertools.sliced(out_lines, 3):
444 |     m = parse_re.match(gpu[1])
    |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:447:80: E501 Line too long (108 > 79)
    |
445 |     if m is not None:
446 |         gpus.append((gpu[0], m["vendor"].upper(), m["device"].upper(), gpu[2]))
447 |         logging.info("Found GPU: %s (%s:%s) Driver version %s" % (gpu[0], m["vendor"], m["device"], gpu[2]))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
448 |         if m["vendor"] == "8086":
449 |             has_Intel = True
    |

Demucs-Gui-1.3.2.1/GUI/find_device_win.py:469:80: E501 Line too long (99 > 79)
    |
467 |     if ipex_version not in AOT_link_fmt:
468 |         return None
469 |     return AOT_link_fmt[ipex_version].format(file=AOT_links.get(ipex_version, {}).get(version, ""))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^ E501
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:52:5: PLR0912 Too many branches (18 > 12)
   |
51 | @shared.thread_wrapper(daemon=True)
52 | def starter(update_status: tp.Callable[[str], None], finish: tp.Callable[[float, str], None]):
   |     ^^^^^^^ PLR0912
53 |     try:
54 |         global torch, demucs, audio, has_Intel, Intel_JIT_only, np
   |

Demucs-Gui-1.3.2.1/GUI/separator.py:52:5: PLR0915 Too many statements (61 > 50)
   |
51 | @shared.thread_wrapper(daemon=True)
52 | def starter(update_status: tp.Callable[[str], None], finish: tp.Callable[[float, str], None]):
   |     ^^^^^^^ PLR0915
53 |     try:
54 |         global torch, demucs, audio, has_Intel, Intel_JIT_only, np
   |

Demucs-Gui-1.3.2.1/GUI/separator.py:52:80: E501 Line too long (94 > 79)
   |
51 | @shared.thread_wrapper(daemon=True)
52 | def starter(update_status: tp.Callable[[str], None], finish: tp.Callable[[float, str], None]):
   |                                                                                ^^^^^^^^^^^^^^^ E501
53 |     try:
54 |         global torch, demucs, audio, has_Intel, Intel_JIT_only, np
   |

Demucs-Gui-1.3.2.1/GUI/separator.py:53:5: PLR1702 Too many nested blocks (6 > 5)
    |
 51 |   @shared.thread_wrapper(daemon=True)
 52 |   def starter(update_status: tp.Callable[[str], None], finish: tp.Callable[[float, str], None]):
 53 | /     try:
 54 | |         global torch, demucs, audio, has_Intel, Intel_JIT_only, np
 55 | |         import numpy as np
 56 | |         import torch
 57 | |
 58 | |         for i in range(5):
 59 | |             try:
 60 | |                 global ipex
 61 | |                 ipex = False
 62 | |                 import intel_extension_for_pytorch as ipex  # type: ignore
 63 | |
 64 | |                 logging.info("Intel Extension for PyTorch version: " + ipex.__version__)
 65 | |             except ModuleNotFoundError:
 66 | |                 logging.info("Intel Extension for PyTorch is not installed")
 67 | |                 break
 68 | |             except Exception:
 69 | |                 logging.error(
 70 | |                     "Failed to load Intel Extension for PyTorch for the %d time:\n" % (i + 1) + traceback.format_exc()
 71 | |                 )
 72 | |             else:
 73 | |                 if torch.xpu.is_available():
 74 | |                     has_Intel = True
 75 | |                     if sys.platform == "win32":
 76 | |                         dll_size = os.path.getsize(ipex.dlls[0])
 77 | |                         logging.info("IPEX extension dll path: %s" % ipex.dlls[0])
 78 | |                         logging.info("IPEX extension dll size: %d" % dll_size)
 79 | |                         if dll_size < 1073741824:
 80 | |                             logging.info("IPEX extension dll is not large enough, probably JIT only (No AOT)")
 81 | |                             Intel_JIT_only = True
 82 | |                     break
 83 | |         import audio
 84 | |         import demucs.api
 85 | |         import demucs.apply
 86 | |
 87 | |         update_status("Successfully loaded modules")
 88 | |         logging.info("Demucs version: " + demucs.__version__)
 89 | |         logging.info("PyTorch version: " + torch.__version__)
 90 | |         if sys.platform == "darwin":
 91 | |             if torch.backends.mps.is_built() and torch.backends.mps.is_available():  # type: ignore
 92 | |                 update_status("MPS backend is available")
 93 | |             else:
 94 | |                 update_status("MPS backend is not available")
 95 | |         else:
 96 | |             backends = []
 97 | |             if torch.backends.cuda.is_built() and torch.cuda.is_available():  # type: ignore
 98 | |                 backends.append("CUDA")
 99 | |                 logging.info(
100 | |                     "CUDA Info: "
101 | |                     + "    \n".join(str(torch.cuda.get_device_properties(i)) for i in range(torch.cuda.device_count()))
102 | |                 )
103 | |                 logging.info("CUDA Arch list: " + str(torch.cuda.get_arch_list()))
104 | |             if ipex is not None and hasattr(torch, "xpu") and torch.xpu.is_available():
105 | |                 backends.append("Intel MKL")
106 | |                 logging.info(
107 | |                     "Intel MKL Info: "
108 | |                     + "    \n".join(str(torch.xpu.get_device_properties(i)) for i in range(torch.xpu.device_count()))
109 | |                 )
110 | |             if backends:
111 | |                 update_status(", ".join(backends) + " backend is available")
112 | |             else:
113 | |                 update_status("No accelerator backend is available")
114 | |         time.sleep(1)
115 | |         ffmpeg_version = audio.checkFFMpeg()
116 | |         if not ffmpeg_version:
117 | |             update_status("FFMpeg is not available")
118 | |         else:
119 | |             update_status("FFMpeg is available:\n" + ffmpeg_version)
120 | |         time.sleep(1)
121 | |         finish(2, "")
122 | |     except Exception:
123 | |         logging.error("Failed to start separator:\n" + traceback.format_exc())
124 | |         finish(-1, traceback.format_exc())
    | |__________________________________________^ PLR1702
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:54:16: PLW0603 Using the global statement to update `torch` is discouraged
   |
52 | def starter(update_status: tp.Callable[[str], None], finish: tp.Callable[[float, str], None]):
53 |     try:
54 |         global torch, demucs, audio, has_Intel, Intel_JIT_only, np
   |                ^^^^^ PLW0603
55 |         import numpy as np
56 |         import torch
   |

Demucs-Gui-1.3.2.1/GUI/separator.py:54:31: PLW0603 Using the global statement to update `audio` is discouraged
   |
52 | def starter(update_status: tp.Callable[[str], None], finish: tp.Callable[[float, str], None]):
53 |     try:
54 |         global torch, demucs, audio, has_Intel, Intel_JIT_only, np
   |                               ^^^^^ PLW0603
55 |         import numpy as np
56 |         import torch
   |

Demucs-Gui-1.3.2.1/GUI/separator.py:54:38: PLW0603 Using the global statement to update `has_Intel` is discouraged
   |
52 | def starter(update_status: tp.Callable[[str], None], finish: tp.Callable[[float, str], None]):
53 |     try:
54 |         global torch, demucs, audio, has_Intel, Intel_JIT_only, np
   |                                      ^^^^^^^^^ PLW0603
55 |         import numpy as np
56 |         import torch
   |

Demucs-Gui-1.3.2.1/GUI/separator.py:54:49: PLW0603 Using the global statement to update `Intel_JIT_only` is discouraged
   |
52 | def starter(update_status: tp.Callable[[str], None], finish: tp.Callable[[float, str], None]):
53 |     try:
54 |         global torch, demucs, audio, has_Intel, Intel_JIT_only, np
   |                                                 ^^^^^^^^^^^^^^ PLW0603
55 |         import numpy as np
56 |         import torch
   |

Demucs-Gui-1.3.2.1/GUI/separator.py:54:65: PLW0603 Using the global statement to update `np` is discouraged
   |
52 | def starter(update_status: tp.Callable[[str], None], finish: tp.Callable[[float, str], None]):
53 |     try:
54 |         global torch, demucs, audio, has_Intel, Intel_JIT_only, np
   |                                                                 ^^ PLW0603
55 |         import numpy as np
56 |         import torch
   |

Demucs-Gui-1.3.2.1/GUI/separator.py:55:9: PLC0415 `import` should be at the top-level of a file
   |
53 |     try:
54 |         global torch, demucs, audio, has_Intel, Intel_JIT_only, np
55 |         import numpy as np
   |         ^^^^^^^^^^^^^^^^^^ PLC0415
56 |         import torch
   |

Demucs-Gui-1.3.2.1/GUI/separator.py:56:9: PLC0415 `import` should be at the top-level of a file
   |
54 |         global torch, demucs, audio, has_Intel, Intel_JIT_only, np
55 |         import numpy as np
56 |         import torch
   |         ^^^^^^^^^^^^ PLC0415
57 |
58 |         for i in range(5):
   |

Demucs-Gui-1.3.2.1/GUI/separator.py:60:24: PLW0603 Using the global statement to update `ipex` is discouraged
   |
58 |         for i in range(5):
59 |             try:
60 |                 global ipex
   |                        ^^^^ PLW0603
61 |                 ipex = False
62 |                 import intel_extension_for_pytorch as ipex  # type: ignore
   |

Demucs-Gui-1.3.2.1/GUI/separator.py:60:24: PLW0603 Using the global statement to update `ipex` is discouraged
   |
58 |         for i in range(5):
59 |             try:
60 |                 global ipex
   |                        ^^^^ PLW0603
61 |                 ipex = False
62 |                 import intel_extension_for_pytorch as ipex  # type: ignore
   |

Demucs-Gui-1.3.2.1/GUI/separator.py:62:17: PLC0415 `import` should be at the top-level of a file
   |
60 |                 global ipex
61 |                 ipex = False
62 |                 import intel_extension_for_pytorch as ipex  # type: ignore
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLC0415
63 |
64 |                 logging.info("Intel Extension for PyTorch version: " + ipex.__version__)
   |

Demucs-Gui-1.3.2.1/GUI/separator.py:62:55: F811 Redefinition of unused `ipex` from line 61
   |
60 |                 global ipex
61 |                 ipex = False
62 |                 import intel_extension_for_pytorch as ipex  # type: ignore
   |                                                       ^^^^ F811
63 |
64 |                 logging.info("Intel Extension for PyTorch version: " + ipex.__version__)
   |
   = help: Remove definition: `ipex`

Demucs-Gui-1.3.2.1/GUI/separator.py:64:80: E501 Line too long (88 > 79)
   |
62 |                 import intel_extension_for_pytorch as ipex  # type: ignore
63 |
64 |                 logging.info("Intel Extension for PyTorch version: " + ipex.__version__)
   |                                                                                ^^^^^^^^^ E501
65 |             except ModuleNotFoundError:
66 |                 logging.info("Intel Extension for PyTorch is not installed")
   |

Demucs-Gui-1.3.2.1/GUI/separator.py:70:80: E501 Line too long (118 > 79)
   |
68 |             except Exception:
69 |                 logging.error(
70 |                     "Failed to load Intel Extension for PyTorch for the %d time:\n" % (i + 1) + traceback.format_exc()
   |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
71 |                 )
72 |             else:
   |

Demucs-Gui-1.3.2.1/GUI/separator.py:77:80: E501 Line too long (82 > 79)
   |
75 |                     if sys.platform == "win32":
76 |                         dll_size = os.path.getsize(ipex.dlls[0])
77 |                         logging.info("IPEX extension dll path: %s" % ipex.dlls[0])
   |                                                                                ^^^ E501
78 |                         logging.info("IPEX extension dll size: %d" % dll_size)
79 |                         if dll_size < 1073741824:
   |

Demucs-Gui-1.3.2.1/GUI/separator.py:79:39: PLR2004 Magic value used in comparison, consider replacing `1073741824` with a constant variable
   |
77 |                         logging.info("IPEX extension dll path: %s" % ipex.dlls[0])
78 |                         logging.info("IPEX extension dll size: %d" % dll_size)
79 |                         if dll_size < 1073741824:
   |                                       ^^^^^^^^^^ PLR2004
80 |                             logging.info("IPEX extension dll is not large enough, probably JIT only (No AOT)")
81 |                             Intel_JIT_only = True
   |

Demucs-Gui-1.3.2.1/GUI/separator.py:80:80: E501 Line too long (110 > 79)
   |
78 |                         logging.info("IPEX extension dll size: %d" % dll_size)
79 |                         if dll_size < 1073741824:
80 |                             logging.info("IPEX extension dll is not large enough, probably JIT only (No AOT)")
   |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
81 |                             Intel_JIT_only = True
82 |                     break
   |

Demucs-Gui-1.3.2.1/GUI/separator.py:83:9: PLC0415 `import` should be at the top-level of a file
   |
81 |                             Intel_JIT_only = True
82 |                     break
83 |         import audio
   |         ^^^^^^^^^^^^ PLC0415
84 |         import demucs.api
85 |         import demucs.apply
   |

Demucs-Gui-1.3.2.1/GUI/separator.py:84:9: PLC0415 `import` should be at the top-level of a file
   |
82 |                     break
83 |         import audio
84 |         import demucs.api
   |         ^^^^^^^^^^^^^^^^^ PLC0415
85 |         import demucs.apply
   |

Demucs-Gui-1.3.2.1/GUI/separator.py:85:9: PLC0415 `import` should be at the top-level of a file
   |
83 |         import audio
84 |         import demucs.api
85 |         import demucs.apply
   |         ^^^^^^^^^^^^^^^^^^^ PLC0415
86 |
87 |         update_status("Successfully loaded modules")
   |

Demucs-Gui-1.3.2.1/GUI/separator.py:91:80: E501 Line too long (83 > 79)
   |
89 |         logging.info("PyTorch version: " + torch.__version__)
90 |         if sys.platform == "darwin":
91 |             if torch.backends.mps.is_built() and torch.backends.mps.is_available():  # type: ignore
   |                                                                                ^^^^ E501
92 |                 update_status("MPS backend is available")
93 |             else:
   |

Demucs-Gui-1.3.2.1/GUI/separator.py:101:80: E501 Line too long (119 > 79)
    |
 99 |                 logging.info(
100 |                     "CUDA Info: "
101 |                     + "    \n".join(str(torch.cuda.get_device_properties(i)) for i in range(torch.cuda.device_count()))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
102 |                 )
103 |                 logging.info("CUDA Arch list: " + str(torch.cuda.get_arch_list()))
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:103:80: E501 Line too long (82 > 79)
    |
101 |                     + "    \n".join(str(torch.cuda.get_device_properties(i)) for i in range(torch.cuda.device_count()))
102 |                 )
103 |                 logging.info("CUDA Arch list: " + str(torch.cuda.get_arch_list()))
    |                                                                                ^^^ E501
104 |             if ipex is not None and hasattr(torch, "xpu") and torch.xpu.is_available():
105 |                 backends.append("Intel MKL")
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:104:80: E501 Line too long (87 > 79)
    |
102 |                 )
103 |                 logging.info("CUDA Arch list: " + str(torch.cuda.get_arch_list()))
104 |             if ipex is not None and hasattr(torch, "xpu") and torch.xpu.is_available():
    |                                                                                ^^^^^^^^ E501
105 |                 backends.append("Intel MKL")
106 |                 logging.info(
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:108:80: E501 Line too long (117 > 79)
    |
106 |                 logging.info(
107 |                     "Intel MKL Info: "
108 |                     + "    \n".join(str(torch.xpu.get_device_properties(i)) for i in range(torch.xpu.device_count()))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
109 |                 )
110 |             if backends:
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:127:5: PLR0912 Too many branches (14 > 12)
    |
127 | def getAvailableDevices():
    |     ^^^^^^^^^^^^^^^^^^^ PLR0912
128 |     global default_device
129 |     devices = []
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:128:12: PLW0603 Using the global statement to update `default_device` is discouraged
    |
127 | def getAvailableDevices():
128 |     global default_device
    |            ^^^^^^^^^^^^^^ PLW0603
129 |     devices = []
130 |     devices.append(("CPU - %s (%d MiB)" % (platform.processor(), psutil.virtual_memory().total / 1048576), "cpu"))
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:128:12: PLW0603 Using the global statement to update `default_device` is discouraged
    |
127 | def getAvailableDevices():
128 |     global default_device
    |            ^^^^^^^^^^^^^^ PLW0603
129 |     devices = []
130 |     devices.append(("CPU - %s (%d MiB)" % (platform.processor(), psutil.virtual_memory().total / 1048576), "cpu"))
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:128:12: PLW0603 Using the global statement to update `default_device` is discouraged
    |
127 | def getAvailableDevices():
128 |     global default_device
    |            ^^^^^^^^^^^^^^ PLW0603
129 |     devices = []
130 |     devices.append(("CPU - %s (%d MiB)" % (platform.processor(), psutil.virtual_memory().total / 1048576), "cpu"))
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:130:80: E501 Line too long (114 > 79)
    |
128 |     global default_device
129 |     devices = []
130 |     devices.append(("CPU - %s (%d MiB)" % (platform.processor(), psutil.virtual_memory().total / 1048576), "cpu"))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
131 |     if sys.platform == "darwin":
132 |         if torch.backends.mps.is_built() and torch.backends.mps.is_available():
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:133:80: E501 Line too long (95 > 79)
    |
131 |     if sys.platform == "darwin":
132 |         if torch.backends.mps.is_built() and torch.backends.mps.is_available():
133 |             devices.append(("MPS (%d MiB)" % (psutil.virtual_memory().total / 1048576), "mps"))
    |                                                                                ^^^^^^^^^^^^^^^^ E501
134 |             default_device = 1
135 |             logging.info("MPS backend is available")
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:144:80: E501 Line too long (102 > 79)
    |
142 |                 device_property = torch.xpu.get_device_properties(i)
143 |                 device_info_string = ""
144 |                 if hasattr(device_property, "dev_type") and isinstance(device_property.dev_type, str):
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^ E501
145 |                     device_info_string += device_property.dev_type.upper() + " - "
146 |                 device_info_string += device_property.name
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:145:80: E501 Line too long (82 > 79)
    |
143 |                 device_info_string = ""
144 |                 if hasattr(device_property, "dev_type") and isinstance(device_property.dev_type, str):
145 |                     device_info_string += device_property.dev_type.upper() + " - "
    |                                                                                ^^^ E501
146 |                 device_info_string += device_property.name
147 |                 if hasattr(device_property, "platform_name") and isinstance(device_property.platform_name, str):
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:147:80: E501 Line too long (112 > 79)
    |
145 |                     device_info_string += device_property.dev_type.upper() + " - "
146 |                 device_info_string += device_property.name
147 |                 if hasattr(device_property, "platform_name") and isinstance(device_property.platform_name, str):
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
148 |                     device_info_string += " (" + device_property.platform_name + ", "
149 |                 else:
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:148:80: E501 Line too long (85 > 79)
    |
146 |                 device_info_string += device_property.name
147 |                 if hasattr(device_property, "platform_name") and isinstance(device_property.platform_name, str):
148 |                     device_info_string += " (" + device_property.platform_name + ", "
    |                                                                                ^^^^^^ E501
149 |                 else:
150 |                     device_info_string += " ("
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:151:80: E501 Line too long (90 > 79)
    |
149 |                 else:
150 |                     device_info_string += " ("
151 |                 device_info_string += "%d MiB)" % (device_property.total_memory / 1048576)
    |                                                                                ^^^^^^^^^^^ E501
152 |                 devices.append((device_info_string, "xpu:%d" % i))
153 |                 if device_property.total_memory > max_memory and device_property.total_memory > 2147480000:
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:153:80: E501 Line too long (107 > 79)
    |
151 |                 device_info_string += "%d MiB)" % (device_property.total_memory / 1048576)
152 |                 devices.append((device_info_string, "xpu:%d" % i))
153 |                 if device_property.total_memory > max_memory and device_property.total_memory > 2147480000:
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
154 |                     max_memory = device_property.total_memory
155 |                     if hasattr(device_property, "gpu_eu_count") and device_property.gpu_eu_count >= 96:
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:153:97: PLR2004 Magic value used in comparison, consider replacing `2147480000` with a constant variable
    |
151 |                 device_info_string += "%d MiB)" % (device_property.total_memory / 1048576)
152 |                 devices.append((device_info_string, "xpu:%d" % i))
153 |                 if device_property.total_memory > max_memory and device_property.total_memory > 2147480000:
    |                                                                                                 ^^^^^^^^^^ PLR2004
154 |                     max_memory = device_property.total_memory
155 |                     if hasattr(device_property, "gpu_eu_count") and device_property.gpu_eu_count >= 96:
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:155:80: E501 Line too long (103 > 79)
    |
153 |                 if device_property.total_memory > max_memory and device_property.total_memory > 2147480000:
154 |                     max_memory = device_property.total_memory
155 |                     if hasattr(device_property, "gpu_eu_count") and device_property.gpu_eu_count >= 96:
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^ E501
156 |                         default_device = len(devices) - 1
157 |         if torch.backends.cuda.is_built() and torch.cuda.is_available():  # type: ignore
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:155:101: PLR2004 Magic value used in comparison, consider replacing `96` with a constant variable
    |
153 |                 if device_property.total_memory > max_memory and device_property.total_memory > 2147480000:
154 |                     max_memory = device_property.total_memory
155 |                     if hasattr(device_property, "gpu_eu_count") and device_property.gpu_eu_count >= 96:
    |                                                                                                     ^^ PLR2004
156 |                         default_device = len(devices) - 1
157 |         if torch.backends.cuda.is_built() and torch.cuda.is_available():  # type: ignore
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:163:80: E501 Line too long (110 > 79)
    |
161 |                 devices.append(
162 |                     (
163 |                         "CUDA - %s (%d MiB)" % (device_property.name, device_property.total_memory / 1048576),
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
164 |                         "cuda:%d" % i,
165 |                     )
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:167:80: E501 Line too long (107 > 79)
    |
165 |                     )
166 |                 )
167 |                 if device_property.total_memory > max_memory and device_property.total_memory > 2147480000:
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
168 |                     max_memory = device_property.total_memory
169 |                     default_device = len(devices) - 1
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:167:97: PLR2004 Magic value used in comparison, consider replacing `2147480000` with a constant variable
    |
165 |                     )
166 |                 )
167 |                 if device_property.total_memory > max_memory and device_property.total_memory > 2147480000:
    |                                                                                                 ^^^^^^^^^^ PLR2004
168 |                     max_memory = device_property.total_memory
169 |                     default_device = len(devices) - 1
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:173:5: PLR0912 Too many branches (21 > 12)
    |
173 | def autoListModels():
    |     ^^^^^^^^^^^^^^ PLR0912
174 |     global downloaded_models, remote_urls
175 |     bags = []
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:173:5: PLR0915 Too many statements (64 > 50)
    |
173 | def autoListModels():
    |     ^^^^^^^^^^^^^^ PLR0915
174 |     global downloaded_models, remote_urls
175 |     bags = []
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:174:12: PLW0603 Using the global statement to update `downloaded_models` is discouraged
    |
173 | def autoListModels():
174 |     global downloaded_models, remote_urls
    |            ^^^^^^^^^^^^^^^^^ PLW0603
175 |     bags = []
176 |     singles = []
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:174:31: PLW0602 Using global for `remote_urls` but no assignment is done
    |
173 | def autoListModels():
174 |     global downloaded_models, remote_urls
    |                               ^^^^^^^^^^^ PLW0602
175 |     bags = []
176 |     singles = []
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:186:80: E501 Line too long (87 > 79)
    |
184 |         downloaded_models = demucs.api.list_models(checkpoint_dir)["single"]
185 |     except Exception:
186 |         logging.error("Failed to list downloaded models:\n%s" % traceback.format_exc())
    |                                                                                ^^^^^^^^ E501
187 |     for repopath in repos:
188 |         if repopath is not None and not repopath.exists():
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:187:5: PLR1702 Too many nested blocks (6 > 5)
    |
185 |       except Exception:
186 |           logging.error("Failed to list downloaded models:\n%s" % traceback.format_exc())
187 | /     for repopath in repos:
188 | |         if repopath is not None and not repopath.exists():
189 | |             continue
190 | |         try:
191 | |             new_models = demucs.api.list_models(repopath)
192 | |         except Exception:
193 | |             logging.error("Failed to list models from %s:\n%s" % (str(repopath), traceback.format_exc()))
194 | |             continue
195 | |         for sig, filepath in new_models["bag"].items():
196 | |             info = "Model signature: " + sig
197 | |             info += "\nType: Bag of models"
198 | |             if repopath is None:
199 | |                 info += "\nPosition: Remote model"
200 | |             else:
201 | |                 info += "\nPosition: Local model"
202 | |                 info += "\nRepo: " + str(repopath)
203 | |             info += "\nFile: " + str(filepath)
204 | |             try:
205 | |                 with open(filepath, "rt", encoding="utf8") as f:
206 | |                     model_def = yaml.load(f, yaml.Loader)
207 | |                 info += "\nModels:"
208 | |                 if "weights" in model_def:
209 | |                     weights = model_def["weights"]
210 | |                     for i, (model, weight) in enumerate(zip(model_def["models"], weights)):
211 | |                         info += "\n\u3000%d. %s: %s" % (i + 1, model, weight)
212 | |                         if repopath is None:
213 | |                             info += " (Downloaded)" if model in downloaded_models else " (Not downloaded)"
214 | |                 else:
215 | |                     for i, model in enumerate(model_def["models"]):
216 | |                         info += "\n\u3000%d. %s" % (i + 1, model)
217 | |                         if repopath is None:
218 | |                             info += " (Downloaded)" if model in downloaded_models else " (Not downloaded)"
219 | |                 if "segment" in model_def:
220 | |                     info += "\nDefault segment: %.1f" % model_def["segment"]
221 | |             except Exception:
222 | |                 logging.error("Failed to load info of model %s:\n%s" % (sig, traceback.format_exc()))
223 | |             else:
224 | |                 remote_urls[sig] = model_def["models"]
225 | |                 bags.append((sig, info, repopath))
226 | |         for sig, filepath in new_models["single"].items():
227 | |             info = "Model signature: " + sig
228 | |             info += "\nType: Single model"
229 | |             if repopath is None:
230 | |                 info += "\nPosition: Remote model"
231 | |                 info += "\nURL: " + str(filepath)
232 | |                 info += "\nState: " + ("Downloaded" if sig in downloaded_models else "Not downloaded")
233 | |                 if sig in downloaded_models:
234 | |                     info += "\nFile: " + str(downloaded_models[sig])
235 | |                 else:
236 | |                     remote_urls[sig] = str(filepath)
237 | |             else:
238 | |                 info += "\nPosition: Local model"
239 | |                 info += "\nRepo: " + str(repopath)
240 | |                 info += "\nFile: " + str(filepath)
241 | |             singles.append((sig, info, repopath))
    | |_________________________________________________^ PLR1702
242 |       models, infos, each_repos = tuple(zip(*(bags + singles + [("demucs_unittest", "Unit test model", None)])))
243 |       return models, infos, each_repos
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:187:5: PLR1702 Too many nested blocks (6 > 5)
    |
185 |       except Exception:
186 |           logging.error("Failed to list downloaded models:\n%s" % traceback.format_exc())
187 | /     for repopath in repos:
188 | |         if repopath is not None and not repopath.exists():
189 | |             continue
190 | |         try:
191 | |             new_models = demucs.api.list_models(repopath)
192 | |         except Exception:
193 | |             logging.error("Failed to list models from %s:\n%s" % (str(repopath), traceback.format_exc()))
194 | |             continue
195 | |         for sig, filepath in new_models["bag"].items():
196 | |             info = "Model signature: " + sig
197 | |             info += "\nType: Bag of models"
198 | |             if repopath is None:
199 | |                 info += "\nPosition: Remote model"
200 | |             else:
201 | |                 info += "\nPosition: Local model"
202 | |                 info += "\nRepo: " + str(repopath)
203 | |             info += "\nFile: " + str(filepath)
204 | |             try:
205 | |                 with open(filepath, "rt", encoding="utf8") as f:
206 | |                     model_def = yaml.load(f, yaml.Loader)
207 | |                 info += "\nModels:"
208 | |                 if "weights" in model_def:
209 | |                     weights = model_def["weights"]
210 | |                     for i, (model, weight) in enumerate(zip(model_def["models"], weights)):
211 | |                         info += "\n\u3000%d. %s: %s" % (i + 1, model, weight)
212 | |                         if repopath is None:
213 | |                             info += " (Downloaded)" if model in downloaded_models else " (Not downloaded)"
214 | |                 else:
215 | |                     for i, model in enumerate(model_def["models"]):
216 | |                         info += "\n\u3000%d. %s" % (i + 1, model)
217 | |                         if repopath is None:
218 | |                             info += " (Downloaded)" if model in downloaded_models else " (Not downloaded)"
219 | |                 if "segment" in model_def:
220 | |                     info += "\nDefault segment: %.1f" % model_def["segment"]
221 | |             except Exception:
222 | |                 logging.error("Failed to load info of model %s:\n%s" % (sig, traceback.format_exc()))
223 | |             else:
224 | |                 remote_urls[sig] = model_def["models"]
225 | |                 bags.append((sig, info, repopath))
226 | |         for sig, filepath in new_models["single"].items():
227 | |             info = "Model signature: " + sig
228 | |             info += "\nType: Single model"
229 | |             if repopath is None:
230 | |                 info += "\nPosition: Remote model"
231 | |                 info += "\nURL: " + str(filepath)
232 | |                 info += "\nState: " + ("Downloaded" if sig in downloaded_models else "Not downloaded")
233 | |                 if sig in downloaded_models:
234 | |                     info += "\nFile: " + str(downloaded_models[sig])
235 | |                 else:
236 | |                     remote_urls[sig] = str(filepath)
237 | |             else:
238 | |                 info += "\nPosition: Local model"
239 | |                 info += "\nRepo: " + str(repopath)
240 | |                 info += "\nFile: " + str(filepath)
241 | |             singles.append((sig, info, repopath))
    | |_________________________________________________^ PLR1702
242 |       models, infos, each_repos = tuple(zip(*(bags + singles + [("demucs_unittest", "Unit test model", None)])))
243 |       return models, infos, each_repos
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:193:80: E501 Line too long (105 > 79)
    |
191 |             new_models = demucs.api.list_models(repopath)
192 |         except Exception:
193 |             logging.error("Failed to list models from %s:\n%s" % (str(repopath), traceback.format_exc()))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
194 |             continue
195 |         for sig, filepath in new_models["bag"].items():
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:210:80: E501 Line too long (91 > 79)
    |
208 |                 if "weights" in model_def:
209 |                     weights = model_def["weights"]
210 |                     for i, (model, weight) in enumerate(zip(model_def["models"], weights)):
    |                                                                                ^^^^^^^^^^^^ E501
211 |                         info += "\n\u3000%d. %s: %s" % (i + 1, model, weight)
212 |                         if repopath is None:
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:213:80: E501 Line too long (106 > 79)
    |
211 |                         info += "\n\u3000%d. %s: %s" % (i + 1, model, weight)
212 |                         if repopath is None:
213 |                             info += " (Downloaded)" if model in downloaded_models else " (Not downloaded)"
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
214 |                 else:
215 |                     for i, model in enumerate(model_def["models"]):
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:218:80: E501 Line too long (106 > 79)
    |
216 |                         info += "\n\u3000%d. %s" % (i + 1, model)
217 |                         if repopath is None:
218 |                             info += " (Downloaded)" if model in downloaded_models else " (Not downloaded)"
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
219 |                 if "segment" in model_def:
220 |                     info += "\nDefault segment: %.1f" % model_def["segment"]
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:222:80: E501 Line too long (101 > 79)
    |
220 |                     info += "\nDefault segment: %.1f" % model_def["segment"]
221 |             except Exception:
222 |                 logging.error("Failed to load info of model %s:\n%s" % (sig, traceback.format_exc()))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^ E501
223 |             else:
224 |                 remote_urls[sig] = model_def["models"]
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:232:80: E501 Line too long (102 > 79)
    |
230 |                 info += "\nPosition: Remote model"
231 |                 info += "\nURL: " + str(filepath)
232 |                 info += "\nState: " + ("Downloaded" if sig in downloaded_models else "Not downloaded")
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^ E501
233 |                 if sig in downloaded_models:
234 |                     info += "\nFile: " + str(downloaded_models[sig])
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:242:80: E501 Line too long (110 > 79)
    |
240 |                 info += "\nFile: " + str(filepath)
241 |             singles.append((sig, info, repopath))
242 |     models, infos, each_repos = tuple(zip(*(bags + singles + [("demucs_unittest", "Unit test model", None)])))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
243 |     return models, infos, each_repos
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:268:80: E501 Line too long (85 > 79)
    |
266 |         if repo is None:
267 |             self.ensureDownloaded(model)
268 |         self.separator = demucs.api.Separator(model=model, repo=repo, progress=False)
    |                                                                                ^^^^^^ E501
269 |         if len(set(self.separator.model.sources)) != len(self.separator.model.sources):
270 |             raise ModelSourceNameUnsupportedError(
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:269:80: E501 Line too long (87 > 79)
    |
267 |             self.ensureDownloaded(model)
268 |         self.separator = demucs.api.Separator(model=model, repo=repo, progress=False)
269 |         if len(set(self.separator.model.sources)) != len(self.separator.model.sources):
    |                                                                                ^^^^^^^^ E501
270 |             raise ModelSourceNameUnsupportedError(
271 |                 "Duplicate source names in model %s\nSources: %s" % (model, self.separator.model.sources)
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:271:80: E501 Line too long (105 > 79)
    |
269 |         if len(set(self.separator.model.sources)) != len(self.separator.model.sources):
270 |             raise ModelSourceNameUnsupportedError(
271 |                 "Duplicate source names in model %s\nSources: %s" % (model, self.separator.model.sources)
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
272 |             )
273 |         if "origin" in self.separator.model.sources:
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:274:80: E501 Line too long (105 > 79)
    |
272 |             )
273 |         if "origin" in self.separator.model.sources:
274 |             raise ModelSourceNameUnsupportedError("Source name 'origin' is reserved in model %s" % model)
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
275 |         if "all_left" in self.separator.model.sources:
276 |             raise ModelSourceNameUnsupportedError("Source name 'all_left' is reserved in model %s" % model)
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:276:80: E501 Line too long (107 > 79)
    |
274 |             raise ModelSourceNameUnsupportedError("Source name 'origin' is reserved in model %s" % model)
275 |         if "all_left" in self.separator.model.sources:
276 |             raise ModelSourceNameUnsupportedError("Source name 'all_left' is reserved in model %s" % model)
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
277 |         self.model = model
278 |         self.repo = repo
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:282:80: E501 Line too long (86 > 79)
    |
280 |             self.default_segment = self.separator.model.segment
281 |         else:
282 |             self.default_segment = min(i.segment for i in self.separator.model.models)  # type: ignore
    |                                                                                ^^^^^^^ E501
283 |             if hasattr(self.separator.model, "segment"):
284 |                 self.default_segment = min(self.default_segment, self.separator.model.segment)
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:284:80: E501 Line too long (94 > 79)
    |
282 |             self.default_segment = min(i.segment for i in self.separator.model.models)  # type: ignore
283 |             if hasattr(self.separator.model, "segment"):
284 |                 self.default_segment = min(self.default_segment, self.separator.model.segment)
    |                                                                                ^^^^^^^^^^^^^^^ E501
285 |         self.default_segment = max(self.default_segment, 0.1)
286 |         self.sources = self.separator.model.sources
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:289:9: PLR0912 Too many branches (16 > 12)
    |
287 |         self.separating = False
288 |
289 |     def ensureDownloaded(self, model):
    |         ^^^^^^^^^^^^^^^^ PLR0912
290 |         if model == "demucs_unittest":
291 |             return
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:289:9: PLR0915 Too many statements (54 > 50)
    |
287 |         self.separating = False
288 |
289 |     def ensureDownloaded(self, model):
    |         ^^^^^^^^^^^^^^^^ PLR0915
290 |         if model == "demucs_unittest":
291 |             return
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:289:9: PLR0914 Too many local variables (17/15)
    |
287 |         self.separating = False
288 |
289 |     def ensureDownloaded(self, model):
    |         ^^^^^^^^^^^^^^^^ PLR0914
290 |         if model == "demucs_unittest":
291 |             return
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:351:80: E501 Line too long (112 > 79)
    |
349 |                 tmp_file.unlink(missing_ok=True)
350 |                 logging.error(
351 |                     "Checksum mismatch for %s: received %s, expected %s" % (model, hasher.hexdigest(), checksum)
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
352 |                 )
353 |                 raise RuntimeError("Checksum mismatch")
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:366:80: E501 Line too long (94 > 79)
    |
364 |                 segment = self.separator.model.models[i].segment
365 |                 infos.append(
366 |                     "Model %d:\n\u3000Type: %s\n\u3000Default segment: %.8g\n\u3000Weight: %s"
    |                                                                                ^^^^^^^^^^^^^^^ E501
367 |                     % (
368 |                         i,
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:375:80: E501 Line too long (114 > 79)
    |
373 |                 )
374 |             return (
375 |                 "Model: %s\nRepo: %s\nType: Bag of models\nAudio channels: %d\nSample rate: %d\nSources: %s\n\n%s"
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
376 |                 % (
377 |                     self.model,
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:386:80: E501 Line too long (100 > 79)
    |
384 |             )
385 |
386 |         return "Model: %s\nRepo: %s\nType: %s\nAudio channels: %d\nSample rate: %d\nSources: %s" % (
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^ E501
387 |             self.model,
388 |             self.repo if self.repo is not None else '"remote"',
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:408:80: E501 Line too long (97 > 79)
    |
406 |         progress_model = Fraction(0)
407 |         progress_model += progress_per_shift * progress_dict["shift_idx"]
408 |         progress_shift = Fraction(progress_dict["segment_offset"], progress_dict["audio_length"])
    |                                                                                ^^^^^^^^^^^^^^^^^^ E501
409 |         if progress_dict["state"] == "end":
410 |             progress_shift += Fraction(
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:411:80: E501 Line too long (113 > 79)
    |
409 |         if progress_dict["state"] == "end":
410 |             progress_shift += Fraction(
411 |                 int(self.segment * (1 - self.overlap) * self.separator.samplerate), progress_dict["audio_length"]
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
412 |             )
413 |         progress_shift = min(Fraction(1, 1), progress_shift)
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:420:50: PLR2004 Magic value used in comparison, consider replacing `0.5` with a constant variable
    |
418 |         current_time = time.time()
419 |         self.time_hists.append((current_time, progress))
420 |         if current_time - self.last_update_eta > 0.5:
    |                                                  ^^^ PLR2004
421 |             while len(self.time_hists) >= 20 and current_time - self.time_hists[0][0] > 15:
422 |                 self.time_hists.pop(0)
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:421:43: PLR2004 Magic value used in comparison, consider replacing `20` with a constant variable
    |
419 |         self.time_hists.append((current_time, progress))
420 |         if current_time - self.last_update_eta > 0.5:
421 |             while len(self.time_hists) >= 20 and current_time - self.time_hists[0][0] > 15:
    |                                           ^^ PLR2004
422 |                 self.time_hists.pop(0)
423 |             if len(self.time_hists) >= 2 and progress != self.time_hists[0][1]:
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:421:80: E501 Line too long (91 > 79)
    |
419 |         self.time_hists.append((current_time, progress))
420 |         if current_time - self.last_update_eta > 0.5:
421 |             while len(self.time_hists) >= 20 and current_time - self.time_hists[0][0] > 15:
    |                                                                                ^^^^^^^^^^^^ E501
422 |                 self.time_hists.pop(0)
423 |             if len(self.time_hists) >= 2 and progress != self.time_hists[0][1]:
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:421:89: PLR2004 Magic value used in comparison, consider replacing `15` with a constant variable
    |
419 |         self.time_hists.append((current_time, progress))
420 |         if current_time - self.last_update_eta > 0.5:
421 |             while len(self.time_hists) >= 20 and current_time - self.time_hists[0][0] > 15:
    |                                                                                         ^^ PLR2004
422 |                 self.time_hists.pop(0)
423 |             if len(self.time_hists) >= 2 and progress != self.time_hists[0][1]:
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:423:40: PLR2004 Magic value used in comparison, consider replacing `2` with a constant variable
    |
421 |             while len(self.time_hists) >= 20 and current_time - self.time_hists[0][0] > 15:
422 |                 self.time_hists.pop(0)
423 |             if len(self.time_hists) >= 2 and progress != self.time_hists[0][1]:
    |                                        ^ PLR2004
424 |                 eta = int((1 - progress) / (progress - self.time_hists[0][1]) * (current_time - self.time_hists[0][0]))
425 |             else:
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:424:80: E501 Line too long (119 > 79)
    |
422 |                 self.time_hists.pop(0)
423 |             if len(self.time_hists) >= 2 and progress != self.time_hists[0][1]:
424 |                 eta = int((1 - progress) / (progress - self.time_hists[0][1]) * (current_time - self.time_hists[0][0]))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
425 |             else:
426 |                 eta = 1000000000
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:429:25: PLR2004 Magic value used in comparison, consider replacing `86400` with a constant variable
    |
427 |             if eta >= 99 * 86400:
428 |                 eta_str = "--:--:--:--"
429 |             elif eta >= 86400:
    |                         ^^^^^ PLR2004
430 |                 eta_str = "%d:" % (eta // 86400)
431 |                 eta %= 86400
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:435:80: E501 Line too long (90 > 79)
    |
433 |             else:
434 |                 eta_str = time.strftime("%H:%M:%S", time.gmtime(eta))
435 |             self.updateStatus("Separating audio: %s | ETA %s" % (self.file.name, eta_str))
    |                                                                                ^^^^^^^^^^^ E501
436 |             self.last_update_eta = current_time
437 |         pause_start = time.time()
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:441:80: E501 Line too long (91 > 79)
    |
439 |         self.setAudioProgress(min(1.0, float(progress)), self.item)
440 |         pause_end = time.time()
441 |         self.time_hists = [(i[0] + pause_end - pause_start, i[1]) for i in self.time_hists]
    |                                                                                ^^^^^^^^^^^^ E501
442 |
443 |     def save_callback(self, *args, encoder="sndfile"):
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:446:80: E501 Line too long (100 > 79)
    |
444 |         match encoder:
445 |             case "sndfile":
446 |                 return audio.save_audio_sndfile(*args, self.separator.samplerate, self.updateStatus)
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^ E501
447 |             case "ffmpeg":
448 |                 return audio.save_audio_ffmpeg(*args, self.separator.samplerate, self.updateStatus)
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:448:80: E501 Line too long (99 > 79)
    |
446 |                 return audio.save_audio_sndfile(*args, self.separator.samplerate, self.updateStatus)
447 |             case "ffmpeg":
448 |                 return audio.save_audio_ffmpeg(*args, self.separator.samplerate, self.updateStatus)
    |                                                                                ^^^^^^^^^^^^^^^^^^^^ E501
449 |
450 |     @shared.thread_wrapper(daemon=True)
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:451:9: PLR0913 Too many arguments in function definition (11 > 5)
    |
450 |     @shared.thread_wrapper(daemon=True)
451 |     def separate(
    |         ^^^^^^^^ PLR0913
452 |         self,
453 |         file,
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:451:9: PLR0917 Too many positional arguments (11/5)
    |
450 |     @shared.thread_wrapper(daemon=True)
451 |     def separate(
    |         ^^^^^^^^ PLR0917
452 |         self,
453 |         file,
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:451:9: PLR0915 Too many statements (58 > 50)
    |
450 |     @shared.thread_wrapper(daemon=True)
451 |     def separate(
    |         ^^^^^^^^ PLR0915
452 |         self,
453 |         file,
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:466:80: E501 Line too long (100 > 79)
    |
464 |     ):
465 |         logging.info("Start separating audio: %s" % file.name)
466 |         logging.info("Parameters: segment=%.2f overlap=%.2f shifts=%d" % (segment, overlap, shifts))
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^ E501
467 |         logging.info("Device: %s" % device)
468 |         global used_cuda, used_xpu
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:468:16: PLW0603 Using the global statement to update `used_cuda` is discouraged
    |
466 |         logging.info("Parameters: segment=%.2f overlap=%.2f shifts=%d" % (segment, overlap, shifts))
467 |         logging.info("Device: %s" % device)
468 |         global used_cuda, used_xpu
    |                ^^^^^^^^^ PLW0603
469 |         if device.startswith("cuda"):
470 |             used_cuda = True
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:468:27: PLW0603 Using the global statement to update `used_xpu` is discouraged
    |
466 |         logging.info("Parameters: segment=%.2f overlap=%.2f shifts=%d" % (segment, overlap, shifts))
467 |         logging.info("Device: %s" % device)
468 |         global used_cuda, used_xpu
    |                           ^^^^^^^^ PLW0603
469 |         if device.startswith("cuda"):
470 |             used_cuda = True
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:475:80: E501 Line too long (98 > 79)
    |
473 |         try:
474 |             setStatus(shared.FileStatus.Reading, item)
475 |             wav, tags = audio.read_audio(file, self.separator.model.samplerate, self.updateStatus)
    |                                                                                ^^^^^^^^^^^^^^^^^^^ E501
476 |             assert wav is not None
477 |             assert (np.isnan(wav).sum() == 0) and (np.isinf(wav).sum() == 0), "Audio contains NaN or Inf"
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:477:13: PT018 Assertion should be broken down into multiple parts
    |
475 |             wav, tags = audio.read_audio(file, self.separator.model.samplerate, self.updateStatus)
476 |             assert wav is not None
477 |             assert (np.isnan(wav).sum() == 0) and (np.isinf(wav).sum() == 0), "Audio contains NaN or Inf"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PT018
478 |         except Exception:
479 |             finishCallback(shared.FileStatus.Failed, item)
    |
    = help: Break down assertion into multiple parts

Demucs-Gui-1.3.2.1/GUI/separator.py:477:80: E501 Line too long (105 > 79)
    |
475 |             wav, tags = audio.read_audio(file, self.separator.model.samplerate, self.updateStatus)
476 |             assert wav is not None
477 |             assert (np.isnan(wav).sum() == 0) and (np.isinf(wav).sum() == 0), "Audio contains NaN or Inf"
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
478 |         except Exception:
479 |             finishCallback(shared.FileStatus.Failed, item)
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:493:80: E501 Line too long (102 > 79)
    |
491 |         self.last_update_eta = 0
492 |
493 |         self.separator.model.to("cpu")  # To avoid moving between different GPUs which may cause error
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^ E501
494 |
495 |         try:
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:498:80: E501 Line too long (108 > 79)
    |
496 |             self.updateStatus("Separating audio: %s" % file.name)
497 |             self.separator.update_parameter(
498 |                 device=device, segment=segment, shifts=shifts, overlap=overlap, callback=self.updateProgress
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
499 |             )
500 |             wav_torch = torch.from_numpy(wav).clone().transpose(0, 1)
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:501:13: PT018 Assertion should be broken down into multiple parts
    |
499 |             )
500 |             wav_torch = torch.from_numpy(wav).clone().transpose(0, 1)
501 |             assert (not wav_torch.isnan().any()) and (not wav_torch.isinf().any()), "Audio contains NaN or Inf"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PT018
502 |             src_channels = wav_torch.shape[0]
503 |             logging.info("Running separation...")
    |
    = help: Break down assertion into multiple parts

Demucs-Gui-1.3.2.1/GUI/separator.py:501:80: E501 Line too long (111 > 79)
    |
499 |             )
500 |             wav_torch = torch.from_numpy(wav).clone().transpose(0, 1)
501 |             assert (not wav_torch.isnan().any()) and (not wav_torch.isinf().any()), "Audio contains NaN or Inf"
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
502 |             src_channels = wav_torch.shape[0]
503 |             logging.info("Running separation...")
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:506:80: E501 Line too long (110 > 79)
    |
504 |             self.time_hists.append((time.time(), 0))
505 |             if src_channels != self.separator.model.audio_channels:
506 |                 out = {stem: torch.zeros(1, wav_torch.shape[1], dtype=torch.float32) for stem in self.sources}
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
507 |                 self.in_length = src_channels
508 |                 self.out_length = 0
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:512:80: E501 Line too long (86 > 79)
    |
510 |                     self.out_length += 1
511 |                     for stem, tensor in self.separator.separate_tensor(
512 |                         wav_torch[i, :].repeat(self.separator.model.audio_channels, 1)
    |                                                                                ^^^^^^^ E501
513 |                     )[1].items():
514 |                         out[stem][i, :] = tensor.sum(dim=0) / tensor.shape[0]
    |

Demucs-Gui-1.3.2.1/GUI/separator.py:531:80: E501 Line too long (91 > 79)
    |
529 |             self.separator.model.to("cpu")
530 |         logging.info("Saving separated audio...")
531 |         save_callback(file, wav_torch, out, tags, self.save_callback, item, finishCallback)
    |                                                                                ^^^^^^^^^^^^ E501
532 |         self.separating = False
533 |         return
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:49:80: E501 Line too long (87 > 79)
   |
48 | if not (homeDir.parent / ".git").exists():
49 |     os.chdir(homeDir)  # Change working directory to homeDir if not running from source
   |                                                                                ^^^^^^^^ E501
50 | else:
51 |     debug = True  # Disable log file if running from source
   |

Demucs-Gui-1.3.2.1/GUI/shared.py:56:80: E501 Line too long (87 > 79)
   |
54 |     debug = True
55 |
56 | if sys.platform == "win32" and not debug and not sys.executable.endswith("python.exe"):
   |                                                                                ^^^^^^^^ E501
57 |     import ctypes
   |

Demucs-Gui-1.3.2.1/GUI/shared.py:69:80: E501 Line too long (117 > 79)
   |
67 | - {model}: model name
68 | - {host}: URL host name. If input is local file, it will be "localfile"
69 | - {0}, {1}, ...: input file name and its parent folder names, 0 for file name, 1 for parent folder name, and so on. \
   |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
70 | You can use up to 15. If the number is greater than the actual number of parent folders, it will be empty.
71 | - {TAG}: audio tag. TAG is the tag name. Available tags are listed below. If the audio file does not have the \
   |

Demucs-Gui-1.3.2.1/GUI/shared.py:70:80: E501 Line too long (106 > 79)
   |
68 | - {host}: URL host name. If input is local file, it will be "localfile"
69 | - {0}, {1}, ...: input file name and its parent folder names, 0 for file name, 1 for parent folder name, and so on. \
70 | You can use up to 15. If the number is greater than the actual number of parent folders, it will be empty.
   |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
71 | - {TAG}: audio tag. TAG is the tag name. Available tags are listed below. If the audio file does not have the \
72 | corresponding tag, it will be empty. If you know the audio file has an extra tag, you can also use it, though it \
   |

Demucs-Gui-1.3.2.1/GUI/shared.py:71:80: E501 Line too long (111 > 79)
   |
69 | - {0}, {1}, ...: input file name and its parent folder names, 0 for file name, 1 for parent folder name, and so on. \
70 | You can use up to 15. If the number is greater than the actual number of parent folders, it will be empty.
71 | - {TAG}: audio tag. TAG is the tag name. Available tags are listed below. If the audio file does not have the \
   |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
72 | corresponding tag, it will be empty. If you know the audio file has an extra tag, you can also use it, though it \
73 | might not be listed here. If the audio file does not contain the extra tag, save process will fail. If a tag name is \
   |

Demucs-Gui-1.3.2.1/GUI/shared.py:72:80: E501 Line too long (114 > 79)
   |
70 | You can use up to 15. If the number is greater than the actual number of parent folders, it will be empty.
71 | - {TAG}: audio tag. TAG is the tag name. Available tags are listed below. If the audio file does not have the \
72 | corresponding tag, it will be empty. If you know the audio file has an extra tag, you can also use it, though it \
   |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
73 | might not be listed here. If the audio file does not contain the extra tag, save process will fail. If a tag name is \
74 | used as a variable, an underscore "_" will be automatically added to the end of the tag name to avoid conflict.
   |

Demucs-Gui-1.3.2.1/GUI/shared.py:73:80: E501 Line too long (118 > 79)
   |
71 | - {TAG}: audio tag. TAG is the tag name. Available tags are listed below. If the audio file does not have the \
72 | corresponding tag, it will be empty. If you know the audio file has an extra tag, you can also use it, though it \
73 | might not be listed here. If the audio file does not contain the extra tag, save process will fail. If a tag name is \
   |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
74 | used as a variable, an underscore "_" will be automatically added to the end of the tag name to avoid conflict.
75 |     Available example tags: title, artist, album, date, track_, genre, comment, composer, performer, album_artist, \
   |

Demucs-Gui-1.3.2.1/GUI/shared.py:74:80: E501 Line too long (111 > 79)
   |
72 | corresponding tag, it will be empty. If you know the audio file has an extra tag, you can also use it, though it \
73 | might not be listed here. If the audio file does not contain the extra tag, save process will fail. If a tag name is \
74 | used as a variable, an underscore "_" will be automatically added to the end of the tag name to avoid conflict.
   |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
75 |     Available example tags: title, artist, album, date, track_, genre, comment, composer, performer, album_artist, \
76 | disc, publisher, language, lyricist, conductor, arranger, engineer, producer, mixer, grouping
   |

Demucs-Gui-1.3.2.1/GUI/shared.py:75:80: E501 Line too long (116 > 79)
   |
73 | might not be listed here. If the audio file does not contain the extra tag, save process will fail. If a tag name is \
74 | used as a variable, an underscore "_" will be automatically added to the end of the tag name to avoid conflict.
75 |     Available example tags: title, artist, album, date, track_, genre, comment, composer, performer, album_artist, \
   |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
76 | disc, publisher, language, lyricist, conductor, arranger, engineer, producer, mixer, grouping
   |

Demucs-Gui-1.3.2.1/GUI/shared.py:76:80: E501 Line too long (93 > 79)
   |
74 | used as a variable, an underscore "_" will be automatically added to the end of the tag name to avoid conflict.
75 |     Available example tags: title, artist, album, date, track_, genre, comment, composer, performer, album_artist, \
76 | disc, publisher, language, lyricist, conductor, arranger, engineer, producer, mixer, grouping
   |                                                                                ^^^^^^^^^^^^^^ E501
77 |
78 | For example, when saving stem "vocals" of "audio.mp3" using model htdemucs, with output format flac, the default \
   |

Demucs-Gui-1.3.2.1/GUI/shared.py:78:80: E501 Line too long (114 > 79)
   |
76 | disc, publisher, language, lyricist, conductor, arranger, engineer, producer, mixer, grouping
77 |
78 | For example, when saving stem "vocals" of "audio.mp3" using model htdemucs, with output format flac, the default \
   |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
79 | location "separated/{model}/{track}/{stem}.{ext}" would be "separated/htdemucs/audio/vocals.flac", with the folder \
80 | "separated" created under the same folder of the original audio file.
   |

Demucs-Gui-1.3.2.1/GUI/shared.py:79:80: E501 Line too long (116 > 79)
   |
78 | For example, when saving stem "vocals" of "audio.mp3" using model htdemucs, with output format flac, the default \
79 | location "separated/{model}/{track}/{stem}.{ext}" would be "separated/htdemucs/audio/vocals.flac", with the folder \
   |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
80 | "separated" created under the same folder of the original audio file.
   |

Demucs-Gui-1.3.2.1/GUI/shared.py:82:80: E501 Line too long (115 > 79)
   |
80 | "separated" created under the same folder of the original audio file.
81 |
82 | Please remember that absolute path must start from the root dir (like "C:\\xxx" on Windows or "/xxx" on macOS and \
   |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
83 | Linux) in case something unexpected would happen."""
   |

Demucs-Gui-1.3.2.1/GUI/shared.py:86:80: E501 Line too long (83 > 79)
   |
85 | command_syntax = """\
86 | You can use FFmpeg to encode output audio files instead of the internal libsndfile.
   |                                                                                ^^^^ E501
87 |
88 | The separated audio data will be piped to FFmpeg's stdin and the output file will be created by FFmpeg. FFmpeg stdout \
   |

Demucs-Gui-1.3.2.1/GUI/shared.py:88:80: E501 Line too long (119 > 79)
   |
86 | You can use FFmpeg to encode output audio files instead of the internal libsndfile.
87 |
88 | The separated audio data will be piped to FFmpeg's stdin and the output file will be created by FFmpeg. FFmpeg stdout \
   |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
89 | will be ignored and stderr will be logged to the log file.
90 | Data passed to FFmpeg is in wav format, encoded with float32 sample format. So if you want to change the format, \
   |

Demucs-Gui-1.3.2.1/GUI/shared.py:90:80: E501 Line too long (114 > 79)
   |
88 | The separated audio data will be piped to FFmpeg's stdin and the output file will be created by FFmpeg. FFmpeg stdout \
89 | will be ignored and stderr will be logged to the log file.
90 | Data passed to FFmpeg is in wav format, encoded with float32 sample format. So if you want to change the format, \
   |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
91 | please manually add "-sample_fmt" option to the command. e.g. "-sample_fmt s16" for 16-bit signed integer.
   |

Demucs-Gui-1.3.2.1/GUI/shared.py:91:80: E501 Line too long (106 > 79)
   |
89 | will be ignored and stderr will be logged to the log file.
90 | Data passed to FFmpeg is in wav format, encoded with float32 sample format. So if you want to change the format, \
91 | please manually add "-sample_fmt" option to the command. e.g. "-sample_fmt s16" for 16-bit signed integer.
   |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
92 |
93 | There are also some variables you can use in the command. Your command will be splitted to argument list by \
   |

Demucs-Gui-1.3.2.1/GUI/shared.py:93:80: E501 Line too long (109 > 79)
   |
91 | please manually add "-sample_fmt" option to the command. e.g. "-sample_fmt s16" for 16-bit signed integer.
92 |
93 | There are also some variables you can use in the command. Your command will be splitted to argument list by \
   |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
94 | shlex.split (Unix-like shell syntax), then the variables will be replaced with the corresponding values. \
95 | Available variables:
   |

Demucs-Gui-1.3.2.1/GUI/shared.py:94:80: E501 Line too long (106 > 79)
   |
93 | There are also some variables you can use in the command. Your command will be splitted to argument list by \
94 | shlex.split (Unix-like shell syntax), then the variables will be replaced with the corresponding values. \
   |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
95 | Available variables:
96 | - {input}: input file name without extension
   |

Demucs-Gui-1.3.2.1/GUI/shared.py:100:80: E501 Line too long (111 > 79)
    |
 98 | - {inputpath}: input file path (without file name)
 99 | - {output}: output file full path
100 | - {TAG}: audio tag. TAG is the tag name. Available tags are listed below. If the audio file does not have the \
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
101 | corresponding tag, it will be empty. If you know the audio file has an extra tag, you can also use it, though it \
102 | might not be listed here. If the audio file does not contain the extra tag, save process will fail. If a tag name is \
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:101:80: E501 Line too long (114 > 79)
    |
 99 | - {output}: output file full path
100 | - {TAG}: audio tag. TAG is the tag name. Available tags are listed below. If the audio file does not have the \
101 | corresponding tag, it will be empty. If you know the audio file has an extra tag, you can also use it, though it \
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
102 | might not be listed here. If the audio file does not contain the extra tag, save process will fail. If a tag name is \
103 | used as a variable, an underscore "_" will be automatically added to the end of the tag name to avoid conflict.
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:102:80: E501 Line too long (118 > 79)
    |
100 | - {TAG}: audio tag. TAG is the tag name. Available tags are listed below. If the audio file does not have the \
101 | corresponding tag, it will be empty. If you know the audio file has an extra tag, you can also use it, though it \
102 | might not be listed here. If the audio file does not contain the extra tag, save process will fail. If a tag name is \
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
103 | used as a variable, an underscore "_" will be automatically added to the end of the tag name to avoid conflict.
104 |     Available example tags: title, artist, album, date, track, genre, comment, composer, performer, album_artist, \
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:103:80: E501 Line too long (111 > 79)
    |
101 | corresponding tag, it will be empty. If you know the audio file has an extra tag, you can also use it, though it \
102 | might not be listed here. If the audio file does not contain the extra tag, save process will fail. If a tag name is \
103 | used as a variable, an underscore "_" will be automatically added to the end of the tag name to avoid conflict.
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
104 |     Available example tags: title, artist, album, date, track, genre, comment, composer, performer, album_artist, \
105 | disc, publisher, language, lyricist, conductor, arranger, engineer, producer, mixer, grouping
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:104:80: E501 Line too long (115 > 79)
    |
102 | might not be listed here. If the audio file does not contain the extra tag, save process will fail. If a tag name is \
103 | used as a variable, an underscore "_" will be automatically added to the end of the tag name to avoid conflict.
104 |     Available example tags: title, artist, album, date, track, genre, comment, composer, performer, album_artist, \
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
105 | disc, publisher, language, lyricist, conductor, arranger, engineer, producer, mixer, grouping
106 | Variables about input file above will also be replaced in file extension."""
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:105:80: E501 Line too long (93 > 79)
    |
103 | used as a variable, an underscore "_" will be automatically added to the end of the tag name to avoid conflict.
104 |     Available example tags: title, artist, album, date, track, genre, comment, composer, performer, album_artist, \
105 | disc, publisher, language, lyricist, conductor, arranger, engineer, producer, mixer, grouping
    |                                                                                ^^^^^^^^^^^^^^ E501
106 | Variables about input file above will also be replaced in file extension."""
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:124:80: E501 Line too long (90 > 79)
    |
124 | if getattr(sys, "frozen", False) and hasattr(sys, "_MEIPASS") and sys.platform == "win32":
    |                                                                                ^^^^^^^^^^^ E501
125 |     # Popen should be wrapped to avoid WinError 50
126 |     subprocess._Popen = subprocess.Popen
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:154:16: PLR2004 Magic value used in comparison, consider replacing `1024` with a constant variable
    |
152 |     t = 0
153 |     u = ["B", "KB", "MB", "GB", "TB", "PB", "EB"]
154 |     while s >= 1024:
    |                ^^^^ PLR2004
155 |         s /= 1024
156 |         t += 1
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:157:17: PLR2004 Magic value used in comparison, consider replacing `6` with a constant variable
    |
155 |         s /= 1024
156 |         t += 1
157 |         if t >= 6:
    |                 ^ PLR2004
158 |             break
159 |     return ("%.3f" % s).rstrip("0").rstrip(".") + u[t]
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:184:12: PLW0603 Using the global statement to update `logfile` is discouraged
    |
183 | def InitializeFolder():
184 |     global logfile, pretrained, settingsFile, historyFile, configPath, settings, history, model_cache
    |            ^^^^^^^ PLW0603
185 |     if sys.platform == "win32":
186 |         configPath = pathlib.Path(os.environ["APPDATA"])
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:184:21: PLW0603 Using the global statement to update `pretrained` is discouraged
    |
183 | def InitializeFolder():
184 |     global logfile, pretrained, settingsFile, historyFile, configPath, settings, history, model_cache
    |                     ^^^^^^^^^^ PLW0603
185 |     if sys.platform == "win32":
186 |         configPath = pathlib.Path(os.environ["APPDATA"])
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:184:33: PLW0603 Using the global statement to update `settingsFile` is discouraged
    |
183 | def InitializeFolder():
184 |     global logfile, pretrained, settingsFile, historyFile, configPath, settings, history, model_cache
    |                                 ^^^^^^^^^^^^ PLW0603
185 |     if sys.platform == "win32":
186 |         configPath = pathlib.Path(os.environ["APPDATA"])
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:184:47: PLW0603 Using the global statement to update `historyFile` is discouraged
    |
183 | def InitializeFolder():
184 |     global logfile, pretrained, settingsFile, historyFile, configPath, settings, history, model_cache
    |                                               ^^^^^^^^^^^ PLW0603
185 |     if sys.platform == "win32":
186 |         configPath = pathlib.Path(os.environ["APPDATA"])
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:184:60: PLW0603 Using the global statement to update `configPath` is discouraged
    |
183 | def InitializeFolder():
184 |     global logfile, pretrained, settingsFile, historyFile, configPath, settings, history, model_cache
    |                                                            ^^^^^^^^^^ PLW0603
185 |     if sys.platform == "win32":
186 |         configPath = pathlib.Path(os.environ["APPDATA"])
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:184:60: PLW0603 Using the global statement to update `configPath` is discouraged
    |
183 | def InitializeFolder():
184 |     global logfile, pretrained, settingsFile, historyFile, configPath, settings, history, model_cache
    |                                                            ^^^^^^^^^^ PLW0603
185 |     if sys.platform == "win32":
186 |         configPath = pathlib.Path(os.environ["APPDATA"])
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:184:60: PLW0603 Using the global statement to update `configPath` is discouraged
    |
183 | def InitializeFolder():
184 |     global logfile, pretrained, settingsFile, historyFile, configPath, settings, history, model_cache
    |                                                            ^^^^^^^^^^ PLW0603
185 |     if sys.platform == "win32":
186 |         configPath = pathlib.Path(os.environ["APPDATA"])
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:184:60: PLW0603 Using the global statement to update `configPath` is discouraged
    |
183 | def InitializeFolder():
184 |     global logfile, pretrained, settingsFile, historyFile, configPath, settings, history, model_cache
    |                                                            ^^^^^^^^^^ PLW0603
185 |     if sys.platform == "win32":
186 |         configPath = pathlib.Path(os.environ["APPDATA"])
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:184:72: PLW0603 Using the global statement to update `settings` is discouraged
    |
183 | def InitializeFolder():
184 |     global logfile, pretrained, settingsFile, historyFile, configPath, settings, history, model_cache
    |                                                                        ^^^^^^^^ PLW0603
185 |     if sys.platform == "win32":
186 |         configPath = pathlib.Path(os.environ["APPDATA"])
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:184:72: PLW0603 Using the global statement to update `settings` is discouraged
    |
183 | def InitializeFolder():
184 |     global logfile, pretrained, settingsFile, historyFile, configPath, settings, history, model_cache
    |                                                                        ^^^^^^^^ PLW0603
185 |     if sys.platform == "win32":
186 |         configPath = pathlib.Path(os.environ["APPDATA"])
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:184:72: PLW0603 Using the global statement to update `settings` is discouraged
    |
183 | def InitializeFolder():
184 |     global logfile, pretrained, settingsFile, historyFile, configPath, settings, history, model_cache
    |                                                                        ^^^^^^^^ PLW0603
185 |     if sys.platform == "win32":
186 |         configPath = pathlib.Path(os.environ["APPDATA"])
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:184:80: E501 Line too long (101 > 79)
    |
183 | def InitializeFolder():
184 |     global logfile, pretrained, settingsFile, historyFile, configPath, settings, history, model_cache
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^ E501
185 |     if sys.platform == "win32":
186 |         configPath = pathlib.Path(os.environ["APPDATA"])
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:184:82: PLW0603 Using the global statement to update `history` is discouraged
    |
183 | def InitializeFolder():
184 |     global logfile, pretrained, settingsFile, historyFile, configPath, settings, history, model_cache
    |                                                                                  ^^^^^^^ PLW0603
185 |     if sys.platform == "win32":
186 |         configPath = pathlib.Path(os.environ["APPDATA"])
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:184:82: PLW0603 Using the global statement to update `history` is discouraged
    |
183 | def InitializeFolder():
184 |     global logfile, pretrained, settingsFile, historyFile, configPath, settings, history, model_cache
    |                                                                                  ^^^^^^^ PLW0603
185 |     if sys.platform == "win32":
186 |         configPath = pathlib.Path(os.environ["APPDATA"])
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:184:82: PLW0603 Using the global statement to update `history` is discouraged
    |
183 | def InitializeFolder():
184 |     global logfile, pretrained, settingsFile, historyFile, configPath, settings, history, model_cache
    |                                                                                  ^^^^^^^ PLW0603
185 |     if sys.platform == "win32":
186 |         configPath = pathlib.Path(os.environ["APPDATA"])
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:184:91: PLW0603 Using the global statement to update `model_cache` is discouraged
    |
183 | def InitializeFolder():
184 |     global logfile, pretrained, settingsFile, historyFile, configPath, settings, history, model_cache
    |                                                                                           ^^^^^^^^^^^ PLW0603
185 |     if sys.platform == "win32":
186 |         configPath = pathlib.Path(os.environ["APPDATA"])
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:191:5: PLR6104 Use `/=` to perform an augmented assignment directly
    |
189 |     else:
190 |         configPath = homeDir
191 |     configPath = configPath / "demucs-gui"
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR6104
192 |     configPath.mkdir(parents=True, exist_ok=True)
193 |     pretrained = configPath / "pretrained"
    |
    = help: Replace with augmented assignment

Demucs-Gui-1.3.2.1/GUI/shared.py:207:80: E501 Line too long (82 > 79)
    |
205 |                 raise TypeError
206 |         except Exception:
207 |             print("Settings file is corrupted, reset to default", file=sys.stderr)
    |                                                                                ^^^ E501
208 |             print("Error message:\n%s" % traceback.format_exc(), file=sys.stderr)
209 |             print("Settings file content:\n%s" % settings_data, file=sys.stderr)
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:208:80: E501 Line too long (81 > 79)
    |
206 |         except Exception:
207 |             print("Settings file is corrupted, reset to default", file=sys.stderr)
208 |             print("Error message:\n%s" % traceback.format_exc(), file=sys.stderr)
    |                                                                                ^^ E501
209 |             print("Settings file content:\n%s" % settings_data, file=sys.stderr)
210 |             settings = {}
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:209:80: E501 Line too long (80 > 79)
    |
207 |             print("Settings file is corrupted, reset to default", file=sys.stderr)
208 |             print("Error message:\n%s" % traceback.format_exc(), file=sys.stderr)
209 |             print("Settings file content:\n%s" % settings_data, file=sys.stderr)
    |                                                                                ^ E501
210 |             settings = {}
211 |     else:
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:220:80: E501 Line too long (81 > 79)
    |
218 |                 raise TypeError
219 |         except Exception:
220 |             print("History file is corrupted, reset to default", file=sys.stderr)
    |                                                                                ^^ E501
221 |             print("Error message:\n%s" % traceback.format_exc(), file=sys.stderr)
222 |             history = {}
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:221:80: E501 Line too long (81 > 79)
    |
219 |         except Exception:
220 |             print("History file is corrupted, reset to default", file=sys.stderr)
221 |             print("Error message:\n%s" % traceback.format_exc(), file=sys.stderr)
    |                                                                                ^^ E501
222 |             history = {}
223 |     else:
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:231:12: PLW0602 Using global for `settings` but no assignment is done
    |
230 | def SetSetting(attr, value):
231 |     global settings, settingsFile, settingsLock
    |            ^^^^^^^^ PLW0602
232 |     with settingsLock:
233 |         func_name = traceback.extract_stack()
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:231:22: PLW0602 Using global for `settingsFile` but no assignment is done
    |
230 | def SetSetting(attr, value):
231 |     global settings, settingsFile, settingsLock
    |                      ^^^^^^^^^^^^ PLW0602
232 |     with settingsLock:
233 |         func_name = traceback.extract_stack()
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:231:36: PLW0602 Using global for `settingsLock` but no assignment is done
    |
230 | def SetSetting(attr, value):
231 |     global settings, settingsFile, settingsLock
    |                                    ^^^^^^^^^^^^ PLW0602
232 |     with settingsLock:
233 |         func_name = traceback.extract_stack()
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:242:80: E501 Line too long (88 > 79)
    |
240 |             del settings[attr]
241 |         else:
242 |             logging.debug('(%s) Set setting "%s" to %s' % (func_name, attr, str(value)))
    |                                                                                ^^^^^^^^^ E501
243 |             if attr in settings and settings[attr] == value:
244 |                 logging.debug("Setting not changed, ignored")
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:252:80: E501 Line too long (84 > 79)
    |
250 |                 f.write(settings_write_data)
251 |         except Exception:
252 |             logging.warning("Failed to save settings:\n%s" % traceback.format_exc())
    |                                                                                ^^^^^ E501
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:256:12: PLW0602 Using global for `settings` but no assignment is done
    |
255 | def GetSetting(attr, default=None, autoset=True):
256 |     global settings
    |            ^^^^^^^^ PLW0602
257 |     if attr in settings:
258 |         return settings[attr]
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:293:12: PLW0602 Using global for `history` but no assignment is done
    |
292 | def _SaveHistory():
293 |     global history, historyFile, historyLock
    |            ^^^^^^^ PLW0602
294 |     with historyLock:
295 |         try:
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:293:21: PLW0602 Using global for `historyFile` but no assignment is done
    |
292 | def _SaveHistory():
293 |     global history, historyFile, historyLock
    |                     ^^^^^^^^^^^ PLW0602
294 |     with historyLock:
295 |         try:
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:293:34: PLW0602 Using global for `historyLock` but no assignment is done
    |
292 | def _SaveHistory():
293 |     global history, historyFile, historyLock
    |                                  ^^^^^^^^^^^ PLW0602
294 |     with historyLock:
295 |         try:
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:300:80: E501 Line too long (83 > 79)
    |
298 |                 f.write(history_write_data)
299 |         except Exception:
300 |             logging.warning("Failed to save history:\n%s" % traceback.format_exc())
    |                                                                                ^^^^ E501
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:304:12: PLW0602 Using global for `history` but no assignment is done
    |
303 | def SetHistory(*attr, value):
304 |     global history, historyFile, historyLock
    |            ^^^^^^^ PLW0602
305 |     with historyLock:
306 |         func_name = traceback.extract_stack()
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:304:21: PLW0602 Using global for `historyFile` but no assignment is done
    |
303 | def SetHistory(*attr, value):
304 |     global history, historyFile, historyLock
    |                     ^^^^^^^^^^^ PLW0602
305 |     with historyLock:
306 |         func_name = traceback.extract_stack()
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:304:34: PLW0602 Using global for `historyLock` but no assignment is done
    |
303 | def SetHistory(*attr, value):
304 |     global history, historyFile, historyLock
    |                                  ^^^^^^^^^^^ PLW0602
305 |     with historyLock:
306 |         func_name = traceback.extract_stack()
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:307:34: PLR6201 Use a set literal when testing for membership
    |
305 |     with historyLock:
306 |         func_name = traceback.extract_stack()
307 |         if func_name[-2].name in ["GetHistory", "AddHistory", "ResetHistory"]:
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PLR6201
308 |             func_name = func_name[-3].name
309 |         else:
    |
    = help: Convert to `set`

Demucs-Gui-1.3.2.1/GUI/shared.py:311:80: E501 Line too long (82 > 79)
    |
309 |         else:
310 |             func_name = func_name[-2].name
311 |         logging.debug("(%s) Set history %s to %s" % (func_name, attr, str(value)))
    |                                                                                ^^^ E501
312 |         if _get_from_dict(history, attr) == value:
313 |             logging.debug("History not changed, ignored")
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:320:12: PLW0602 Using global for `history` but no assignment is done
    |
319 | def GetHistory(*attr, default=None, autoset=True, use_ordered_set=False):
320 |     global history
    |            ^^^^^^^ PLW0602
321 |     if _get_from_dict(history, attr) is not None:
322 |         if (not use_ordered_set) or type(_get_from_dict(history, attr)) is ordered_set.OrderedSet:
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:322:80: E501 Line too long (98 > 79)
    |
320 |     global history
321 |     if _get_from_dict(history, attr) is not None:
322 |         if (not use_ordered_set) or type(_get_from_dict(history, attr)) is ordered_set.OrderedSet:
    |                                                                                ^^^^^^^^^^^^^^^^^^^ E501
323 |             return _get_from_dict(history, attr)
324 |         return ordered_set.OrderedSet([_get_from_dict(history, attr)])
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:336:80: E501 Line too long (82 > 79)
    |
335 | def AddHistory(*attr, value):
336 |     old_value = GetHistory(*attr, default=ordered_set.OrderedSet(), autoset=False)
    |                                                                                ^^^ E501
337 |     if type(old_value) is not ordered_set.OrderedSet:
338 |         old_value = ordered_set.OrderedSet([old_value])
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:345:12: PLW0603 Using the global statement to update `history` is discouraged
    |
344 | def ResetHistory(*attr):
345 |     global history, historyFile, historyLock
    |            ^^^^^^^ PLW0603
346 |     if not attr:
347 |         logging.info("Resetting history")
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:345:21: PLW0602 Using global for `historyFile` but no assignment is done
    |
344 | def ResetHistory(*attr):
345 |     global history, historyFile, historyLock
    |                     ^^^^^^^^^^^ PLW0602
346 |     if not attr:
347 |         logging.info("Resetting history")
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:345:34: PLW0602 Using global for `historyLock` but no assignment is done
    |
344 | def ResetHistory(*attr):
345 |     global history, historyFile, historyLock
    |                                  ^^^^^^^^^^^ PLW0602
346 |     if not attr:
347 |         logging.info("Resetting history")
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:386:7: PLW1641 Object does not implement `__hash__` method
    |
386 | class URL_with_filename(object):
    |       ^^^^^^^^^^^^^^^^^ PLW1641
387 |     def __new__(cls, url, protocols=["http", "https"], **kwargs):
388 |         # Verify URL
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:389:80: E501 Line too long (80 > 79)
    |
387 |     def __new__(cls, url, protocols=["http", "https"], **kwargs):
388 |         # Verify URL
389 |         if (not (m := urlreg.match(url))) or m.group("scheme") not in protocols:
    |                                                                                ^ E501
390 |             return None
391 |         return object.__new__(cls)
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:434:80: E501 Line too long (98 > 79)
    |
432 |                 logging.info("No file name in header, trying to get from URL")
433 |             except Exception:
434 |                 logging.error("Failed to get file name from header:\n%s" % traceback.format_exc())
    |                                                                                ^^^^^^^^^^^^^^^^^^^ E501
435 |         if url_name:
436 |             self._name = url_name
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:466:80: E501 Line too long (108 > 79)
    |
464 |     def parent(self):
465 |         removed = re.sub(urlreg, re_sub_remove_file, self._url)
466 |         return URL_with_filename(removed, name=re.match(urlreg, removed)["name"], protocols=self._protocols)
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
467 |
468 |     @property
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:478:80: E501 Line too long (114 > 79)
    |
477 | def Popen(*args, **kwargs):
478 |     """A wrapper of `subprocess.Popen` to hide console window on Windows and redirect stdout and stderr to PIPE"""
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
479 |     if sys.platform == "win32":
480 |         kwargs["creationflags"] = subprocess.CREATE_NO_WINDOW
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:481:80: E501 Line too long (109 > 79)
    |
479 |     if sys.platform == "win32":
480 |         kwargs["creationflags"] = subprocess.CREATE_NO_WINDOW
481 |     # stdin, stdout and stderr are always redirected or creating process will fail on Windows without console
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
482 |     kwargs["stdout"] = subprocess.PIPE
483 |     kwargs["stderr"] = subprocess.PIPE
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:503:80: E501 Line too long (82 > 79)
    |
501 |         def wrapper(*args, **kwargs):
502 |             thread_wrapper.index += 1
503 |             stack = "".join(traceback.format_list(traceback.extract_stack()[:-1]))
    |                                                                                ^^^ E501
504 |
505 |             def run_and_log(idx=thread_wrapper.index):
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:507:80: E501 Line too long (117 > 79)
    |
505 |             def run_and_log(idx=thread_wrapper.index):
506 |                 logging.info(
507 |                     "[%d] Thread %s (%s) starts" % (idx, func.__name__, pathlib.Path(func.__code__.co_filename).name)
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
508 |                 )
509 |                 try:
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:524:80: E501 Line too long (119 > 79)
    |
522 |                 finally:
523 |                     logging.info(
524 |                         "[%d] Thread %s (%s) ends" % (idx, func.__name__, pathlib.Path(func.__code__.co_filename).name)
    |                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E501
525 |                     )
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:543:80: E501 Line too long (82 > 79)
    |
541 |             data = json.loads(f.read())[0]
542 |         logging.info("Latest version: %s" % data["tag_name"])
543 |         m = re.search(r"<!--\s*\[inapp-info\](.*)\s*-->", data["body"], re.DOTALL)
    |                                                                                ^^^ E501
544 |         description = ""
545 |         if m:
    |

Demucs-Gui-1.3.2.1/GUI/shared.py:549:80: E501 Line too long (84 > 79)
    |
547 |         callback(data["tag_name"], description)
548 |     except Exception:
549 |         logging.warning("Failed to check for updates:\n%s" % traceback.format_exc())
    |                                                                                ^^^^^ E501
550 |         callback(None)
    |

Found 589 errors.
No fixes available (17 hidden fixes can be enabled with the `--unsafe-fixes` option).
(fast-zero-py3.13) ➜  fast_zero git:(master) ✗ 